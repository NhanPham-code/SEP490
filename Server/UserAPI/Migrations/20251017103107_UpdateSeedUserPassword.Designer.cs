// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAPI.Data;

#nullable disable

namespace UserAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20251017103107_UpdateSeedUserPassword")]
    partial class UpdateSeedUserPassword
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserAPI.Model.BiometricCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BiometricCredentials");
                });

            modelBuilder.Entity("UserAPI.Model.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("UserAPI.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FaceEmbeddingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCCCDUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCCCDUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Đường A, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager1@example.com",
                            FullName = "Chủ Sân Một",
                            IsActive = true,
                            PasswordHash = new byte[] { 197, 68, 131, 196, 224, 137, 46, 176, 226, 184, 209, 253, 211, 178, 1, 41, 223, 127, 140, 194, 236, 31, 250, 204, 213, 188, 61, 181, 0, 25, 189, 168, 246, 73, 19, 8, 136, 101, 112, 174, 55, 9, 55, 41, 253, 254, 168, 250, 253, 145, 244, 240, 207, 34, 60, 142, 103, 73, 151, 191, 106, 246, 233, 60 },
                            PasswordSalt = new byte[] { 9, 241, 64, 122, 192, 162, 174, 103, 179, 229, 204, 134, 64, 123, 55, 72, 40, 111, 165, 182, 51, 129, 222, 30, 171, 117, 59, 232, 35, 234, 172, 86, 39, 31, 180, 74, 234, 59, 28, 225, 27, 59, 190, 193, 174, 153, 45, 16, 180, 40, 151, 37, 169, 150, 142, 230, 77, 107, 71, 111, 82, 162, 134, 147, 181, 18, 56, 170, 198, 183, 191, 43, 245, 58, 171, 69, 251, 204, 148, 77, 3, 209, 107, 45, 222, 51, 157, 6, 67, 147, 244, 151, 226, 140, 204, 154, 67, 46, 17, 138, 96, 15, 197, 219, 224, 90, 19, 46, 175, 82, 115, 203, 67, 102, 94, 242, 238, 48, 232, 101, 83, 67, 25, 114, 34, 219, 63, 128 },
                            PhoneNumber = "0901111111",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Đường B, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager2@example.com",
                            FullName = "Chủ Sân Hai",
                            IsActive = true,
                            PasswordHash = new byte[] { 197, 68, 131, 196, 224, 137, 46, 176, 226, 184, 209, 253, 211, 178, 1, 41, 223, 127, 140, 194, 236, 31, 250, 204, 213, 188, 61, 181, 0, 25, 189, 168, 246, 73, 19, 8, 136, 101, 112, 174, 55, 9, 55, 41, 253, 254, 168, 250, 253, 145, 244, 240, 207, 34, 60, 142, 103, 73, 151, 191, 106, 246, 233, 60 },
                            PasswordSalt = new byte[] { 9, 241, 64, 122, 192, 162, 174, 103, 179, 229, 204, 134, 64, 123, 55, 72, 40, 111, 165, 182, 51, 129, 222, 30, 171, 117, 59, 232, 35, 234, 172, 86, 39, 31, 180, 74, 234, 59, 28, 225, 27, 59, 190, 193, 174, 153, 45, 16, 180, 40, 151, 37, 169, 150, 142, 230, 77, 107, 71, 111, 82, 162, 134, 147, 181, 18, 56, 170, 198, 183, 191, 43, 245, 58, 171, 69, 251, 204, 148, 77, 3, 209, 107, 45, 222, 51, 157, 6, 67, 147, 244, 151, 226, 140, 204, 154, 67, 46, 17, 138, 96, 15, 197, 219, 224, 90, 19, 46, 175, 82, 115, 203, 67, 102, 94, 242, 238, 48, 232, 101, 83, 67, 25, 114, 34, 219, 63, 128 },
                            PhoneNumber = "0902222222",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 3,
                            Address = "789 Đường C, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager3@example.com",
                            FullName = "Chủ Sân Ba",
                            IsActive = true,
                            PasswordHash = new byte[] { 197, 68, 131, 196, 224, 137, 46, 176, 226, 184, 209, 253, 211, 178, 1, 41, 223, 127, 140, 194, 236, 31, 250, 204, 213, 188, 61, 181, 0, 25, 189, 168, 246, 73, 19, 8, 136, 101, 112, 174, 55, 9, 55, 41, 253, 254, 168, 250, 253, 145, 244, 240, 207, 34, 60, 142, 103, 73, 151, 191, 106, 246, 233, 60 },
                            PasswordSalt = new byte[] { 9, 241, 64, 122, 192, 162, 174, 103, 179, 229, 204, 134, 64, 123, 55, 72, 40, 111, 165, 182, 51, 129, 222, 30, 171, 117, 59, 232, 35, 234, 172, 86, 39, 31, 180, 74, 234, 59, 28, 225, 27, 59, 190, 193, 174, 153, 45, 16, 180, 40, 151, 37, 169, 150, 142, 230, 77, 107, 71, 111, 82, 162, 134, 147, 181, 18, 56, 170, 198, 183, 191, 43, 245, 58, 171, 69, 251, 204, 148, 77, 3, 209, 107, 45, 222, 51, 157, 6, 67, 147, 244, 151, 226, 140, 204, 154, 67, 46, 17, 138, 96, 15, 197, 219, 224, 90, 19, 46, 175, 82, 115, 203, 67, 102, 94, 242, 238, 48, 232, 101, 83, 67, 25, 114, 34, 219, 63, 128 },
                            PhoneNumber = "0903333333",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 4,
                            Address = "101 Đường D, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager4@example.com",
                            FullName = "Chủ Sân Bốn",
                            IsActive = true,
                            PasswordHash = new byte[] { 197, 68, 131, 196, 224, 137, 46, 176, 226, 184, 209, 253, 211, 178, 1, 41, 223, 127, 140, 194, 236, 31, 250, 204, 213, 188, 61, 181, 0, 25, 189, 168, 246, 73, 19, 8, 136, 101, 112, 174, 55, 9, 55, 41, 253, 254, 168, 250, 253, 145, 244, 240, 207, 34, 60, 142, 103, 73, 151, 191, 106, 246, 233, 60 },
                            PasswordSalt = new byte[] { 9, 241, 64, 122, 192, 162, 174, 103, 179, 229, 204, 134, 64, 123, 55, 72, 40, 111, 165, 182, 51, 129, 222, 30, 171, 117, 59, 232, 35, 234, 172, 86, 39, 31, 180, 74, 234, 59, 28, 225, 27, 59, 190, 193, 174, 153, 45, 16, 180, 40, 151, 37, 169, 150, 142, 230, 77, 107, 71, 111, 82, 162, 134, 147, 181, 18, 56, 170, 198, 183, 191, 43, 245, 58, 171, 69, 251, 204, 148, 77, 3, 209, 107, 45, 222, 51, 157, 6, 67, 147, 244, 151, 226, 140, 204, 154, 67, 46, 17, 138, 96, 15, 197, 219, 224, 90, 19, 46, 175, 82, 115, 203, 67, 102, 94, 242, 238, 48, 232, 101, 83, 67, 25, 114, 34, 219, 63, 128 },
                            PhoneNumber = "0904444444",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 5,
                            Address = "1 Admin Street, System",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            IsActive = true,
                            PasswordHash = new byte[] { 197, 68, 131, 196, 224, 137, 46, 176, 226, 184, 209, 253, 211, 178, 1, 41, 223, 127, 140, 194, 236, 31, 250, 204, 213, 188, 61, 181, 0, 25, 189, 168, 246, 73, 19, 8, 136, 101, 112, 174, 55, 9, 55, 41, 253, 254, 168, 250, 253, 145, 244, 240, 207, 34, 60, 142, 103, 73, 151, 191, 106, 246, 233, 60 },
                            PasswordSalt = new byte[] { 9, 241, 64, 122, 192, 162, 174, 103, 179, 229, 204, 134, 64, 123, 55, 72, 40, 111, 165, 182, 51, 129, 222, 30, 171, 117, 59, 232, 35, 234, 172, 86, 39, 31, 180, 74, 234, 59, 28, 225, 27, 59, 190, 193, 174, 153, 45, 16, 180, 40, 151, 37, 169, 150, 142, 230, 77, 107, 71, 111, 82, 162, 134, 147, 181, 18, 56, 170, 198, 183, 191, 43, 245, 58, 171, 69, 251, 204, 148, 77, 3, 209, 107, 45, 222, 51, 157, 6, 67, 147, 244, 151, 226, 140, 204, 154, 67, 46, 17, 138, 96, 15, 197, 219, 224, 90, 19, 46, 175, 82, 115, 203, 67, 102, 94, 242, 238, 48, 232, 101, 83, 67, 25, 114, 34, 219, 63, 128 },
                            PhoneNumber = "0905555555",
                            Role = "Admin",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 2006,
                            Address = "2006 Đường E, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "phamhiennhan3105@gmail.com",
                            FullName = "Phạm Hiền Nhân",
                            IsActive = true,
                            PasswordHash = new byte[] { 197, 68, 131, 196, 224, 137, 46, 176, 226, 184, 209, 253, 211, 178, 1, 41, 223, 127, 140, 194, 236, 31, 250, 204, 213, 188, 61, 181, 0, 25, 189, 168, 246, 73, 19, 8, 136, 101, 112, 174, 55, 9, 55, 41, 253, 254, 168, 250, 253, 145, 244, 240, 207, 34, 60, 142, 103, 73, 151, 191, 106, 246, 233, 60 },
                            PasswordSalt = new byte[] { 9, 241, 64, 122, 192, 162, 174, 103, 179, 229, 204, 134, 64, 123, 55, 72, 40, 111, 165, 182, 51, 129, 222, 30, 171, 117, 59, 232, 35, 234, 172, 86, 39, 31, 180, 74, 234, 59, 28, 225, 27, 59, 190, 193, 174, 153, 45, 16, 180, 40, 151, 37, 169, 150, 142, 230, 77, 107, 71, 111, 82, 162, 134, 147, 181, 18, 56, 170, 198, 183, 191, 43, 245, 58, 171, 69, 251, 204, 148, 77, 3, 209, 107, 45, 222, 51, 157, 6, 67, 147, 244, 151, 226, 140, 204, 154, 67, 46, 17, 138, 96, 15, 197, 219, 224, 90, 19, 46, 175, 82, 115, 203, 67, 102, 94, 242, 238, 48, 232, 101, 83, 67, 25, 114, 34, 219, 63, 128 },
                            PhoneNumber = "09020062006",
                            Role = "Customer",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("UserAPI.Model.BiometricCredential", b =>
                {
                    b.HasOne("UserAPI.Model.User", "User")
                        .WithMany("BiometricCredentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAPI.Model.RefreshToken", b =>
                {
                    b.HasOne("UserAPI.Model.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAPI.Model.User", b =>
                {
                    b.Navigation("BiometricCredentials");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
