// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAPI.Data;

#nullable disable

namespace UserAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20251017101253_InitialCreateWithSeedData")]
    partial class InitialCreateWithSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserAPI.Model.BiometricCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BiometricCredentials");
                });

            modelBuilder.Entity("UserAPI.Model.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("UserAPI.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FaceEmbeddingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCCCDUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCCCDUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Đường A, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager1@example.com",
                            FullName = "Chủ Sân Một",
                            IsActive = true,
                            PasswordHash = new byte[] { 78, 75, 76, 158, 140, 141, 62, 59, 224, 42, 7, 141, 142, 103, 159, 140, 115, 69, 55, 79, 99, 25, 19, 108, 89, 127, 41, 47, 140, 61, 152, 68, 86, 30, 65, 38, 141, 40, 74, 156, 145, 14, 95, 151, 137, 100, 53, 68, 18, 139, 8, 122, 43, 133, 155, 131, 94, 108, 103, 46, 16, 40, 72, 91 },
                            PasswordSalt = new byte[] { 1, 26, 92, 195, 147, 44, 72, 141, 136, 24, 58, 28, 93, 94, 154, 126, 103, 123, 42, 74, 5, 124, 142, 146, 63, 44, 104, 91, 245, 22, 132, 173, 242, 58, 212, 90, 122, 156, 93, 11, 14, 141, 140, 58, 10, 196, 155, 35, 127, 110, 248, 95, 4, 55, 65, 61, 138, 28, 193, 154, 109, 100, 12, 91, 233, 122, 94, 101, 24, 124, 6, 44, 144, 58, 161, 83, 60, 156, 123, 42, 21, 72, 122, 127, 26, 243, 245, 92, 75, 108, 116, 73, 193, 126, 69, 77, 141, 88, 126, 22, 68, 131, 156, 3, 28, 70, 17, 44, 95, 62, 59, 79, 60, 152, 66, 19, 89, 120, 83, 94, 84, 111, 131, 114, 90, 14, 124, 108 },
                            PhoneNumber = "0901111111",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Đường B, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager2@example.com",
                            FullName = "Chủ Sân Hai",
                            IsActive = true,
                            PasswordHash = new byte[] { 78, 75, 76, 158, 140, 141, 62, 59, 224, 42, 7, 141, 142, 103, 159, 140, 115, 69, 55, 79, 99, 25, 19, 108, 89, 127, 41, 47, 140, 61, 152, 68, 86, 30, 65, 38, 141, 40, 74, 156, 145, 14, 95, 151, 137, 100, 53, 68, 18, 139, 8, 122, 43, 133, 155, 131, 94, 108, 103, 46, 16, 40, 72, 91 },
                            PasswordSalt = new byte[] { 1, 26, 92, 195, 147, 44, 72, 141, 136, 24, 58, 28, 93, 94, 154, 126, 103, 123, 42, 74, 5, 124, 142, 146, 63, 44, 104, 91, 245, 22, 132, 173, 242, 58, 212, 90, 122, 156, 93, 11, 14, 141, 140, 58, 10, 196, 155, 35, 127, 110, 248, 95, 4, 55, 65, 61, 138, 28, 193, 154, 109, 100, 12, 91, 233, 122, 94, 101, 24, 124, 6, 44, 144, 58, 161, 83, 60, 156, 123, 42, 21, 72, 122, 127, 26, 243, 245, 92, 75, 108, 116, 73, 193, 126, 69, 77, 141, 88, 126, 22, 68, 131, 156, 3, 28, 70, 17, 44, 95, 62, 59, 79, 60, 152, 66, 19, 89, 120, 83, 94, 84, 111, 131, 114, 90, 14, 124, 108 },
                            PhoneNumber = "0902222222",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 3,
                            Address = "789 Đường C, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager3@example.com",
                            FullName = "Chủ Sân Ba",
                            IsActive = true,
                            PasswordHash = new byte[] { 78, 75, 76, 158, 140, 141, 62, 59, 224, 42, 7, 141, 142, 103, 159, 140, 115, 69, 55, 79, 99, 25, 19, 108, 89, 127, 41, 47, 140, 61, 152, 68, 86, 30, 65, 38, 141, 40, 74, 156, 145, 14, 95, 151, 137, 100, 53, 68, 18, 139, 8, 122, 43, 133, 155, 131, 94, 108, 103, 46, 16, 40, 72, 91 },
                            PasswordSalt = new byte[] { 1, 26, 92, 195, 147, 44, 72, 141, 136, 24, 58, 28, 93, 94, 154, 126, 103, 123, 42, 74, 5, 124, 142, 146, 63, 44, 104, 91, 245, 22, 132, 173, 242, 58, 212, 90, 122, 156, 93, 11, 14, 141, 140, 58, 10, 196, 155, 35, 127, 110, 248, 95, 4, 55, 65, 61, 138, 28, 193, 154, 109, 100, 12, 91, 233, 122, 94, 101, 24, 124, 6, 44, 144, 58, 161, 83, 60, 156, 123, 42, 21, 72, 122, 127, 26, 243, 245, 92, 75, 108, 116, 73, 193, 126, 69, 77, 141, 88, 126, 22, 68, 131, 156, 3, 28, 70, 17, 44, 95, 62, 59, 79, 60, 152, 66, 19, 89, 120, 83, 94, 84, 111, 131, 114, 90, 14, 124, 108 },
                            PhoneNumber = "0903333333",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 4,
                            Address = "101 Đường D, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stadium.manager4@example.com",
                            FullName = "Chủ Sân Bốn",
                            IsActive = true,
                            PasswordHash = new byte[] { 78, 75, 76, 158, 140, 141, 62, 59, 224, 42, 7, 141, 142, 103, 159, 140, 115, 69, 55, 79, 99, 25, 19, 108, 89, 127, 41, 47, 140, 61, 152, 68, 86, 30, 65, 38, 141, 40, 74, 156, 145, 14, 95, 151, 137, 100, 53, 68, 18, 139, 8, 122, 43, 133, 155, 131, 94, 108, 103, 46, 16, 40, 72, 91 },
                            PasswordSalt = new byte[] { 1, 26, 92, 195, 147, 44, 72, 141, 136, 24, 58, 28, 93, 94, 154, 126, 103, 123, 42, 74, 5, 124, 142, 146, 63, 44, 104, 91, 245, 22, 132, 173, 242, 58, 212, 90, 122, 156, 93, 11, 14, 141, 140, 58, 10, 196, 155, 35, 127, 110, 248, 95, 4, 55, 65, 61, 138, 28, 193, 154, 109, 100, 12, 91, 233, 122, 94, 101, 24, 124, 6, 44, 144, 58, 161, 83, 60, 156, 123, 42, 21, 72, 122, 127, 26, 243, 245, 92, 75, 108, 116, 73, 193, 126, 69, 77, 141, 88, 126, 22, 68, 131, 156, 3, 28, 70, 17, 44, 95, 62, 59, 79, 60, 152, 66, 19, 89, 120, 83, 94, 84, 111, 131, 114, 90, 14, 124, 108 },
                            PhoneNumber = "0904444444",
                            Role = "StadiumManager",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 5,
                            Address = "1 Admin Street, System",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            IsActive = true,
                            PasswordHash = new byte[] { 78, 75, 76, 158, 140, 141, 62, 59, 224, 42, 7, 141, 142, 103, 159, 140, 115, 69, 55, 79, 99, 25, 19, 108, 89, 127, 41, 47, 140, 61, 152, 68, 86, 30, 65, 38, 141, 40, 74, 156, 145, 14, 95, 151, 137, 100, 53, 68, 18, 139, 8, 122, 43, 133, 155, 131, 94, 108, 103, 46, 16, 40, 72, 91 },
                            PasswordSalt = new byte[] { 1, 26, 92, 195, 147, 44, 72, 141, 136, 24, 58, 28, 93, 94, 154, 126, 103, 123, 42, 74, 5, 124, 142, 146, 63, 44, 104, 91, 245, 22, 132, 173, 242, 58, 212, 90, 122, 156, 93, 11, 14, 141, 140, 58, 10, 196, 155, 35, 127, 110, 248, 95, 4, 55, 65, 61, 138, 28, 193, 154, 109, 100, 12, 91, 233, 122, 94, 101, 24, 124, 6, 44, 144, 58, 161, 83, 60, 156, 123, 42, 21, 72, 122, 127, 26, 243, 245, 92, 75, 108, 116, 73, 193, 126, 69, 77, 141, 88, 126, 22, 68, 131, 156, 3, 28, 70, 17, 44, 95, 62, 59, 79, 60, 152, 66, 19, 89, 120, 83, 94, 84, 111, 131, 114, 90, 14, 124, 108 },
                            PhoneNumber = "0905555555",
                            Role = "Admin",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = 2006,
                            Address = "2006 Đường E, Cần Thơ",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "phamhiennhan3105@gmail.com",
                            FullName = "Phạm Hiền Nhân",
                            IsActive = true,
                            PasswordHash = new byte[] { 78, 75, 76, 158, 140, 141, 62, 59, 224, 42, 7, 141, 142, 103, 159, 140, 115, 69, 55, 79, 99, 25, 19, 108, 89, 127, 41, 47, 140, 61, 152, 68, 86, 30, 65, 38, 141, 40, 74, 156, 145, 14, 95, 151, 137, 100, 53, 68, 18, 139, 8, 122, 43, 133, 155, 131, 94, 108, 103, 46, 16, 40, 72, 91 },
                            PasswordSalt = new byte[] { 1, 26, 92, 195, 147, 44, 72, 141, 136, 24, 58, 28, 93, 94, 154, 126, 103, 123, 42, 74, 5, 124, 142, 146, 63, 44, 104, 91, 245, 22, 132, 173, 242, 58, 212, 90, 122, 156, 93, 11, 14, 141, 140, 58, 10, 196, 155, 35, 127, 110, 248, 95, 4, 55, 65, 61, 138, 28, 193, 154, 109, 100, 12, 91, 233, 122, 94, 101, 24, 124, 6, 44, 144, 58, 161, 83, 60, 156, 123, 42, 21, 72, 122, 127, 26, 243, 245, 92, 75, 108, 116, 73, 193, 126, 69, 77, 141, 88, 126, 22, 68, 131, 156, 3, 28, 70, 17, 44, 95, 62, 59, 79, 60, 152, 66, 19, 89, 120, 83, 94, 84, 111, 131, 114, 90, 14, 124, 108 },
                            PhoneNumber = "09020062006",
                            Role = "Customer",
                            UpdatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("UserAPI.Model.BiometricCredential", b =>
                {
                    b.HasOne("UserAPI.Model.User", "User")
                        .WithMany("BiometricCredentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAPI.Model.RefreshToken", b =>
                {
                    b.HasOne("UserAPI.Model.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAPI.Model.User", b =>
                {
                    b.Navigation("BiometricCredentials");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
