@{
    ViewData["Title"] = "Quản Lý Sân Thể Thao";
}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="~/css/stadium/stadium.css"/>
<link rel="stylesheet" href="~/css/stadium/Background.css" />
<!-- Add these to your HTML head -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>
        <style>
    /* Map Styles */
    .map-container {
        width: 100%;
        border: 2px solid #e1e5e9;
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: border-color 0.3s ease;
    }

        .map-container:hover {
            border-color: #0066cc;
        }

    .location-map {
        width: 100%;
        height: 400px;
        position: relative;
        background: #f8f9fa;
    }

    .map-controls {
        display: flex;
        gap: 12px;
        padding: 16px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-top: 1px solid #e1e5e9;
    }

    .btn-detect-location,
    .btn-search-location {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 16px;
        border: 2px solid #0066cc;
        border-radius: 8px;
        background: white;
        color: #0066cc;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        outline: none;
    }

        .btn-detect-location:hover,
        .btn-search-location:hover {
            background: #0066cc;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 102, 204, 0.3);
        }

        .btn-detect-location:active,
        .btn-search-location:active {
            transform: translateY(0);
        }

        .btn-detect-location i,
        .btn-search-location i {
            font-size: 16px;
        }

    /* Custom Leaflet Popup Styles */
    .leaflet-popup-content-wrapper {
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        border: none;
    }

    .leaflet-popup-content {
        margin: 16px;
        font-family: 'Inter', sans-serif;
    }

    .custom-popup {
        max-width: 250px;
    }

    .popup-title {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 8px;
        font-size: 16px;
    }

    .popup-address {
        color: #4a5568;
        font-size: 14px;
        line-height: 1.4;
        margin-bottom: 12px;
    }

    .popup-coordinates {
        display: flex;
        flex-direction: column;
        gap: 4px;
        font-size: 12px;
        color: #718096;
        background: #f7fafc;
        padding: 8px;
        border-radius: 6px;
    }

        .popup-coordinates span {
            font-family: 'Monaco', 'Menlo', monospace;
        }

    /* Loading spinner for map */
    .map-loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 12px;
    }

    .map-spinner {
        width: 32px;
        height: 32px;
        border: 3px solid #e1e5e9;
        border-top: 3px solid #0066cc;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .map-loading-text {
        color: #4a5568;
        font-size: 14px;
        font-weight: 500;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .location-map

    {
        height: 300px;
    }

    .map-controls {
        flex-direction: column;
        gap: 8px;
    }

    .btn-detect-location,
    .btn-search-location {
        justify-content: center;
        width: 100%;
    }

    }

    /* Custom marker styles */
    .custom-marker {
        background: #0066cc;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 4px 12px rgba(0, 102, 204, 0.4);
        animation: markerPulse 2s infinite;
    }

    @@keyframes markerPulse {
        0%

    {
        box-shadow: 0 4px 12px rgba(0, 102, 204, 0.4);
    }

    50% {
        box-shadow: 0 4px 20px rgba(0, 102, 204, 0.8);
    }

    100% {
        box-shadow: 0 4px 12px rgba(0, 102, 204, 0.4);
    }

    }

    /* Search overlay */
    .location-search-overlay {
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        z-index: 1000;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        display: none;
    }

    .location-search-input {
        width: 100%;
        padding: 12px 16px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        outline: none;
    }

    .search-results {
        max-height: 200px;
        overflow-y: auto;
    }

    .search-result-item {
        padding: 12px 16px;
        border-top: 1px solid #e1e5e9;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .search-result-item:hover {
            background-color: #f8f9fa;
        }

        .search-result-item:first-child {
            border-top: none;
        }
        </style>
@section Scripts {

    <!-- Thêm vào <head> của trang -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="mapStyles.css">

    <!-- Thêm trước thẻ đóng </body> -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="mapFunctions.js"></script>

    <script>
                // Complete Enhanced Stadium Management JavaScript with Improved Modals

        // Constants
        const CONFIG = {
            API_ENDPOINTS: {
                SEARCH: '/StadiumManager/GetAllAndSearch',
                DELETE: '/StadiumManager/DeleteStadium',
                CREATE: '/StadiumManager/CreateNewStadium',
                EDIT: '/StadiumManager/UpdateStadium',
                EXPORT: '/StadiumManager/ExportReport',
                DELETE_IMAGE: '/StadiumManager/DeleteImageById'
            },
            PAGINATION: {
                ITEMS_PER_PAGE: 9,
                MAX_PAGES: 5
            },
            DATE_FORMAT: {
                DISPLAY: 'YYYY-MM-DD HH:mm:ss'
            }
        };

        // State Management
        let state = {
            currentPage: 1,
            totalItems: 0,
            filters: {
                search: '',
                status: 'all',
                sportType: 'all'
            }
        };

        // Initialize
        $(document).ready(function () {
            initializeApp();
            updateDateTime();
            setInterval(updateDateTime, 10000);
        });

        // Core Functions
        function initializeApp() {
            bindEventListeners();
            loadInitialData();
        }

        function bindEventListeners() {
            let debounceTimer;
            $('#search-input').on('input', function () {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    state.filters.search = $(this).val();
                    state.currentPage = 1;
                    loadData();
                }, 3000);
            });

            $('#status-filter, #sport-type-filter').on('change', function () {
                const filterType = $(this).attr('id').replace('-filter', '').replace('-', '');
                state.filters[filterType === 'sporttype' ? 'sportType' : filterType] = $(this).val();
                state.currentPage = 1;
                loadData();
            });
        }

        function loadInitialData() {
            showLoading();
            loadData();
        }

        function loadData() {
            showLoading();
            $('#empty-state').hide();

            const filterQuery = buildFilterQuery();
            const searchTerm = `&$filter=${filterQuery}`;

            $.ajax({
                url: CONFIG.API_ENDPOINTS.SEARCH,
                type: 'POST',
                data: {
                    url: searchTerm,
                },
                success: function (data) {
                    updateUI(data);
                    hideLoading();

                    if (!data.value || data.value.length === 0) {
                        $('#empty-state').show().addClass('animate-fade-in');
                    } else {
                        $('#empty-state').hide().removeClass('animate-fade-in');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    hideLoading();
                    showEmptyState();
                }
            });
        }

        function updateUI(data) {
            if (!data) return;
            console.log('Data received:', data);
            renderStadiumGrid(data.value);
            updatePagination(data["@@odata.count"]);
            hideLoading();
        }

                function goToDetail(stadiumId) {
            sessionStorage.setItem("currentStadiumId", stadiumId);
                    window.location.href = "/CourtsManager/CourtManager";
        }

        function renderStadiumGrid(stadiums) {
            if (!stadiums || stadiums.length === 0) {
                $('#stadium-grid').html('');
                return;
            }
                    
            const html = stadiums.map(stadium => `
                <div class="stadium-card animate-fade-in">
                    <div class="stadium-image">
                        <img src="${getUrlImage(stadium.StadiumImages)}"
                             alt="${stadium.Name}"
                             loading="lazy">
                        <div class="image-overlay"></div>
                        <div class="status-badge status-${stadium.IsApproved}">
                            <i class="ri-${stadium.IsApproved ? 'checkbox-circle' : 'error-warning'}-line"></i>
                            ${getStatusText(stadium.IsApproved)}
                        </div>
                        <h3 class="stadium-title">${stadium.Name}</h3>
                    </div>
                    <div class="card-content">
                        <div class="location-info">
                            <i class="ri-map-pin-2-line"></i>
                            ${stadium.Address || 'Chưa cập nhật địa chỉ'}
                        </div>
                        <div class="info-grid">
                            
                            <div class="info-card price-info">
                                <div class="info-label">Giá/giờ</div>
                                <div class="info-value">${formatPrice(stadium.Courts)}</div>
                            </div>
                            <div class="info-card time-info">
                                <div class="info-label">Giờ hoạt động</div>
                                <div class="info-value">${formatTimeForDisplay(stadium.OpenTime)} - ${formatTimeForDisplay(stadium.CloseTime)}</div>
                            </div>
                        </div>
                        <div class="pb-4">
                            <div class="info-card sport-info">
                                <div class="info-label">Loại sân</div>
                                <div class="info-value">${getSportTypes(stadium.Courts)}</div>
                            </div>
                        </div>
                        <div class="card-actions">
                                                    <button onclick="goToDetail(${stadium.Id})" class="details-btn loading">
           <i class="ri-information-line"></i> Chi tiết
        </button>

                                    <div class="action-buttons">
            <button onclick="openEditModal(${stadium.Id})" class="action-btn edit-btn" title="Chỉnh sửa">
                <i class="ri-edit-line"></i>
            </button>
            ${stadium.IsLocked ?
                `<button onclick="confirmUnlock(${stadium.Id})" class="action-btn unlock-btn" title="Mở khóa">
                    <i class="ri-lock-unlock-line"></i>
                </button>` :
                `<button onclick="confirmLock(${stadium.Id})" class="action-btn lock-btn" title="Khóa">
                    <i class="ri-lock-line"></i>
                </button>`
            }
        </div>
                        </div>
                    </div>
                </div>
            `).join('');

            $('#stadium-grid').html(html);
        }

        // Enhanced Time Formatting Functions
        function formatTimeForDisplay(timeString) {
            if (!timeString) return '--:--';

            // Handle TimeSpan format from C# (e.g., "06:00:00" or "06:00:00.0000000")
            if (typeof timeString === 'string' && timeString.includes(':')) {
                const parts = timeString.split(':');
                const hours = parts[0].padStart(2, '0');
                const minutes = parts[1].padStart(2, '0');
                return `${hours}:${minutes}`;
            }

            return timeString;
        }

        function formatTimeForInput(timeString) {
            if (!timeString) return '';

            // Handle TimeSpan format from C# (e.g., "06:00:00" or "06:00:00.0000000")
            if (typeof timeString === 'string' && timeString.includes(':')) {
                const parts = timeString.split(':');
                const hours = parts[0].padStart(2, '0');
                const minutes = parts[1].padStart(2, '0');
                return `${hours}:${minutes}`;
            }

            return timeString;
        }

        function validateTimeRange(openTime, closeTime) {
            if (!openTime || !closeTime) return true; // Skip validation if empty

            const openMinutes = convertTimeToMinutes(openTime);
            const closeMinutes = convertTimeToMinutes(closeTime);

            return openMinutes < closeMinutes;
        }

        function convertTimeToMinutes(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        }

        // Enhanced Create Modal
               function openCreate() {
            Swal.fire({
                title: `
                    <div class="modal-header">
                        <div class="modal-icon">
                            <i class="ri-add-circle-line"></i>
                        </div>
                        <div class="modal-title-text">Thêm Sân Thể Thao Mới</div>
                    </div>
                `,
                html: generateCreateModalHTML(),
                showCancelButton: true,
                confirmButtonText: '<i class="ri-save-line mr-1"></i>Thêm Sân Mới',
                cancelButtonText: '<i class="ri-close-line mr-1"></i>Hủy Bỏ',
                confirmButtonColor: '#3b82f6',
                cancelButtonColor: '#6b7280',
                width: '900px',
                customClass: {
                    confirmButton: 'enhanced-confirm-btn',
                    cancelButton: 'enhanced-cancel-btn',
                    popup: 'enhanced-popup'
                },
                didOpen: () => {
                    // Existing time preview functionality
                    const openTimeInput = document.getElementById('newOpenTime');
                    const closeTimeInput = document.getElementById('newCloseTime');
                    const timePreview = document.getElementById('timePreview');

                    function updateTimePreview() {
                        const openTime = openTimeInput.value || '06:00';
                        const closeTime = closeTimeInput.value || '22:00';
                        timePreview.textContent = `${openTime} - ${closeTime}`;
                    }

                    openTimeInput.addEventListener('change', updateTimePreview);
                    closeTimeInput.addEventListener('change', updateTimePreview);
                    updateTimePreview();

                    // ===== THÊM MỚI: MAP FUNCTIONALITY =====
                    initializeLocationMap();
                    initializeAddressSearch();
                },
                willClose: () => {
                    // ===== THÊM MỚI: CLEANUP MAP =====
                    onModalClose();
                },
                preConfirm: () => {
                    // Clear any existing validation messages
                    Swal.resetValidationMessage();

                    try {
                        const name = document.getElementById('newName').value.trim();
                        const address = document.getElementById('newAddress').value.trim();
                        const openTime = document.getElementById('newOpenTime').value;
                        const closeTime = document.getElementById('newCloseTime').value;
                        const images = document.getElementById("newImageUpload").files;
                        const videos = document.getElementById("newVideoUpload").files;

                        // Validation với error handling
                        const validations = [
                            { condition: !name, message: 'Vui lòng nhập tên sân' },
                            { condition: !address, message: 'Vui lòng nhập địa chỉ' },
                            { condition: !openTime || !closeTime, message: 'Vui lòng chọn giờ hoạt động' },
                            { condition: !validateTimeRange(openTime, closeTime), message: 'Giờ đóng cửa phải sau giờ mở cửa' },
                            { condition: images.length === 0, message: 'Hãy tải lên hình ảnh về sân của bạn' },
                            { condition: videos.length === 0, message: 'Hãy tải lên video về sân của bạn' }
                        ];

                        for (const validation of validations) {
                            if (validation.condition) {
                                Swal.showValidationMessage(`<i class="ri-error-warning-line mr-1"></i>${validation.message}`);
                                return false;
                            }
                        }

                        // Build FormData...
                        const formData = new FormData();
                        formData.append('Stadium.Name', name);
                        formData.append('Stadium.NameUnsigned', address);
                        formData.append('Stadium.Address', address);
                        formData.append('Stadium.AddressUnsigned', address);
                        formData.append('Stadium.Description', document.getElementById('newDescription').value || '');
                        formData.append('Stadium.OpenTime', openTime);
                        formData.append('Stadium.CloseTime', closeTime);

                        // ===== THÊM MỚI: GPS COORDINATES =====
                        const latitude = document.getElementById('newLatitude').value;
                        const longitude = document.getElementById('newLongitude').value;
                        if (latitude) formData.append('Stadium.Latitude', latitude);
                        if (longitude) formData.append('Stadium.Longitude', longitude);

                        // Add images
                        for (let i = 0; i < images.length; i++) {
                            formData.append(`StadiumImage[${i}].ImageUrl`, images[i]);
                        }

                        // Add videos
                        for (let i = 0; i < videos.length; i++) {
                            formData.append(`StadiumVideo[${i}].VideoUrl`, videos[i]);
                        }

                        return formData;

                    } catch (error) {
                        console.error('Validation error:', error);
                        Swal.showValidationMessage('<i class="ri-error-warning-line mr-1"></i>Có lỗi xảy ra, vui lòng thử lại');
                        return false;
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    createNewStadium(result.value);
                }
            });
        }
       

        // Helper function to render current images for edit modal
        function renderCurrentImagesForEdit(images) {
            if (!images || images.length === 0) {
                return `
                    <div class="current-images-section">
                        <h4 style="margin: 0 0 16px 0; color: #6b7280; font-size: 0.875rem;">Hình ảnh hiện tại</h4>
                        <div class="empty-images">
                            <i class="ri-image-line" style="font-size: 2rem; color: #d1d5db;"></i>
                            <p style="margin: 8px 0 0 0; color: #9ca3af; font-size: 0.875rem;">Chưa có hình ảnh</p>
                        </div>
                    </div>
                `;
            }

            return `
                <div class="current-images-section">
                    <h4 style="margin: 0 0 16px 0; color: #374151; font-size: 0.875rem; font-weight: 600;">Hình ảnh hiện tại</h4>
                    <div class="current-images-grid">
                        ${images.map((image, index) => `
                            <div class="image-item" data-image-id="${image.Id || index}">
                                <img src="${getUrlImage([image])}" alt="Stadium image" />
                                ${index === 0 ? '<div class="primary-badge">Chính</div>' : ''}
                                <button type="button" class="delete-image-btn" onclick="deleteCurrentImage(this)" title="Xóa ảnh">
                                    <i class="ri-delete-bin-line"></i>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }

        // Get Modal Styles
        function getModalStyles() {
            return `
                <style>
                    .enhanced-modal-content {
                        max-height: 70vh;
                        overflow-y: auto;
                        padding-right: 8px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar {
                        width: 6px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar-track {
                        background: rgba(0, 0, 0, 0.05);
                        border-radius: 3px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar-thumb {
                        background: rgba(99, 102, 241, 0.3);
                        border-radius: 3px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar-thumb:hover {
                        background: rgba(99, 102, 241, 0.5);
                    }

                    .modal-header {
                                display: ruby-text;
                        align-items: center;
                        gap: 12px;
                        margin-bottom: 8px;
                    }

               

                    .modal-icon.edit {
                        background: linear-gradient(135deg, #10b981, #059669);
                    }

                    .modal-title-text {
                        font-size: 1.5rem;
                        font-weight: 700;
                        color: #1f2937;
                    }

                    .stadium-form {
                        display: flex;
                        flex-direction: column;
                        gap: 32px;
                    }

                    .form-section {
                        background: rgba(248, 250, 252, 0.5);
                        border: 1px solid rgba(226, 232, 240, 0.8);
                        border-radius: 16px;
                        padding: 24px;
                        transition: all 0.3s ease;
                    }

                    .form-section:hover {
                        background: rgba(248, 250, 252, 0.8);
                        border-color: rgba(147, 197, 253, 0.5);
                        transform: translateY(-2px);
                        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.04);
                    }

                    .section-header {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        margin-bottom: 20px;
                        padding-bottom: 12px;
                        border-bottom: 1px solid rgba(226, 232, 240, 0.6);
                    }

                    .section-header i {
                        font-size: 20px;
                        color: #3b82f6;
                    }

                    .section-header h3 {
                        font-size: 1.125rem;
                        font-weight: 600;
                        color: #1f2937;
                        margin: 0;
                    }

                    .form-grid {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 20px;
                    }

                    .form-group {
                        display: flex;
                        flex-direction: column;
                        gap: 8px;
                    }

                    .form-group.full-width {
                        grid-column: 1 / -1;
                    }

                    .form-label {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                        font-weight: 600;
                        color: #374151;
                        font-size: 0.875rem;
                    }

                    .form-label.required::after {
                        content: '*';
                        color: #ef4444;
                        font-weight: 700;
                    }

                    .form-label i {
                        font-size: 16px;
                        color: #6b7280;
                    }

                    .form-input, .form-textarea {
                        padding: 12px 16px;
                        border: 2px solid rgba(209, 213, 219, 0.6);
                        border-radius: 12px;
                        background: white;
                        color: #1f2937;
                        font-size: 0.875rem;
                        font-weight: 500;
                        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.02);
                    }

                    .form-input::placeholder, .form-textarea::placeholder {
                        color: #9ca3af;
                    }

                    .form-input:focus, .form-textarea:focus {
                        outline: none;
                        border-color: #3b82f6;
                        background: #ffffff;
                        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1), 0 4px 6px rgba(0, 0, 0, 0.05);
                        transform: translateY(-1px);
                    }

                    .time-input-group {
                        display: grid;
                        grid-template-columns: 1fr auto 1fr;
                        gap: 20px;
                        align-items: end;
                    }

                    .time-separator {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        height: 44px;
                        color: #6b7280;
                        font-size: 18px;
                        margin-bottom: 24px;
                    }

                    .time-input {
                        font-family: 'SF Mono', 'Monaco', 'Consolas', monospace;
                        font-size: 1rem;
                        text-align: center;
                    }

                    .time-preview {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                        background: rgba(59, 130, 246, 0.08);
                        border: 1px solid rgba(59, 130, 246, 0.2);
                        border-radius: 12px;
                        padding: 12px 16px;
                        color: #1e40af;
                        font-size: 0.875rem;
                        margin-top: 16px;
                    }

                    .input-helper {
                        font-size: 0.75rem;
                        color: #6b7280;
                        margin-top: 4px;
                    }

                    .location-helper, .image-helper {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                        background: rgba(16, 185, 129, 0.08);
                        border: 1px solid rgba(16, 185, 129, 0.2);
                        border-radius: 12px;
                        padding: 12px 16px;
                        color: #065f46;
                        font-size: 0.875rem;
                        margin-top: 16px;
                    }

                    .status-section {
                        background: rgba(245, 158, 11, 0.08);
                        border-color: rgba(245, 158, 11, 0.2);
                    }

                    .approval-status {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        background: white;
                        border: 2px solid rgba(209, 213, 219, 0.6);
                        border-radius: 12px;
                        padding: 16px;
                        transition: all 0.3s ease;
                    }

                    .approval-status:hover {
                        border-color: #3b82f6;
                        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                    }

                    .status-icon {
                        width: 40px;
                        height: 40px;
                        border-radius: 10px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 18px;
                    }

                    .status-approved {
                        background: linear-gradient(135deg, #10b981, #059669);
                        color: white;
                    }

                    .status-pending {
                        background: linear-gradient(135deg, #f59e0b, #d97706);
                        color: white;
                    }

                    .status-info h4 {
                        margin: 0 0 4px 0;
                        font-size: 1rem;
                        font-weight: 600;
                        color: #1f2937;
                    }

                    .status-info p {
                        margin: 0;
                        font-size: 0.875rem;
                        color: #6b7280;
                    }

                    .image-upload-area {
                        display: flex;
                        flex-direction: column;
                        gap: 16px;
                    }

                    .upload-zone {
                        border: 2px dashed rgba(147, 197, 253, 0.6);
                        border-radius: 16px;
                        padding: 32px;
                        text-align: center;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        background: rgba(239, 246, 255, 0.5);
                    }

                    .upload-zone:hover {
                        border-color: #3b82f6;
                        background: rgba(239, 246, 255, 0.8);
                        transform: translateY(-2px);
                    }

                    .upload-content {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        gap: 16px;
                    }

                    .upload-icon {
                        width: 64px;
                        height: 64px;
                        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                        border-radius: 16px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        color: white;
                        font-size: 32px;
                    }

                    .upload-text strong {
                        color: #1f2937;
                        font-size: 1rem;
                        font-weight: 600;
                    }

                    .upload-text p {
                        color: #6b7280;
                        font-size: 0.875rem;
                        margin: 4px 0 0 0;
                    }

                    .image-preview-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
                        gap: 12px;
                    }

                    .current-images-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
                        gap: 16px;
                        margin-bottom: 16px;
                    }

                    .image-item {
                        position: relative;
                        aspect-ratio: 16/9;
                        border-radius: 12px;
                        overflow: hidden;
                        background: #f8fafc;
                        border: 2px solid rgba(226, 232, 240, 0.8);
                        transition: all 0.3s ease;
                    }

                    .image-item:hover {
                        transform: scale(1.05);
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
                    }

                    .image-item img {
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                    }

                    .primary-badge {
                        position: absolute;
                        top: 6px;
                        left: 6px;
                        background: linear-gradient(135deg, #10b981, #059669);
                        color: white;
                        padding: 4px 8px;
                        border-radius: 6px;
                        font-size: 10px;
                        font-weight: 600;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }

                    .delete-image-btn {
                        position: absolute;
                        top: 6px;
                        right: 6px;
                        width: 24px;
                        height: 24px;
                        background: rgba(239, 68, 68, 0.9);
                        color: white;
                        border: none;
                        border-radius: 50%;
                        cursor: pointer;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 12px;
                        transition: all 0.2s ease;
                    }

                    .delete-image-btn:hover {
                        background: #dc2626;
                        transform: scale(1.1);
                    }

                    .deleted-image {
                        opacity: 0.5;
                        filter: grayscale(1);
                        position: relative;
                    }

                    .deleted-image::after {
                        content: 'Đã xóa';
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background: rgba(239, 68, 68, 0.9);
                        color: white;
                        padding: 4px 8px;
                        border-radius: 4px;
                        font-size: 12px;
                        font-weight: 600;
                    }

                    .hidden {
                        display: none;
                    }

                    @@media (max-width: 768px) {
                        .form-grid {
                            grid-template-columns: 1fr;
                        }

                        .time-input-group {
                            grid-template-columns: 1fr;
                            gap: 16px;
                        }

                        .time-separator {
                            display: none;
                        }

                        .current-images-grid, .image-preview-grid {
                            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
                        }
                    }
                </style>
            `;
        }


        // Unlock stadium
                             function confirmUnlock(stadiumId) {
            Swal.fire({
                title: `
                    <div class="modal-header">
                        <div class="modal-icon" style="background: linear-gradient(135deg, #10b981, #059669);">
                            <i class="ri-lock-unlock-line"></i>
                        </div>
                        <div class="modal-title-text">Xác nhận Mở khóa sân</div>
                    </div>
                `,
                html: `
                    <div style="text-align: center; padding: 20px 0;">
                        <div style="width: 100px; height: 100px; background: rgba(16, 185, 129, 0.1);
                                    border: 3px solid rgba(16, 185, 129, 0.3); border-radius: 50%;
                                    margin: 0 auto 24px; display: flex; align-items: center; justify-content: center;">
                            <i class="ri-check-line" style="font-size: 48px; color: #10b981;"></i>
                        </div>
                        <h3 style="margin: 0 0 16px 0; color: #1f2937; font-size: 1.25rem; font-weight: 600;">
                            Bạn có chắc chắn muốn mở khóa sân này không?
                        </h3>
                        <p style="margin: 0; color: #6b7280; font-size: 0.875rem; line-height: 1.6;">
                            Sân này sẽ được kích hoạt trở lại<br>
                            và có thể sử dụng bình thường.
                        </p>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: '<i class="ri-lock-unlock-line mr-1"></i>Mở khóa sân',
                cancelButtonText: '<i class="ri-close-line mr-1"></i>Hủy bỏ',
                width: '500px',
                customClass: {
                    confirmButton: 'enhanced-confirm-btn success',
                    cancelButton: 'enhanced-cancel-btn',
                    popup: 'enhanced-popup'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                            deleteStadium(stadiumId); // Gọi function unlock thay vì delete
                }
            });
        }

        // Function for locking stadium
        function confirmLock(stadiumId) {
            Swal.fire({
                title: `
                    <div class="modal-header">
                        <div class="modal-icon" style="background: linear-gradient(135deg, #ef4444, #dc2626);">
                            <i class="ri-lock-line"></i>
                        </div>
                        <div class="modal-title-text">Xác nhận Khóa sân</div>
                    </div>
                `,
                html: `
                    <div style="text-align: center; padding: 20px 0;">
                        <div style="width: 100px; height: 100px; background: rgba(239, 68, 68, 0.1);
                                    border: 3px solid rgba(239, 68, 68, 0.3); border-radius: 50%;
                                    margin: 0 auto 24px; display: flex; align-items: center; justify-content: center;">
                            <i class="ri-alert-line" style="font-size: 48px; color: #ef4444;"></i>
                        </div>
                        <h3 style="margin: 0 0 16px 0; color: #1f2937; font-size: 1.25rem; font-weight: 600;">
                            Bạn có chắc chắn muốn khóa sân này không?
                        </h3>
                        <p style="margin: 0; color: #6b7280; font-size: 0.875rem; line-height: 1.6;">
                            Tất cả dữ liệu liên quan<br>
                            đến sân này sẽ bị khóa đến khi nào mở lại.
                        </p>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: '<i class="ri-lock-line mr-1"></i>Khóa sân',
                cancelButtonText: '<i class="ri-close-line mr-1"></i>Hủy bỏ',
                width: '500px',
                customClass: {
                    confirmButton: 'enhanced-confirm-btn danger',
                    cancelButton: 'enhanced-cancel-btn',
                    popup: 'enhanced-popup'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteStadium(stadiumId); // Gọi function lock thay vì delete
                }
            });
        }

      

        function saveStadiumChanges(formData) {
            Swal.fire({
                title: 'Đang cập nhật...',
                html: `
                    <div class="loading-content">
                        <div class="loading-spinner-custom"></div>
                        <p style="margin-top: 16px; color: #6b7280;">Đang lưu thay đổi...</p>
                    </div>
                `,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            $.ajax({
                url: CONFIG.API_ENDPOINTS.EDIT,
                type: 'POST',
                processData: false,
                contentType: false,
                        data: formData,
                success: function(response) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Cập nhật thành công!',
                        html: `
                            <div style="text-align: center; padding: 20px 0;">
                                <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #10b981, #059669);
                                            border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;">
                                    <i class="ri-check-line" style="font-size: 40px; color: white;"></i>
                                </div>
                                <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 1.25rem; font-weight: 600;">
                                    Thông tin sân đã được cập nhật
                                </h3>
                                <p style="margin: 0; color: #6b7280; font-size: 0.875rem;">
                                    Tất cả thay đổi đã được lưu thành công
                                </p>
                            </div>
                        `,
                        confirmButtonText: 'Tuyệt vời!',
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        loadData();
                    });
                },
                error: function(xhr, status, error) {
                    console.error('Error updating stadium:', error);
                    let errorMessage = 'Không thể cập nhật thông tin sân. Vui lòng thử lại!';

                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }

                    Swal.fire({
                        icon: 'error',
                        title: 'Có lỗi xảy ra',
                        text: errorMessage,
                        confirmButtonColor: '#dc2626'
                    });
                }
            });
        }

        // Utility Functions
function updateDateTime() {
    const now = new Date();

    // Lấy giờ Việt Nam (Asia/Ho_Chi_Minh)
    const formattedDate = now.toLocaleString("en-GB", {
        timeZone: "Asia/Ho_Chi_Minh",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit"
    });

    $('#current-time').text(formattedDate);
}


        function showLoading() {
            $('#loading-container').show();
            $('#stadium-grid').addClass('opacity-50');
        }

        function hideLoading() {
            $('#loading-container').hide();
            $('#stadium-grid').removeClass('opacity-50');
        }

        function showEmptyState() {
            $('#empty-state').show().addClass('animate-fade-in');
        }

        function changePage(newPage) {
            const maxPages = Math.ceil(state.totalItems / CONFIG.PAGINATION.ITEMS_PER_PAGE);
            if (newPage < 1 || newPage > maxPages) return;

            state.currentPage = newPage;
            loadData();
        }

        function getStatusText(status) {
            return status ? 'Đã được chấp thuận' : 'Chưa được chấp thuận';
        }

        function getSportTypes(courts) {
            if (!courts || courts.length === 0) return 'Chưa có sân';
            return [...new Set(courts.map(c => c.SportType))].join(', ');
        }

        function formatPrice(courts) {
            if (!courts || courts.length === 0) return '0 ₫';
            const minPrice = Math.min(...courts.map(c => c.PricePerHour));
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(minPrice);
        }

        function getUrlImage(stadiumImages) {
            if (!stadiumImages || stadiumImages.length === 0) {
                return '/api/placeholder/400/220';
            }

            const firstImage = stadiumImages[0];
            let imageUrl = firstImage?.ImageUrl;

            if (!imageUrl) return '/api/placeholder/400/220';

            // Handle relative URLs
            if (imageUrl.startsWith('/') || imageUrl.startsWith('uploads/')) {
                return `https://localhost:7280/${imageUrl.startsWith('/') ? imageUrl.substring(1) : imageUrl}`;
            }

            // Handle full URLs
            if (imageUrl.startsWith('http')) {
                return imageUrl;
            }

            return `https://localhost:7280/${imageUrl}`;
        }

        function buildFilterQuery() {
            let filters = [];

            if (state.filters.search) {
                filters.push(`(contains(tolower(Name),'${state.filters.search.toLowerCase()}') or contains(tolower(Address),'${state.filters.search.toLowerCase()}'))`);
            }

            if (state.filters.status !== 'all') {
                const statusValue = state.filters.status === 'true';
                filters.push(`IsApproved eq ${statusValue}`);
            }

            if (state.filters.sportType !== 'all') {
                filters.push(`Courts/any(c: c/SportType eq '${state.filters.sportType}')`);
            }

            let query = '';
            if (filters.length > 0) {
                query = " and " + filters.join(" and ");
            }

            console.log('Built filter query:', query);
            return query;
        }

        function updatePagination(totalItems) {
            state.totalItems = totalItems || 0;
            const totalPages = Math.ceil(state.totalItems / CONFIG.PAGINATION.ITEMS_PER_PAGE);

            const start = (state.currentPage - 1) * CONFIG.PAGINATION.ITEMS_PER_PAGE + 1;
            const end = Math.min(start + CONFIG.PAGINATION.ITEMS_PER_PAGE - 1, state.totalItems);

            $('#showing-range').text(`${start}-${end}`);
            $('#total-count').text(state.totalItems);

            if (state.totalItems === 0) {
                $('.pagination-section').hide();
                return;
            } else {
                $('.pagination-section').show();
            }

            let paginationHtml = '';

            // Previous button
            paginationHtml += `
                <button class="pagination-btn ${state.currentPage === 1 ? 'disabled' : ''}"
                        onclick="changePage(${state.currentPage - 1})"
                        ${state.currentPage === 1 ? 'disabled' : ''}>
                    <i class="ri-arrow-left-s-line"></i>
                </button>
            `;

            // Calculate page range
            let startPage = Math.max(1, state.currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);

            // Adjust start if we're near the end
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            // First page and ellipsis
            if (startPage > 1) {
                paginationHtml += `<button class="pagination-btn" onclick="changePage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHtml += `<span class="pagination-ellipsis">...</span>`;
                }
            }

            // Page numbers
            for (let i = startPage; i <= endPage; i++) {
                paginationHtml += `
                    <button class="pagination-btn ${i === state.currentPage ? 'active' : ''}"
                            onclick="changePage(${i})">
                        ${i}
                    </button>
                `;
            }

            // Last page and ellipsis
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHtml += `<span class="pagination-ellipsis">...</span>`;
                }
                paginationHtml += `<button class="pagination-btn" onclick="changePage(${totalPages})">${totalPages}</button>`;
            }

            // Next button
            paginationHtml += `
                <button class="pagination-btn ${state.currentPage === totalPages ? 'disabled' : ''}"
                        onclick="changePage(${state.currentPage + 1})"
                        ${state.currentPage === totalPages ? 'disabled' : ''}>
                    <i class="ri-arrow-right-s-line"></i>
                </button>
            `;

            $('#pagination-container').html(paginationHtml);
        }

        // Export functionality (optional)
        function exportReport() {
            Swal.fire({
                title: 'Đang xuất báo cáo...',
                html: `
                    <div class="loading-content">
                        <div class="loading-spinner-custom"></div>
                        <p style="margin-top: 16px; color: #6b7280;">Đang tạo file báo cáo...</p>
                    </div>
                `,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            $.ajax({
                url: CONFIG.API_ENDPOINTS.EXPORT,
                type: 'GET',
                xhrFields: {
                    responseType: 'blob'
                },
                success: function(data) {
                    const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `Stadium_Report_${new Date().toISOString().split('T')[0]}.xlsx`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);

                    Swal.fire({
                        icon: 'success',
                        title: 'Xuất báo cáo thành công!',
                        text: 'File đã được tải xuống thiết bị của bạn',
                        confirmButtonColor: '#10b981'
                    });
                },
                error: function(xhr, status, error) {
                    console.error('Error exporting report:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi xuất báo cáo',
                        text: 'Không thể xuất báo cáo. Vui lòng thử lại!',
                        confirmButtonColor: '#dc2626'
                    });
                }
            });
        }

        // Add custom styles for enhanced SweetAlert2 buttons
        const customStyles = `
        <style>
            .enhanced-confirm-btn, .enhanced-cancel-btn {
                border-radius: 12px !important;
                font-weight: 600 !important;
                padding: 12px 24px !important;
                font-size: 14px !important;
                display: inline-flex !important;
                align-items: center !important;
                gap: 8px !important;
                transition: all 0.3s ease !important;
                border: none !important;
            }

            .enhanced-confirm-btn:hover, .enhanced-cancel-btn:hover {
                transform: translateY(-2px) !important;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
            }

            .enhanced-confirm-btn.danger {
                background: linear-gradient(135deg, #ef4444, #dc2626) !important;
            }

            .enhanced-popup {
                border-radius: 20px !important;
                box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
            }

            .loading-content {
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 20px;
            }

            @@keyframes spin {
                to { transform: rotate(360deg); }
            }

            .pagination-ellipsis {
                display: flex;
                align-items: center;
                justify-content: center;
                height: 48px;
                padding: 0 12px;
                color: var(--text-muted);
                font-weight: 600;
            }
        </style>
        `;

        // Inject custom styles
        $('head').append(customStyles);

        // Additional utility function for debugging
        function logState() {
            console.log('Current State:', state);
        }

        // Initialize tooltips if using Bootstrap
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });

        // Window resize handler for responsive adjustments
        $(window).on('resize', function() {
            // Adjust pagination if needed
            if (state.totalItems > 0) {
                updatePagination(state.totalItems);
            }
        });



        // Enhanced Edit Modal
        function openEditModal(stadiumId) {
            let search = `&$filter=Id eq ${stadiumId} and `;

            $.ajax({
                url: CONFIG.API_ENDPOINTS.SEARCH,
                type: 'POST',
                data: { url: search },
                success: function (response) {
                    const stadium = response.value[0];
                    if (!stadium) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi',
                            text: 'Không tìm thấy thông tin sân!',
                            confirmButtonColor: '#dc2626'
                        });
                        return;
                    }
                    Swal.fire({
                        title: `
                            <div class="modal-header">
                                <div class="modal-icon edit">
                                    <i class="ri-edit-line"></i>
                                </div>
                                <div class="modal-title-text">Chỉnh Sửa: ${stadium.Name}</div>
                            </div>
                        `,
                        html: generateEditModalHTML(stadium),
                        showCancelButton: true,
                        confirmButtonText: '<i class="ri-save-line mr-1"></i>Lưu Thay Đổi',
                        cancelButtonText: '<i class="ri-close-line mr-1"></i>Hủy Bỏ',
                        confirmButtonColor: '#10b981',
                        cancelButtonColor: '#6b7280',
                        width: '900px',
                        customClass: {
                            confirmButton: 'enhanced-confirm-btn',
                            cancelButton: 'enhanced-cancel-btn',
                            popup: 'enhanced-popup'
                        },
                        didOpen: () => {
                            // Add time preview functionality
                            const openTimeInput = document.getElementById('editOpenTime');
                            const closeTimeInput = document.getElementById('editCloseTime');
                            const timePreview = document.getElementById('editTimePreview');

                            function updateEditTimePreview() {
                                const openTime = openTimeInput.value || '06:00';
                                const closeTime = closeTimeInput.value || '22:00';
                                timePreview.textContent = `${openTime} - ${closeTime}`;
                            }

                            openTimeInput.addEventListener('change', updateEditTimePreview);
                            closeTimeInput.addEventListener('change', updateEditTimePreview);

                            // Update approval status display
                            const statusSelect = document.getElementById('editIsApproved');
                            statusSelect.addEventListener('change', updateApprovalStatusDisplay);
                        },
                        preConfirm: () => {
                            const name = document.getElementById('editName').value.trim();
                            const address = document.getElementById('editAddress').value.trim();
                            const openTime = document.getElementById('editOpenTime').value;
                            const closeTime = document.getElementById('editCloseTime').value;

                            // Enhanced validation
                            if (!name) {
                                Swal.showValidationMessage('<i class="ri-error-warning-line mr-1"></i>Vui lòng nhập tên sân');
                                return false;
                            }
                            if (!address) {
                                Swal.showValidationMessage('<i class="ri-error-warning-line mr-1"></i>Vui lòng nhập địa chỉ');
                                return false;
                            }
                            if (!openTime || !closeTime) {
                                Swal.showValidationMessage('<i class="ri-error-warning-line mr-1"></i>Vui lòng chọn giờ hoạt động');
                                return false;
                            }
                            if (!validateTimeRange(openTime, closeTime)) {
                                Swal.showValidationMessage('<i class="ri-error-warning-line mr-1"></i>Giờ đóng cửa phải sau giờ mở cửa');
                                return false;
                            }

                            const formData = new FormData();
                            formData.append('Stadium.Id', stadiumId);
                            formData.append('Stadium.Name', name);
                            formData.append('Stadium.NameUnsigned', address);
                            formData.append('Stadium.Address', address);
                            formData.append('Stadium.AddressUnsigned', address);
                            formData.append('Stadium.Description', document.getElementById('editDescription').value || '');
                            formData.append('Stadium.OpenTime', openTime);
                            formData.append('Stadium.CloseTime', closeTime);
                            formData.append('Stadium.IsApproved', document.getElementById('editIsApproved').value);

                            const latitude = document.getElementById('editLatitude').value;
                            const longitude = document.getElementById('editLongitude').value;
                            if (latitude) formData.append('Stadium.Latitude', latitude);
                            if (longitude) formData.append('Stadium.Longitude', longitude);

                            // Add new images

                            appendToFormData(formData);

                            // Add deleted image IDs
                            const deletedImages = document.querySelectorAll('.deleted-image');
                            deletedImages.forEach((item, i) => {
                                            const imageId = item.getAttribute('data-image-id');
                                            if (imageId) {
                                                formData.append(`DeletedImageIds[${i}]`, imageId);
                                            }
                                        });

                            // Add new videos
                            appendVideosToFormData(formData);

                            // Add deleted video IDs
                                        const deletedVideos = document.querySelectorAll('.deleted-video');
            deletedVideos.forEach((item, i) => {
                const videoId = item.getAttribute('data-video-id');
                if (videoId && videoId !== 'undefined') {
                                    formData.append(`DeletedVideoIds[${i}]`, videoId);
                                    console.log('Deleted video ID added to FormData:', videoId);
                }
            });

            console.log('FormData prepared for submission:');
            for (let pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }

                                    console.log('FormData prepared for submission:', Array.from(formData.entries()));
                            return formData;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            console.log("🚀 Đang gửi FormData:");
    for (const [key, value] of result.value.entries()) {
        console.log(`   ${key}: ${value}`);
    }
                            saveStadiumChanges(result.value);
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching stadium data:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: 'Không thể tải thông tin sân. Vui lòng thử lại!',
                        confirmButtonColor: '#dc2626'
                    });
                }
            });
        }
                function getVideoCount(videos) {
            if (!videos || videos.length === 0) return 'Không có video';
            return `${videos.length} video`;
        }
                // Complete Enhanced Stadium Management JavaScript - Missing Functions Implementation

        // Enhanced Edit Modal HTML Generator
        function generateEditModalHTML(stadium) {
            return `
                <div class="enhanced-modal-content">
                            <form id="editStadiumForm" class="stadium-form" enctype="multipart/form-data">
                        <!-- Basic Information Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-information-line"></i>
                                <h3>Thông Tin Cơ Bản</h3>
                            </div>

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-building-2-line"></i>
                                        Tên sân
                                    </label>
                                    <input type="text" id="editName" value="${stadium.Name || ''}"
                                           class="form-input" placeholder="Nhập tên sân thể thao">
                                    <div class="input-helper">Tên sân sẽ hiển thị công khai</div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-map-pin-2-line"></i>
                                        Địa chỉ
                                    </label>
                                    <input type="text" id="editAddress" value="${stadium.Address || ''}"
                                           class="form-input" placeholder="Nhập địa chỉ chi tiết">
                                    <div class="input-helper">Địa chỉ đầy đủ giúp khách hàng dễ tìm</div>
                                </div>
                            </div>

                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="ri-file-text-line"></i>
                                    Mô tả sân
                                </label>
                                <textarea id="editDescription" rows="3" class="form-textarea"
                                          placeholder="Mô tả về sân, tiện ích, đặc điểm nổi bật...">${stadium.Description || ''}</textarea>
                                <div class="input-helper">Mô tả chi tiết giúp thu hút khách hàng</div>
                            </div>
                        </div>

                        <!-- Operating Hours Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-time-line"></i>
                                <h3>Giờ Hoạt Động</h3>
                            </div>

                            <div class="time-input-group">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-sun-line"></i>
                                        Giờ mở cửa
                                    </label>
                                    <input type="time" id="editOpenTime"
                                           value="${formatTimeForInput(stadium.OpenTime)}"
                                           class="form-input time-input" min="05:00" max="23:59">
                                    <div class="input-helper">Thời gian bắt đầu hoạt động</div>
                                </div>

                                <div class="time-separator">
                                    <i class="ri-arrow-right-line"></i>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-moon-line"></i>
                                        Giờ đóng cửa
                                    </label>
                                    <input type="time" id="editCloseTime"
                                           value="${formatTimeForInput(stadium.CloseTime)}"
                                           class="form-input time-input" min="06:00" max="23:59">
                                    <div class="input-helper">Thời gian kết thúc hoạt động</div>
                                </div>
                            </div>

                            <div class="time-preview">
                                <i class="ri-calendar-line"></i>
                                <span>Sân sẽ hoạt động từ <strong id="editTimePreview">${formatTimeForDisplay(stadium.OpenTime)} - ${formatTimeForDisplay(stadium.CloseTime)}</strong> hàng ngày</span>
                            </div>
                        </div>

                        <!-- Status Section -->
                        <div class="form-section status-section">
                            <div class="section-header">
                                <i class="ri-shield-check-line"></i>
                                <h3>Trạng Thái Duyệt</h3>
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="ri-checkbox-circle-line"></i>
                                    Trạng thái phê duyệt
                                </label>
                                <input type="hidden" id="editIsApproved" name="IsActive" value="${stadium.IsApproved}">
                                <div class="input-helper">Chỉ sân đã được duyệt mới hiển thị công khai</div>
                            </div>

                            <div class="approval-status">
                                <div class="status-icon ${stadium.IsApproved ? 'status-approved' : 'status-pending'}">
                                    <i class="ri-${stadium.IsApproved ? 'checkbox-circle' : 'time'}-line"></i>
                                </div>
                                <div class="status-info">
                                    <h4>${stadium.IsApproved ? 'Sân đã được phê duyệt' : 'Sân đang chờ phê duyệt'}</h4>
                                    <p>${stadium.IsApproved ? 'Sân này đã được phê duyệt và hiển thị công khai' : 'Sân này đang chờ được phê duyệt để hiển thị công khai'}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Location Section -->
                              
                <div class="form-section">
                                    <div class="section-header">
                                        <i class="ri-map-line"></i>
                                        <h3>Vị Trí Sân</h3>
                                    </div>

                                    <!-- Map Container -->
                                    <div class="map-container">
                                        <div id="locationMap" class="location-map"></div>
                                        <div class="map-controls">
                                            <button type="button" id="detectLocationBtn" class="btn-detect-location">
                                                <i class="ri-crosshair-line"></i>
                                                Xác định vị trí hiện tại
                                            </button>
                                            <button type="button" id="searchLocationBtn" class="btn-search-location">
                                                <i class="ri-search-line"></i>
                                                Tìm kiếm địa điểm
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Coordinates Display -->
                                    <div class="form-grid">
                                        <div class="form-group">
                                            <label class="form-label">
                                                <i class="ri-compass-line"></i>
                                                Vĩ độ (Latitude)
                                            </label>
                                            <input type="number" step="any" id="newLatitude" class="form-input" readonly
                                                   placeholder="Sẽ tự động điền khi chọn trên bản đồ">
                                            <div class="input-helper">Tọa độ vĩ độ GPS</div>
                                        </div>

                                        <div class="form-group">
                                            <label class="form-label">
                                                <i class="ri-navigation-line"></i>
                                                Kinh độ (Longitude)
                                            </label>
                                            <input type="number" step="any" id="newLongitude" class="form-input" readonly
                                                   placeholder="Sẽ tự động điền khi chọn trên bản đồ">
                                            <div class="input-helper">Tọa độ kinh độ GPS</div>
                                        </div>
                                    </div>

                                    <div class="location-helper">
                                        <i class="ri-information-line"></i>
                                        <span>Nhấp vào bản đồ để chọn vị trí chính xác của sân</span>
                                    </div>
                                </div>

                        <!-- Images Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-image-line"></i>
                                <h3>Hình Ảnh Sân</h3>
                            </div>

                            <div class="image-upload-area">
                                ${renderCurrentImagesForEdit(stadium.StadiumImages)}

                                <div class="upload-zone" onclick="document.getElementById('editImageUpload').click()">
                                    <div class="upload-content">
                                        <div class="upload-icon">
                                            <i class="ri-upload-cloud-2-line"></i>
                                        </div>
                                        <div class="upload-text">
                                            <strong>Thêm hình ảnh mới</strong>
                                            <p>PNG, JPG, JPEG tối đa 10MB mỗi file</p>
                                        </div>
                                    </div>
                                    <input type="file" id="editImageUpload" class="hidden"
                                           multiple accept="image/*" onchange="handleEditImageUpload(event)">
                                </div>

                                <div id="editImagePreview" class="image-preview-grid hidden"></div>
                            </div>

                            <div class="image-helper">
                                <i class="ri-lightbulb-line"></i>
                                <span>Hình ảnh đầu tiên sẽ được làm ảnh đại diện chính</span>
                            </div>
                        </div>
                                
        <!-- Videos Section -->
        <div class="form-section">
            <div class="section-header">
                <i class="ri-video-line"></i>
                <h3>Video Giới Thiệu Sân</h3>
            </div>

            <div class="video-upload-area">
                ${renderCurrentVideosForEdit(stadium.StadiumVideos)}

                <div class="upload-zone" onclick="document.getElementById('editVideoUpload').click()">
                    <div class="upload-content">
                        <div class="upload-icon">
                            <i class="ri-video-upload-line"></i>
                        </div>
                        <div class="upload-text">
                            <strong>Thêm video mới</strong>
                            <p>MP4, AVI, MOV tối đa 30MB mỗi file</p>
                        </div>
                    </div>
                    <input type="file" id="editVideoUpload" class="hidden"
                           multiple accept="video/*" onchange="handleEditVideoUpload(event)">
                </div>

                <div id="editVideoPreview" class="video-preview-grid hidden"></div>
            </div>

            <div class="video-helper">
                <i class="ri-lightbulb-line"></i>
                <span>Video giúp khách hàng hiểu rõ hơn về sân của bạn</span>
            </div>
        </div>
                    </form>
                </div>

                ${getModalStyles()}
            `;
            
        }
             
        // Helper function to render current images for edit modal
                function renderCurrentImagesForEdit(images) {
            if (!images || images.length === 0) {
                return `
                    <div class="current-images-section">
                        <h4 style="margin: 0 0 16px 0; color: #6b7280; font-size: 0.875rem;">Hình ảnh hiện tại</h4>
                        <div class="empty-images">
                            <i class="ri-image-line" style="font-size: 2rem; color: #d1d5db;"></i>
                            <p style="margin: 8px 0 0 0; color: #9ca3af; font-size: 0.875rem;">Chưa có hình ảnh</p>
                        </div>
                    </div>
                `;
            }

            return `
                <div class="current-images-section">
                    <h4 style="margin: 0 0 16px 0; color: #374151; font-size: 0.875rem; font-weight: 600;">Hình ảnh hiện tại</h4>
                    <div class="current-images-grid">
                        ${images.map((image, index) => `
                            <div class="image-item" data-image-id="${image.Id || index}">
                                <img src="${getUrlImage([image])}" alt="Stadium image" />
                                ${index === 0 ? '<div class="primary-badge">Chính</div>' : ''}
                                ${index !== 0 ? `
                                    <button type="button" class="delete-image-btn" onclick="deleteCurrentImage(this)" title="Xóa ảnh">
                                        <i class="ri-delete-bin-line"></i>
                                    </button>
                                ` : ''}
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }


        // Complete Create Modal HTML Generator (fixing the incomplete code)
                function generateCreateModalHTML() {
            return `
                <div class="enhanced-modal-content">
                    <form id="newStadiumForm" class="stadium-form" enctype="multipart/form-data">
                        <!-- Basic Information Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-information-line"></i>
                                <h3>Thông Tin Cơ Bản</h3>
                            </div>

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-building-2-line"></i>
                                        Tên sân
                                    </label>
                                    <input type="text" id="newName" class="form-input"
                                           placeholder="Nhập tên sân thể thao">
                                    <div class="input-helper">Tên sân sẽ hiển thị công khai</div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-map-pin-2-line"></i>
                                        Địa chỉ
                                    </label>
                                    <input type="text" id="newAddress" class="form-input"
                                           placeholder="Nhập địa chỉ chi tiết hoặc chọn trên bản đồ">
                                    <div class="input-helper">Địa chỉ đầy đủ giúp khách hàng dễ tìm</div>
                                </div>
                            </div>

                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="ri-file-text-line"></i>
                                    Mô tả sân
                                </label>
                                <textarea id="newDescription" rows="3" class="form-textarea"
                                          placeholder="Mô tả về sân, tiện ích, đặc điểm nổi bật..."></textarea>
                                <div class="input-helper">Mô tả chi tiết giúp thu hút khách hàng</div>
                            </div>
                        </div>

                        <!-- Operating Hours Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-time-line"></i>
                                <h3>Giờ Hoạt Động</h3>
                            </div>

                            <div class="time-input-group">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-sun-line"></i>
                                        Giờ mở cửa
                                    </label>
                                    <input type="time" id="newOpenTime" class="form-input time-input"
                                           value="06:00" min="05:00" max="23:59">
                                    <div class="input-helper">Thời gian bắt đầu hoạt động</div>
                                </div>

                                <div class="time-separator">
                                    <i class="ri-arrow-right-line"></i>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-moon-line"></i>
                                        Giờ đóng cửa
                                    </label>
                                    <input type="time" id="newCloseTime" class="form-input time-input"
                                           value="22:00" min="06:00" max="23:59">
                                    <div class="input-helper">Thời gian kết thúc hoạt động</div>
                                </div>
                            </div>

                            <div class="time-preview">
                                <i class="ri-calendar-line"></i>
                                <span>Sân sẽ hoạt động từ <strong id="timePreview">06:00 - 22:00</strong> hàng ngày</span>
                            </div>
                        </div>

                        <!-- Location Section with Map -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-map-line"></i>
                                <h3>Vị Trí Sân</h3>
                            </div>

                            <!-- Map Container -->
                            <div class="map-container">
                                <div id="locationMap" class="location-map"></div>
                                <div class="map-controls">
                                    <button type="button" id="detectLocationBtn" class="btn-detect-location">
                                        <i class="ri-crosshair-line"></i>
                                        Xác định vị trí hiện tại
                                    </button>
                                    <button type="button" id="searchLocationBtn" class="btn-search-location">
                                        <i class="ri-search-line"></i>
                                        Tìm kiếm địa điểm
                                    </button>
                                </div>
                            </div>

                            <!-- Coordinates Display -->
                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="ri-compass-line"></i>
                                        Vĩ độ (Latitude)
                                    </label>
                                    <input type="number" step="any" id="newLatitude" class="form-input" readonly
                                           placeholder="Sẽ tự động điền khi chọn trên bản đồ">
                                    <div class="input-helper">Tọa độ vĩ độ GPS</div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="ri-navigation-line"></i>
                                        Kinh độ (Longitude)
                                    </label>
                                    <input type="number" step="any" id="newLongitude" class="form-input" readonly
                                           placeholder="Sẽ tự động điền khi chọn trên bản đồ">
                                    <div class="input-helper">Tọa độ kinh độ GPS</div>
                                </div>
                            </div>

                            <div class="location-helper">
                                <i class="ri-information-line"></i>
                                <span>Nhấp vào bản đồ để chọn vị trí chính xác của sân</span>
                            </div>
                        </div>

                        <!-- Images Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-image-line"></i>
                                <h3>Hình Ảnh Sân</h3>
                            </div>

                            <div class="image-upload-area">
                                <div class="upload-zone" onclick="document.getElementById('newImageUpload').click()">
                                    <div class="upload-content">
                                        <div class="upload-icon">
                                            <i class="ri-upload-cloud-2-line"></i>
                                        </div>
                                        <div class="upload-text">
                                            <strong>Chọn hoặc kéo thả hình ảnh</strong>
                                            <p>PNG, JPG, JPEG tối đa 10MB mỗi file</p>
                                        </div>
                                    </div>
                                    <input type="file" id="newImageUpload" class="hidden"
                                           multiple accept="image/*" onchange="handleNewImageUpload(event)">
                                </div>

                                <div id="newImagePreview" class="image-preview-grid hidden"></div>
                            </div>

                            <div class="image-helper">
                                <i class="ri-lightbulb-line"></i>
                                <span>Hình ảnh đầu tiên sẽ được làm ảnh đại diện chính</span>
                            </div>
                        </div>

                        <!-- Videos Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-video-line"></i>
                                <h3>Video Giới Thiệu Sân</h3>
                            </div>

                            <div class="video-upload-area">
                                <div class="upload-zone" onclick="document.getElementById('newVideoUpload').click()">
                                    <div class="upload-content">
                                        <div class="upload-icon">
                                            <i class="ri-video-upload-line"></i>
                                        </div>
                                        <div class="upload-text">
                                            <strong>Chọn hoặc kéo thả video</strong>
                                            <p>MP4, AVI, MOV tối đa 30MB mỗi file</p>
                                        </div>
                                    </div>
                                    <input type="file" id="newVideoUpload" class="hidden"
                                           multiple accept="video/*" onchange="handleNewVideoUpload(event)">
                                </div>

                                <div id="newVideoPreview" class="video-preview-grid hidden"></div>
                            </div>

                            <div class="video-helper">
                                <i class="ri-lightbulb-line"></i>
                                <span>Video giúp khách hàng hiểu rõ hơn về sân của bạn</span>
                            </div>
                        </div>
                    </form>
                </div>
            `;
        }



        // Complete Modal Styles Function
        function getModalStyles() {
            return `
                <style>
                        /* Video Upload Styles */
        .video-upload-area {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .video-preview-grid, .current-videos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 16px;
        }

        .video-item {
            position: relative;
            background: #f8fafc;
            border: 2px solid rgba(226, 232, 240, 0.8);
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

            .video-item:hover {
                transform: scale(1.02);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            }

        .preview-video {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .video-info {
            padding: 12px;
            background: white;
        }

        .video-name {
            display: block;
            font-weight: 600;
            color: #1f2937;
            font-size: 0.875rem;
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .video-size {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .delete-video-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 32px;
            height: 32px;
            background: rgba(239, 68, 68, 0.9);
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            transition: all 0.2s ease;
        }

            .delete-video-btn:hover {
                background: #dc2626;
                transform: scale(1.1);
            }

        .deleted-video {
            opacity: 0.5;
            filter: grayscale(1);
        }

            .deleted-video::after {
                content: 'Đã xóa';
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(239, 68, 68, 0.9);
                color: white;
                padding: 8px 16px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 600;
            }

        .video-helper {
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(16, 185, 129, 0.08);
            border: 1px solid rgba(16, 185, 129, 0.2);
            border-radius: 12px;
            padding: 12px 16px;
            color: #065f46;
            font-size: 0.875rem;
            margin-top: 16px;
        }

        .empty-videos {
            text-align: center;
            padding: 20px;
            border: 2px dashed rgba(226, 232, 240, 0.8);
            border-radius: 12px;
            background: rgba(248, 250, 252, 0.5);
        }

        @@media (max-width: 768px) {
            .video-preview-grid, .current-videos-grid {
                grid-template-columns: 1fr;
            }
        }
                    .enhanced-modal-content {
                        max-height: 70vh;
                        overflow-y: auto;
                        padding-right: 8px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar {
                        width: 6px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar-track {
                        background: rgba(0, 0, 0, 0.05);
                        border-radius: 3px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar-thumb {
                        background: rgba(99, 102, 241, 0.3);
                        border-radius: 3px;
                    }

                    .enhanced-modal-content::-webkit-scrollbar-thumb:hover {
                        background: rgba(99, 102, 241, 0.5);
                    }

                    .modal-header {
                                display: ruby-text;
                        align-items: center;
                        margin-bottom: 8px;
                    }

     

                    .modal-icon.edit {
                        background: linear-gradient(135deg, #10b981, #059669);
                    }

                    .modal-title-text {
                        font-size: 1.5rem;
                        font-weight: 700;
                        color: #1f2937;
                    }

                    .stadium-form {
                        display: flex;
                        flex-direction: column;
                        gap: 32px;
                    }

                    .form-section {
                        background: rgba(248, 250, 252, 0.5);
                        border: 1px solid rgba(226, 232, 240, 0.8);
                        border-radius: 16px;
                        padding: 24px;
                        transition: all 0.3s ease;
                    }

                    .form-section:hover {
                        background: rgba(248, 250, 252, 0.8);
                        border-color: rgba(147, 197, 253, 0.5);
                        transform: translateY(-2px);
                        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.04);
                    }

                    .current-images-section {
                        margin-bottom: 20px;
                    }

                    .empty-images {
                        text-align: center;
                        padding: 20px;
                        border: 2px dashed rgba(226, 232, 240, 0.8);
                        border-radius: 12px;
                        background: rgba(248, 250, 252, 0.5);
                    }

                    .current-images-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
                        gap: 16px;
                        margin-bottom: 16px;
                    }

                    .status-section {
                        background: rgba(245, 158, 11, 0.08);
                        border-color: rgba(245, 158, 11, 0.2);
                    }

                    .approval-status {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        background: white;
                        border: 2px solid rgba(209, 213, 219, 0.6);
                        border-radius: 12px;
                        padding: 16px;
                        transition: all 0.3s ease;
                        margin-top: 16px;
                    }

                    .approval-status:hover {
                        border-color: #3b82f6;
                        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                    }

                    .status-icon {
                        width: 40px;
                        height: 40px;
                        border-radius: 10px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 18px;
                    }

                    .status-approved {
                        background: linear-gradient(135deg, #10b981, #059669);
                        color: white;
                    }

                    .status-pending {
                        background: linear-gradient(135deg, #f59e0b, #d97706);
                        color: white;
                    }

                    .status-info h4 {
                        margin: 0 0 4px 0;
                        font-size: 1rem;
                        font-weight: 600;
                        color: #1f2937;
                    }

                    .status-info p {
                        margin: 0;
                        font-size: 0.875rem;
                        color: #6b7280;
                    }

                    .deleted-image {
                        opacity: 0.5;
                        filter: grayscale(1);
                        position: relative;
                    }

                    .deleted-image::after {
                        content: 'Đã xóa';
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background: rgba(239, 68, 68, 0.9);
                        color: white;
                        padding: 4px 8px;
                        border-radius: 4px;
                        font-size: 12px;
                        font-weight: 600;
                    }

                    @@media (max-width: 768px) {
                        .current-images-grid, .image-preview-grid {
                            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
                        }
                    }
                </style>
            `;
        }

        // Complete the createNewStadium function
        function createNewStadium(formData) {
            Swal.fire({
                title: 'Đang thêm sân...',
                html: `
                    <div class="loading-content">
                        <div class="loading-spinner-custom"></div>
                        <p style="margin-top: 16px; color: #6b7280;">Đang xử lý thông tin sân mới...</p>
                    </div>
                    <style>
                        .loading-spinner-custom {
                            width: 40px;
                            height: 40px;
                            border: 3px solid rgba(59, 130, 246, 0.1);
                            border-radius: 50%;
                            border-top-color: #3b82f6;
                            animation: spin 1s linear infinite;
                        }
                    </style>
                `,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            $.ajax({
                url: CONFIG.API_ENDPOINTS.CREATE,
                type: 'POST',
                processData: false,
                contentType: false,
                data: formData,
                success: function(response) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        html: `
                            <div style="text-align: center; padding: 20px 0;">
                                <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #10b981, #059669);
                                            border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;">
                                    <i class="ri-check-line" style="font-size: 40px; color: white;"></i>
                                </div>
                                <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 1.25rem; font-weight: 600;">
                                    Sân đã được thêm thành công
                                </h3>
                                <p style="margin: 0; color: #6b7280; font-size: 0.875rem;">
                                    Sân ${response.value.name} đã được tạo và đang chờ phê duyệt
                                </p>
                            </div>
                        `,
                        confirmButtonText: 'Tuyệt vời!',
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        loadData();
                    });
                },
                error: function(xhr, status, error) {
                    console.error('Error creating stadium:', error);
                    let errorMessage = 'Không thể thêm sân mới. Vui lòng thử lại!';

                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }

                    Swal.fire({
                        icon: 'error',
                        title: 'Có lỗi xảy ra',
                        text: errorMessage,
                        confirmButtonColor: '#dc2626'
                    });
                }
            });
        }

        // Complete delete stadium function with proper success message
        function deleteStadium(stadiumId) {
            Swal.fire({
                title: 'Đang xóa sân...',
                html: `
                    <div class="loading-content">
                        <div class="loading-spinner-custom" style="border-top-color: #ef4444;"></div>
                        <p style="margin-top: 16px; color: #6b7280;">Đang xóa sân khỏi hệ thống...</p>
                    </div>
                `,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            $.ajax({
                url: `${CONFIG.API_ENDPOINTS.DELETE}/${stadiumId}`,
                type: 'DELETE',
                success: function(response) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Khóa thành công!',
                        html: `
                            <div style="text-align: center; padding: 20px 0;">
                                <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #10b981, #059669);
                                            border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;">
                                    <i class="ri-check-line" style="font-size: 40px; color: white;"></i>
                                </div>
                                <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 1.25rem; font-weight: 600;">
                                    Sân đã được xóa khóa
                                </h3>
                            </div>
                        `,
                        confirmButtonText: 'Đã hiểu',
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        loadData();
                    });
                },
                error: function(xhr, status, error) {
                    console.error('Error deleting stadium:', error);
                    let errorMessage = 'Không thể khóa sân. Vui lòng thử lại!';

                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }

                    Swal.fire({
                        icon: 'error',
                        title: 'Có lỗi xảy ra',
                        text: errorMessage,
                        confirmButtonColor: '#dc2626'
                    });
                }
            });
        }

                // Xử lý upload ảnh mới (merge thêm ảnh thay vì ghi đè)
        function handleNewImageUpload(event) {
            const input = event.target;
            const newFiles = Array.from(input.files);
            const previewContainer = document.getElementById('newImagePreview');
            if (!previewContainer) return;

            // Lấy các file cũ đang có trong input (nếu có)
            const oldFiles = input._files || [];

            // Merge: file cũ + file mới
            const mergedFiles = [...oldFiles, ...newFiles];

            // Cập nhật lại input.files
            const dt = new DataTransfer();
            mergedFiles.forEach(file => dt.items.add(file));
            input.files = dt.files;

            // Lưu tạm trong input để lần sau merge tiếp
            input._files = mergedFiles;

            // Render lại preview
            renderPreview(mergedFiles, previewContainer, input);
        }

        function renderPreview(files, previewContainer, input) {
            previewContainer.innerHTML = '';

            if (!files || files.length === 0) {
                previewContainer.classList.add('hidden');
                return;
            }

            previewContainer.classList.remove('hidden');

            files.forEach((file, index) => {
                if (file.type.startsWith('image/') && file.size <= 10 * 1024 * 1024) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imageDiv = document.createElement('div');
                        imageDiv.className = 'image-item';

                        imageDiv.innerHTML = `
                            <img src="${e.target.result}" alt="Preview" />
                            ${index === 0 ? '<div class="primary-badge">Chính</div>' : ''}
                            <button type="button" class="delete-image-btn" title="Xóa ảnh">
                                <i class="ri-close-line"></i>
                            </button>
                        `;

                        // Gắn sự kiện xóa
                        imageDiv.querySelector('.delete-image-btn').addEventListener('click', () => {
                            removeNewPreviewImage(index, input, previewContainer);
                        });

                        previewContainer.appendChild(imageDiv);
                    };
                    reader.readAsDataURL(file);
                } else if (file.size > 10 * 1024 * 1024) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'File quá lớn',
                        text: `File "${file.name}" vượt quá giới hạn 10MB`,
                        confirmButtonColor: '#f59e0b'
                    });
                }
            });
        }

        function removeNewPreviewImage(indexToRemove, input, previewContainer) {
            const files = input._files || [];
            const updatedFiles = files.filter((_, index) => index !== indexToRemove);

            // Cập nhật lại input.files
            const dt = new DataTransfer();
            updatedFiles.forEach(file => dt.items.add(file));
            input.files = dt.files;
            input._files = updatedFiles;

            // Render lại preview
            renderPreview(updatedFiles, previewContainer, input);
        }


                // Mảng lưu file mới được chọn
                   let selectedFiles = [];

        function handleEditImageUpload(event) {
            const previewContainer = document.getElementById('editImagePreview');

            Array.from(event.target.files).forEach(file => {
                if (file.type.startsWith('image/') && file.size <= 10 * 1024 * 1024) {
                    selectedFiles.push(file);

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imageDiv = document.createElement('div');
                        imageDiv.className = 'image-item relative inline-block m-2';
                        imageDiv.innerHTML = `
                            <img src="${e.target.result}" alt="Preview" class="w-32 h-32 object-cover rounded" />
                            <button type="button" class="delete-image-btn absolute top-1 right-1 bg-red-500 text-white rounded-full p-1"
                                onclick="removeEditPreviewImage(this, ${selectedFiles.length - 1})">
                                <i class="ri-close-line"></i>
                            </button>
                        `;
                        previewContainer.appendChild(imageDiv);
                    };
                    reader.readAsDataURL(file);
                }
            });

            previewContainer.classList.remove('hidden');
            event.target.value = ""; // ở đây reset input không sao vì đã lưu vào selectedFiles
        }

        function removeEditPreviewImage(button, index) {
            selectedFiles.splice(index, 1); // xoá khỏi mảng
            button.closest('.image-item').remove();
        }

        function appendToFormData(formData) {
            selectedFiles.forEach((file, i) => {
                formData.append(`StadiumImage[${i}].ImageUrl`, file);
            });
            selectedFiles = []; // Clear after appending
        }




        //delete image on edit 
        function deleteCurrentImage(button) {
            const imageItem = button.closest('.image-item');
            if (!imageItem) return;

            // Add visual indication that image will be deleted
            imageItem.classList.add('deleted-image');
            button.style.display = 'none';

            // Show confirmation
            const imageId = imageItem.getAttribute('data-image-id');
            console.log(`Image ${imageId} marked for deletion`);
        }

        // Enhanced approval status display function
        function updateApprovalStatusDisplay() {
            const select = document.getElementById('editIsApproved');
            const statusIcon = document.querySelector('.status-icon');
            const statusInfo = document.querySelector('.status-info');

            if (!select || !statusIcon || !statusInfo) return;

            const isApproved = select.value === 'true';

            if (isApproved) {
                statusIcon.className = 'status-icon status-approved';
                statusIcon.innerHTML = '<i class="ri-checkbox-circle-line"></i>';
                statusInfo.innerHTML = `
                    <h4>Sân đã được phê duyệt</h4>
                    <p>Sân này đã được phê duyệt và hiển thị công khai</p>
                `;
            } else {
                statusIcon.className = 'status-icon status-pending';
                statusIcon.innerHTML = '<i class="ri-time-line"></i>';
                statusInfo.innerHTML = `
                    <h4>Sân đang chờ phê duyệt</h4>
                    <p>Sân này đang chờ được phê duyệt để hiển thị công khai</p>
                `;
            }
        }

        // Enhanced time formatting with better error handling
                       function formatTimeForDisplay(time) {
            if (!time) return '--:--';

            try {
                if (typeof time === 'string') {
                    if (time.startsWith('PT')) {
                        const hoursMatch = time.match(/PT(\d+)H/);
                        if (hoursMatch && hoursMatch[1]) {
                            const hours = parseInt(hoursMatch[1]).toString().padStart(2, '0');
                            return `${hours}:00`;
                        }
                    } else if (time.includes(':')) {
                        const parts = time.split(':');
                        if (parts.length >= 2) {
                            const hours = parseInt(parts[0]).toString().padStart(2, '0');
                            const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                            return `${hours}:${minutes}`;
                        }
                    }
                }

                if (time instanceof Date) {
                    const hours = time.getHours().toString().padStart(2, '0');
                    const minutes = time.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                }

                return '--:--';
            } catch (error) {
                console.warn('Error formatting time for display:', error);
                return '--:--';
            }
        }
                        function formatTimeForInput(timeString) {
            if (!timeString) return '';

            try {
                if (typeof timeString === 'string') {
                    // Handle ISO 8601 Duration format (e.g., PT6H)
                    if (timeString.startsWith('PT')) {
                        const match = timeString.match(/PT(\d+)H/);
                        if (match && match[1]) {
                            const hours = match[1].padStart(2, '0');
                            return `${hours}:00`;
                        }
                    }

                    // Handle HH:mm:ss format
                    if (timeString.includes(':')) {
                        const parts = timeString.split(':');
                        if (parts.length >= 2) {
                            const hours = parseInt(parts[0]).toString().padStart(2, '0');
                            const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                            return `${hours}:${minutes}`;
                        }
                    }
                }

                return timeString.toString();
            } catch (error) {
                console.warn('Error formatting time for input:', error);
                return '';
            }
        }

        // Enhanced validation functions
        function validateTimeRange(openTime, closeTime) {
            if (!openTime || !closeTime) return true; // Skip validation if empty

            try {
                const openMinutes = convertTimeToMinutes(openTime);
                const closeMinutes = convertTimeToMinutes(closeTime);

                // Validate that close time is after open time
                return openMinutes < closeMinutes;
            } catch (error) {
                console.warn('Error validating time range:', error);
                return false;
            }
        }

        function convertTimeToMinutes(timeString) {
            if (!timeString) return 0;

            const [hours, minutes] = timeString.split(':').map(num => parseInt(num) || 0);
            return hours * 60 + minutes;
        }

        // Enhanced form validation
        function validateStadiumForm(isEdit = false) {
            const prefix = isEdit ? 'edit' : 'new';
            const errors = [];

            // Basic validation
            const name = document.getElementById(`${prefix}Name`)?.value?.trim();
            const address = document.getElementById(`${prefix}Address`)?.value?.trim();
            const openTime = document.getElementById(`${prefix}OpenTime`)?.value;
            const closeTime = document.getElementById(`${prefix}CloseTime`)?.value;

            if (!name) errors.push('Tên sân không được để trống');
            if (name && name.length < 3) errors.push('Tên sân phải có ít nhất 3 ký tự');
            if (!address) errors.push('Địa chỉ không được để trống');
            if (address && address.length < 10) errors.push('Địa chỉ phải chi tiết hơn (ít nhất 10 ký tự)');
            if (!openTime || !closeTime) errors.push('Vui lòng chọn giờ hoạt động');
            if (openTime && closeTime && !validateTimeRange(openTime, closeTime)) {
                errors.push('Giờ đóng cửa phải sau giờ mở cửa');
            }

            // GPS coordinates validation (optional but if provided should be valid)
            const latitude = document.getElementById(`${prefix}Latitude`)?.value;
            const longitude = document.getElementById(`${prefix}Longitude`)?.value;

            if (latitude && (isNaN(latitude) || latitude < -90 || latitude > 90)) {
                errors.push('Vĩ độ phải là số từ -90 đến 90');
            }
            if (longitude && (isNaN(longitude) || longitude < -180 || longitude > 180)) {
                errors.push('Kinh độ phải là số từ -180 đến 180');
            }

            return {
                isValid: errors.length === 0,
                errors: errors
            };
        }

        // Enhanced search and filter functions
        function performAdvancedSearch() {
            const searchTerm = state.filters.search.toLowerCase();
            const statusFilter = state.filters.status;
            const sportFilter = state.filters.sportType;

            // Reset to first page when searching
            state.currentPage = 1;

            // Build comprehensive filter query
                    let filters = []; // Base filter
                    let count = 0;

            if (searchTerm.length > 0) {
                filters.push(`(contains(tolower(Name),'${searchTerm}') or contains(tolower(Address),'${searchTerm}') or contains(tolower(Description),'${searchTerm}'))`);
                        count++;
            }

            if (statusFilter !== 'all') {
                const statusValue = statusFilter;
                        filters.push(`IsApproved eq ${statusValue}`);
                                count++;
            }

            if (sportFilter !== 'all') {
                filters.push(`Courts/any(c: contains(tolower(c/SportType), '${sportFilter.toLowerCase()}'))`);
                        count++;
            }

            const filterQuery = filters.length > 1 ? ` and ${filters.slice(1).join(' and ')}` : '';
                    let searchQuery = '';
            if(count > 0){
                                     searchQuery = `&$skip=${(state.currentPage - 1) * CONFIG.PAGINATION.ITEMS_PER_PAGE}&$top=${CONFIG.PAGINATION.ITEMS_PER_PAGE}&$filter=${filters[0]}${filterQuery} and`;

            }else{
                                             searchQuery = `&$skip=${(state.currentPage - 1) * CONFIG.PAGINATION.ITEMS_PER_PAGE}&$top=${CONFIG.PAGINATION.ITEMS_PER_PAGE}&$filter=`;
                    }

            console.log('Advanced Search Query:', searchQuery);
            loadDataWithQuery(searchQuery);
        }

        function loadDataWithQuery(query) {
            showLoading();
            $('#empty-state').hide();

            $.ajax({
                url: CONFIG.API_ENDPOINTS.SEARCH,
                type: 'POST',
                data: { url: query },
                success: function (data) {
                    console.log('Data loaded with advanced search:', data.value);
                    updateUI(data);
                    hideLoading();

                    if (!data.value || data.value.length === 0) {
                        showEmptyState();
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading data:', error);
                    hideLoading();
                    showErrorState(error);
                }
            });
        }

                // Global variables for video handling
        let selectedVideos = [];

        // Handle new video upload for create modal
        function handleNewVideoUpload(event) {
            const input = event.target;
            const newFiles = Array.from(input.files);
            const previewContainer = document.getElementById('newVideoPreview');
            if (!previewContainer) return;

            // Get existing files
            const oldFiles = input._videos || [];
            const mergedFiles = [...oldFiles, ...newFiles];

            // Update input files
            const dt = new DataTransfer();
            mergedFiles.forEach(file => dt.items.add(file));
            input.files = dt.files;
            input._videos = mergedFiles;

            // Render preview
            renderVideoPreview(mergedFiles, previewContainer, input, 'new');
        }

        // Handle edit video upload
        function handleEditVideoUpload(event) {
            const previewContainer = document.getElementById('editVideoPreview');

            Array.from(event.target.files).forEach(file => {
                if (file.type.startsWith('video/') && file.size <= 30 * 1024 * 1024) {
                    selectedVideos.push(file);

                    const videoDiv = document.createElement('div');
                    videoDiv.className = 'video-item';
                    videoDiv.innerHTML = `
                        <video controls class="preview-video">
                            <source src="${URL.createObjectURL(file)}" type="${file.type}">
                            Your browser does not support the video tag.
                        </video>
                        <div class="video-info">
                            <span class="video-name">${file.name}</span>
                            <span class="video-size">${formatFileSize(file.size)}</span>
                        </div>
                        <button type="button" class="delete-video-btn" onclick="removeEditVideoPreview(this, ${selectedVideos.length - 1})">
                            <i class="ri-delete-bin-line"></i>
                        </button>
                    `;
                    previewContainer.appendChild(videoDiv);
                } else if (file.size > 30 * 1024 * 1024) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'File quá lớn',
                        text: `Video "${file.name}" vượt quá giới hạn 30MB`,
                        confirmButtonColor: '#f59e0b'
                    });
                }
            });

            previewContainer.classList.remove('hidden');
            event.target.value = "";
        }

        // Render video preview
        function renderVideoPreview(files, previewContainer, input, type) {
            previewContainer.innerHTML = '';

            if (!files || files.length === 0) {
                previewContainer.classList.add('hidden');
                return;
            }

            previewContainer.classList.remove('hidden');

            files.forEach((file, index) => {
                if (file.type.startsWith('video/') && file.size <= 30 * 1024 * 1024) {
                    const videoDiv = document.createElement('div');
                    videoDiv.className = 'video-item';

                    videoDiv.innerHTML = `
                        <video controls class="preview-video">
                            <source src="${URL.createObjectURL(file)}" type="${file.type}">
                            Your browser does not support the video tag.
                        </video>
                        <div class="video-info">
                            <span class="video-name">${file.name}</span>
                            <span class="video-size">${formatFileSize(file.size)}</span>
                        </div>
                        <button type="button" class="delete-video-btn" onclick="removeNewVideoPreview(${index}, '${type}')">
                            <i class="ri-delete-bin-line"></i>
                        </button>
                    `;

                    previewContainer.appendChild(videoDiv);
                } else if (file.size > 30 * 1024 * 1024) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'File quá lớn',
                        text: `Video "${file.name}" vượt quá giới hạn 30MB`,
                        confirmButtonColor: '#f59e0b'
                    });
                }
            });
        }

        // Remove video from new upload preview
        function removeNewVideoPreview(indexToRemove, type) {
            const input = document.getElementById(`${type}VideoUpload`);
            const previewContainer = document.getElementById(`${type}VideoPreview`);

            const files = input._videos || [];
            const updatedFiles = files.filter((_, index) => index !== indexToRemove);

            const dt = new DataTransfer();
            updatedFiles.forEach(file => dt.items.add(file));
            input.files = dt.files;
            input._videos = updatedFiles;

            renderVideoPreview(updatedFiles, previewContainer, input, type);
        }

        // Remove video from edit preview
        function removeEditVideoPreview(button, index) {
            selectedVideos.splice(index, 1);
            button.closest('.video-item').remove();
        }

        // Render current videos for edit modal
                function renderCurrentVideosForEdit(videos) {
            if (!videos || videos.length === 0) {
                return `
                    <div class="current-videos-section">
                        <h4 style="margin: 0 0 16px 0; color: #6b7280; font-size: 0.875rem;">Video hiện tại</h4>
                        <div class="empty-videos">
                            <i class="ri-video-line" style="font-size: 2rem; color: #d1d5db;"></i>
                            <p style="margin: 8px 0 0 0; color: #9ca3af; font-size: 0.875rem;">Chưa có video</p>
                        </div>
                    </div>
                `;
            }

            return `
                <div class="current-videos-section">
                    <h4 style="margin: 0 0 16px 0; color: #374151; font-size: 0.875rem; font-weight: 600;">Video hiện tại</h4>
                    <div class="current-videos-grid">
                        ${videos.map((video, index) => `
                            <div class="video-item" data-video-id="${video.Id || index}">
                                <video controls class="preview-video">
                                            <source src="https://localhost:7280/${video.VideoUrl}" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                                <div class="video-info">
                                    ${video.UploadedAt ? `<span class="video-uploaded-at">${new Date(video.UploadedAt).toLocaleString()}</span>` : ""}
                                </div>
                                <button type="button" class="delete-video-btn" onclick="deleteCurrentVideo(this)" title="Xóa video">
                                    <i class="ri-delete-bin-line"></i>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }

        // Delete current video
        function deleteCurrentVideo(button) {
            const videoItem = button.closest('.video-item');
            if (!videoItem) return;

            videoItem.classList.add('deleted-video');
            button.style.display = 'none';

            const videoId = videoItem.getAttribute('data-video-id');
            console.log(`Video ${videoId} marked for deletion`);
        }

        // Utility function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Get video URL
        function getUrlVideo(video) {
            if (!video || !video.VideoUrl) {
                return '/api/placeholder/video';
            }

            let videoUrl = video.VideoUrl;

            if (videoUrl.startsWith('/') || videoUrl.startsWith('uploads/')) {
                return `https://localhost:7280/${videoUrl.startsWith('/') ? videoUrl.substring(1) : videoUrl}`;
            }

            if (videoUrl.startsWith('http')) {
                return videoUrl;
            }

            return `https://localhost:7280/${videoUrl}`;
        }

        // Append videos to form data
        function appendVideosToFormData(formData) {
            selectedVideos.forEach((file, i) => {
                         formData.append(`StadiumVideo[${i}].VideoUrl`, file);
                        console.log('File in appendVideosToFormData:', file);
            });
            selectedVideos = [];
        }

        // Enhanced error handling
        function showErrorState(error) {
            const errorHtml = `
                <div class="error-state animate-fade-in">
                    <div class="error-icon">
                        <i class="ri-error-warning-line"></i>
                    </div>
                    <h3 class="error-title">Có lỗi xảy ra</h3>
                    <p class="error-description">
                        Không thể tải dữ liệu sân. Vui lòng kiểm tra kết nối và thử lại.
                    </p>
                    <button onclick="loadData()" class="btn btn-primary">
                        <i class="ri-refresh-line"></i>
                        Thử lại
                    </button>
                </div>
            `;

            $('#stadium-grid').html(errorHtml);
        }

        // Enhanced utility functions
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Real-time search with debouncing
        const debouncedSearch = debounce(() => {
            performAdvancedSearch();
        }, 300);

        // Enhanced event listeners with better error handling
        function bindEventListeners() {
            // Search input with debouncing
            $('#search-input').on('input', function () {
                state.filters.search = $(this).val();
                        console.log('Search input changed to:', state.filters.search);
                debouncedSearch();
            });

            // Filter dropdowns
            $('#status-filter').on('change', function () {
                state.filters.status = $(this).val();
                        console.log('Status filter changed to:', state.filters.status);
                state.currentPage = 1;
                performAdvancedSearch();
            });

            $('#sport-type-filter').on('change', function () {
                state.filters.sportType = $(this).val();
                        console.log('Sport type filter changed to:', state.filters.sportType);
                state.currentPage = 1;
                performAdvancedSearch();
            });

            // Keyboard shortcuts
            $(document).on('keydown', function(e) {
                // Ctrl+N for new stadium
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    openCreate();
                }

                // Escape to close modals (if any custom modals are open)
                if (e.key === 'Escape') {
                    // Custom logic for closing modals
                }
            });
        }

        // Enhanced data refresh with smart caching
        let lastRefresh = 0;
        const REFRESH_INTERVAL = 30000; // 30 seconds

        function smartRefresh() {
            const now = Date.now();
            if (now - lastRefresh > REFRESH_INTERVAL) {
                loadData();
                lastRefresh = now;
            }
        }

        // Auto-refresh when tab becomes visible
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                smartRefresh();
            }
        });

        // Enhanced initialization
        function initializeEnhancedApp() {
            // Initialize tooltips
            $('[title]').each(function() {
                $(this).attr('data-toggle', 'tooltip');
            });

            // Initialize advanced features
            bindEventListeners();
            loadInitialData();

            // Set up periodic refresh
            setInterval(smartRefresh, REFRESH_INTERVAL);

            // Initialize progressive web app features if supported
            if ('serviceWorker' in navigator) {
                console.log('Service Worker supported');
            }
        }

        // Export functionality enhancement
        function exportStadiumData(format = 'xlsx') {
            Swal.fire({
                title: 'Chọn định dạng xuất',
                html: `
                    <div style="display: flex; gap: 16px; justify-content: center; margin: 20px 0;">
                        <button onclick="performExport('xlsx')" class="btn btn-primary" style="margin: 0;">
                            <i class="ri-file-excel-2-line"></i>
                            Excel
                        </button>
                        <button onclick="performExport('pdf')" class="btn btn-secondary" style="margin: 0;">
                            <i class="ri-file-pdf-line"></i>
                            PDF
                        </button>
                        <button onclick="performExport('csv')" class="btn btn-success" style="margin: 0;">
                            <i class="ri-file-text-line"></i>
                            CSV
                        </button>
                    </div>
                `,
                showConfirmButton: false,
                showCancelButton: true,
                cancelButtonText: 'Hủy'
            });
        }

        function performExport(format) {
            Swal.fire({
                title: 'Đang xuất dữ liệu...',
                html: `
                    <div class="loading-content">
                        <div class="loading-spinner-custom"></div>
                        <p style="margin-top: 16px; color: #6b7280;">Đang tạo file ${format.toUpperCase()}...</p>
                    </div>
                `,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            // Simulate export (replace with actual export logic)
            setTimeout(() => {
                Swal.fire({
                    icon: 'success',
                    title: 'Xuất thành công!',
                    text: `File ${format.toUpperCase()} đã được tải xuống`,
                    confirmButtonColor: '#10b981'
                });
            }, 2000);
        }

        // Performance monitoring
        function logPerformanceMetrics() {
            if (window.performance && window.performance.timing) {
                const timing = window.performance.timing;
                const loadTime = timing.loadEventEnd - timing.navigationStart;
                console.log(`Page load time: ${loadTime}ms`);
            }
        }

        // Initialize performance monitoring
        window.addEventListener('load', logPerformanceMetrics);

        // Replace the original initialization with enhanced version
        $(document).ready(function () {
            initializeEnhancedApp();
            updateDateTime();
            setInterval(updateDateTime, 1000);
        });

               // Add these functions to your JavaScript file

        let mapPickerInstance = null;
        let selectedMarker = null;

        function openMapPicker() {
            const mapModalHTML = `
                <div class="map-container" id="mapContainer"></div>
                <div class="map-controls">
                    <div class="selected-info">
                        <h4>Vị trí đã chọn:</h4>
                        <p id="selectedCoords">Nhấn vào bản đồ để chọn vị trí</p>
                        <p id="selectedAddress">Địa chỉ sẽ hiển thị ở đây</p>
                    </div>
                    <button type="button" class="use-current-location-btn" onclick="useCurrentLocation()">
                        <i class="ri-gps-line"></i> Vị trí hiện tại
                    </button>
                </div>
            `;

            Swal.fire({
                title: '<i class="ri-map-pin-line"></i> Chọn Vị Trí Sân',
                html: mapModalHTML,
                showCancelButton: true,
                confirmButtonText: '<i class="ri-check-line"></i> Xác Nhận Vị Trí',
                cancelButtonText: '<i class="ri-close-line"></i> Hủy',
                customClass: {
                    popup: 'map-modal'
                },
                didOpen: () => {
                    initializeMap();
                },
                preConfirm: () => {
                    if (!selectedMarker) {
                        Swal.showValidationMessage('Vui lòng chọn một vị trí trên bản đồ');
                        return false;
                    }

                    const latlng = selectedMarker.getLatLng();
                    return {
                        lat: latlng.lat,
                        lng: latlng.lng,
                        address: document.getElementById('selectedAddress').textContent
                    };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const { lat, lng, address } = result.value;

                    // Fill the form fields
                    document.getElementById('newLatitude').value = lat.toFixed(6);
                    document.getElementById('newLongitude').value = lng.toFixed(6);

                    // Update address if it's valid and different from placeholder
                    if (address && address !== 'Địa chỉ sẽ hiển thị ở đây' && address !== 'Đang tìm địa chỉ...') {
                        document.getElementById('newAddress').value = address;
                    }

                    // Show selected location
                    const locationDisplay = document.getElementById('currentLocationDisplay');
                    const locationText = document.getElementById('selectedLocationText');
                    locationText.textContent = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                    locationDisplay.style.display = 'flex';
                }

                // Cleanup map
                if (mapPickerInstance) {
                    mapPickerInstance.remove();
                    mapPickerInstance = null;
                }
            });
        }

        function initializeMap() {
            // Default to Ho Chi Minh City center
            const defaultLat = 10.762622;
            const defaultLng = 106.660172;

            // Get current values if they exist
            const currentLat = document.getElementById('newLatitude').value || defaultLat;
            const currentLng = document.getElementById('newLongitude').value || defaultLng;

            mapPickerInstance = L.map('mapContainer').setView([currentLat, currentLng], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(mapPickerInstance);

            // Add click event to map
            mapPickerInstance.on('click', function(e) {
                const { lat, lng } = e.latlng;

                // Remove existing marker
                if (selectedMarker) {
                    mapPickerInstance.removeLayer(selectedMarker);
                }

                // Add new marker
                selectedMarker = L.marker([lat, lng]).addTo(mapPickerInstance);

                // Update coordinates display
                document.getElementById('selectedCoords').textContent = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;

                // Get address from coordinates
                getAddressFromCoordinates(lat, lng);
            });

            // If there are existing coordinates, add marker
            if (currentLat && currentLng && currentLat != defaultLat && currentLng != defaultLng) {
                selectedMarker = L.marker([currentLat, currentLng]).addTo(mapPickerInstance);
                document.getElementById('selectedCoords').textContent = `${currentLat}, ${currentLng}`;
                getAddressFromCoordinates(currentLat, currentLng);
            }
        }

        function useCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;

                        // Update map view
                        mapPickerInstance.setView([lat, lng], 15);

                        // Remove existing marker
                        if (selectedMarker) {
                            mapPickerInstance.removeLayer(selectedMarker);
                        }

                        // Add new marker
                        selectedMarker = L.marker([lat, lng]).addTo(mapPickerInstance);

                        // Update display
                        document.getElementById('selectedCoords').textContent = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                        getAddressFromCoordinates(lat, lng);
                    },
                    function(error) {
                        Swal.showValidationMessage('Không thể lấy vị trí hiện tại: ' + error.message);
                    }
                );
            } else {
                Swal.showValidationMessage('Trình duyệt không hỗ trợ định vị GPS');
            }
        }

        async function getAddressFromCoordinates(lat, lng) {
            try {
                document.getElementById('selectedAddress').textContent = 'Đang tìm địa chỉ...';

                // Using Nominatim reverse geocoding service
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&language=vi`
                );

                if (response.ok) {
                    const data = await response.json();
                    const address = data.display_name || 'Không tìm thấy địa chỉ';
                    document.getElementById('selectedAddress').textContent = address;
                } else {
                    document.getElementById('selectedAddress').textContent = 'Không thể lấy địa chỉ';
                }
            } catch (error) {
                console.error('Error getting address:', error);
                document.getElementById('selectedAddress').textContent = 'Lỗi khi lấy địa chỉ';
            }
        }

                // Global map variable
        let locationMap = null;
        let currentMarker = null;

        // Initialize map when modal opens
        function initializeLocationMap() {
            // Wait for the map container to be in DOM
            setTimeout(() => {
                const mapContainer = document.getElementById('locationMap');
                if (!mapContainer) return;

                // Remove existing map if any
                if (locationMap) {
                    locationMap.remove();
                }

                // Initialize map centered on Ho Chi Minh City
                locationMap = L.map('locationMap').setView([10.762622, 106.660172], 13);

                // Add OpenStreetMap tiles
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors',
                    maxZoom: 19
                }).addTo(locationMap);

                // Add click event to map
                locationMap.on('click', function(e) {
                    setLocationMarker(e.latlng.lat, e.latlng.lng);
                });

                // Initialize control buttons
                initializeMapControls();

                // Force map to resize after a short delay
                setTimeout(() => {
                    locationMap.invalidateSize();
                }, 100);

            }, 500);
        }

        // Set marker and update form fields
        async function setLocationMarker(lat, lng) {
            // Remove existing marker
            if (currentMarker) {
                locationMap.removeLayer(currentMarker);
            }

            // Add new marker
            currentMarker = L.marker([lat, lng], {
                icon: L.divIcon({
                    className: 'custom-marker',
                    iconSize: [24, 24],
                    iconAnchor: [12, 12]
                })
            }).addTo(locationMap);

            // Update form fields
            document.getElementById('newLatitude').value = lat.toFixed(6);
            document.getElementById('newLongitude').value = lng.toFixed(6);

            // Get address from coordinates
            try {
                const address = await reverseGeocode(lat, lng);
                if (address) {
                    document.getElementById('newAddress').value = address;
                }

                // Add popup to marker
                currentMarker.bindPopup(`
                    <div class="custom-popup">
                        <div class="popup-title">Vị trí đã chọn</div>
                        <div class="popup-address">${address || 'Không tìm thấy địa chỉ'}</div>
                        <div class="popup-coordinates">
                            <span>Lat: ${lat.toFixed(6)}</span>
                            <span>Lng: ${lng.toFixed(6)}</span>
                        </div>
                    </div>
                `).openPopup();

            } catch (error) {
                console.error('Error getting address:', error);
                currentMarker.bindPopup(`
                    <div class="custom-popup">
                        <div class="popup-title">Vị trí đã chọn</div>
                        <div class="popup-coordinates">
                            <span>Lat: ${lat.toFixed(6)}</span>
                            <span>Lng: ${lng.toFixed(6)}</span>
                        </div>
                    </div>
                `).openPopup();
            }
        }

        // Reverse geocoding to get address from coordinates
        async function reverseGeocode(lat, lng) {
            try {
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=vi`
                );
                const data = await response.json();
                return data.display_name || null;
            } catch (error) {
                console.error('Reverse geocoding error:', error);
                return null;
            }
        }

        // Forward geocoding to get coordinates from address
        async function geocodeAddress(address) {
            try {
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=5&accept-language=vi`
                );
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Geocoding error:', error);
                return [];
            }
        }

        // Initialize map control buttons
        function initializeMapControls() {
            const detectBtn = document.getElementById('detectLocationBtn');
            const searchBtn = document.getElementById('searchLocationBtn');

            if (detectBtn) {
                detectBtn.addEventListener('click', detectCurrentLocation);
            }

            if (searchBtn) {
                searchBtn.addEventListener('click', showLocationSearch);
            }
        }

        // Detect current location
        function detectCurrentLocation() {
            const detectBtn = document.getElementById('detectLocationBtn');
            const originalText = detectBtn.innerHTML;

            detectBtn.innerHTML = `
                <div class="map-spinner" style="width: 16px; height: 16px; border-width: 2px;"></div>
                Đang xác định...
            `;
            detectBtn.disabled = true;

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;

                        locationMap.setView([lat, lng], 16);
                        setLocationMarker(lat, lng);

                        detectBtn.innerHTML = originalText;
                        detectBtn.disabled = false;
                    },
                    (error) => {
                        console.error('Geolocation error:', error);
                        alert('Không thể xác định vị trí hiện tại. Vui lòng kiểm tra quyền truy cập vị trí.');
                        detectBtn.innerHTML = originalText;
                        detectBtn.disabled = false;
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 60000
                    }
                );
            } else {
                alert('Trình duyệt không hỗ trợ định vị GPS.');
                detectBtn.innerHTML = originalText;
                detectBtn.disabled = false;
            }
        }

        // Show location search
        function showLocationSearch() {
            const searchQuery = prompt('Nhập địa chỉ cần tìm kiếm:');
            if (!searchQuery) return;

            const searchBtn = document.getElementById('searchLocationBtn');
            const originalText = searchBtn.innerHTML;

            searchBtn.innerHTML = `
                <div class="map-spinner" style="width: 16px; height: 16px; border-width: 2px;"></div>
                Đang tìm...
            `;
            searchBtn.disabled = true;

            geocodeAddress(searchQuery)
                .then(results => {
                    if (results.length > 0) {
                        const firstResult = results[0];
                        const lat = parseFloat(firstResult.lat);
                        const lng = parseFloat(firstResult.lon);

                        locationMap.setView([lat, lng], 16);
                        setLocationMarker(lat, lng);
                    } else {
                        alert('Không tìm thấy địa điểm. Vui lòng thử lại với từ khóa khác.');
                    }
                })
                .catch(error => {
                    console.error('Search error:', error);
                    alert('Có lỗi xảy ra khi tìm kiếm. Vui lòng thử lại.');
                })
                .finally(() => {
                    searchBtn.innerHTML = originalText;
                    searchBtn.disabled = false;
                });
        }

        // Update address field when user types
        function initializeAddressSearch() {
            const addressInput = document.getElementById('newAddress');
            let searchTimeout = null;

            if (addressInput) {
                addressInput.addEventListener('input', (e) => {
                    clearTimeout(searchTimeout);
                    const address = e.target.value.trim();

                    if (address.length > 3) {
                        searchTimeout = setTimeout(() => {
                            geocodeAddress(address)
                                .then(results => {
                                    if (results.length > 0) {
                                        const firstResult = results[0];
                                        const lat = parseFloat(firstResult.lat);
                                        const lng = parseFloat(firstResult.lon);

                                        if (locationMap) {
                                            locationMap.setView([lat, lng], 15);
                                            setLocationMarker(lat, lng);
                                        }
                                    }
                                })
                                .catch(error => {
                                    console.error('Auto-search error:', error);
                                });
                        }, 1000);
                    }
                });
            }
        }

        // Call this function when the modal is opened
        function onModalOpen() {
            initializeLocationMap();
            initializeAddressSearch();
        }

        // Clean up map when modal is closed
        function onModalClose() {
            if (locationMap) {
                locationMap.remove();
                locationMap = null;
                currentMarker = null;
            }
        }
    </script>
}

<div class="floating-sports-icons">
    <!-- Sports icons will be generated dynamically -->
</div>
<script src="~/js/Stadium.js"></script>

<div class="admin-container">
    <!-- Header Section -->
    <header class="glass-card header-card">
        <div class="section-header">
            <div>
                <h1 class="header-title">
                    <i class="ri-building-2-line"></i>
                    Quản Lý Sân Thể Thao
                </h1>
                <p class="header-subtitle">
                    <span id="current-time">2025-08-25 08:06:00</span> - Xin chào, <span style="font-weight: 700;">@User.Identity.Name</span>
                </p>
            </div>
            <div>
                <button class="btn btn-primary" onclick="openCreate()">
                    <i class="ri-add-line"></i> Thêm Sân Mới
                </button>
            </div>
        </div>
    </header>

    <!-- Filter Section -->
    <section class="glass-card filter-section">
        <h2 class="filter-title">
            <i class="ri-filter-3-line"></i> Bộ Lọc Tìm Kiếm
        </h2>
        <div class="filter-grid">
            <div class="input-group">
                <i class="ri-search-line input-icon"></i>
                <input type="text" id="search-input" class="form-control" placeholder="Tìm kiếm theo tên sân, địa chỉ, ID...">
            </div>
            <div class="input-group">
                <i class="ri-checkbox-circle-line input-icon"></i>
                <select id="status-filter" class="form-select">
                    <option value="all">Tất cả trạng thái</option>
                    <option value="true">Đã duyệt</option>
                    <option value="false">Chưa duyệt</option>
                </select>
            </div>
            <div class="input-group">
                <i class="ri-basketball-line input-icon"></i>
                <select id="sport-type-filter" class="form-select">
                    <option value="all">Tất cả loại sân</option>
                    <option value="Bóng đá sân 5">Bóng đá sân 5</option>
                    <option value="Bóng đá sân 7">Bóng đá sân 7</option>
                    <option value="Bóng đá sân 11">Bóng đá sân 11</option>
                    <option value="Bóng rổ">Bóng rổ</option>
                    <option value="Cầu lông">Cầu lông</option>
                    <option value="Tennis">Tennis</option>
                </select>
            </div>
        </div>
        
    </section>

    <!-- Stadium Grid -->
    <section class="glass-card stadium-grid-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="ri-layout-grid-line"></i> Danh Sách Sân
            </h2>
            <div class="last-updated">
                <i class="ri-refresh-line"></i>
                Cập nhật lần cuối: <span id="last-updated">Vừa xong</span>
            </div>
        </div>

        <div id="stadium-grid" class="stadium-grid">
            <div id="loading-container" class="loading-container">
                <div>
                    <div class="loading-spinner"></div>
                    <p style="color: white; margin-top: 1rem; font-weight: 600;">Đang tải dữ liệu...</p>
                </div>
            </div>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="empty-state" style="display: none;">
            <div class="empty-icon">
                <i class="ri-search-line"></i>
            </div>
            <h3 class="empty-title">Không tìm thấy sân nào</h3>
            <p class="empty-description">Không có sân nào phù hợp với bộ lọc hiện tại. Hãy thử điều chỉnh bộ lọc để tìm kiếm lại.</p>
            <button class="btn btn-primary" onclick="openCreate()">
                <i class="ri-add-line"></i> Thêm Sân Mới
            </button>
        </div>
    </section>

    <!-- Pagination -->
    <section class="glass-card pagination-section">
        <div class="pagination-container">
            <div class="pagination-info">
                <i class="ri-information-line"></i>
                Hiển thị <span id="showing-range">1-10</span> trong tổng số <strong id="total-count">0</strong> sân
            </div>
            <div class="pagination-controls" id="pagination-container"></div>
        </div>
    </section>
</div>