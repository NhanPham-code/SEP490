@{
    ViewData["Title"] = "Tải Lên Avatar & CCCD";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>@ViewData["Title"] - Sportivey</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />

    <link href="~/css/common/uploadcccd.css" rel="stylesheet" />
</head>

<body class="min-h-screen flex items-center justify-center p-4">
    
    <!-- Toast Container -->
    <div class="toast-container" id="toast-container"></div>
    
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="toast error" id="server-error">
            <i class="ri-error-warning-line"></i>
            <div>@ViewBag.ErrorMessage</div>
        </div>
    }

    <!-- Back Button -->
    <a href="@Url.Action("Index", "Home")" class="back-to-home-btn">
        <i class="ri-arrow-left-line"></i>
        <span>Quay lại</span>
    </a>

    <!-- Main Container -->
    <div class="main-container rounded-3xl shadow-2xl w-full max-w-5xl p-8 md:p-12 relative overflow-hidden">
        
        <!-- Header -->
        <div class="text-center mb-10">
            <div class="inline-flex items-center justify-center w-20 h-20 header-icon rounded-2xl mb-6 shadow-xl">
                <i class="ri-shield-user-line text-3xl text-white"></i>
            </div>
            <h1 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 via-teal-600 to-green-600 bg-clip-text text-transparent mb-4">
                Xác thực tài khoản
            </h1>
            <p class="text-gray-600 text-lg max-w-2xl mx-auto leading-relaxed">
                Tải lên ảnh đại diện và căn cước công dân để hoàn tất quá trình xác thực tài khoản của bạn
            </p>
        </div>

        <form id="uploadForm" enctype="multipart/form-data" class="space-y-10">
            
            <!-- Progress Section -->
            <div class="text-center mb-8">
                <div class="progress-container">
                    <svg class="progress-ring">
                        <defs>
                            <linearGradient id="progressGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                <stop offset="0%" style="stop-color:#1e40af"/>
                                <stop offset="50%" style="stop-color:#0891b2"/>
                                <stop offset="100%" style="stop-color:#059669"/>
                            </linearGradient>
                        </defs>
                        <circle class="progress-ring-circle"></circle>
                        <circle class="progress-ring-progress" id="progressCircle"></circle>
                    </svg>
                    <div class="absolute inset-0 flex items-center justify-center">
                        <div class="text-center">
                            <div id="progressPercent" class="text-2xl font-bold text-gray-800">0%</div>
                            <div class="text-xs text-gray-500 font-medium">Hoàn thành</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="grid lg:grid-cols-2 gap-10">
                
                <!-- Avatar Section -->
                <div class="space-y-6">
                    <div class="text-center">
                        <div class="inline-flex items-center gap-3 mb-6">
                            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-teal-600 rounded-full flex items-center justify-center">
                                <i class="ri-user-line text-white text-lg"></i>
                            </div>
                            <h3 class="text-xl font-semibold text-gray-800">Ảnh đại diện</h3>
                        </div>
                        
                        <div class="upload-zone avatar-zone" id="avatarContainer">
                            <div class="avatar-placeholder" id="avatarPlaceholder">
                                <div class="upload-icon">
                                    <i class="ri-camera-line text-white text-2xl"></i>
                                </div>
                                <h4 class="font-semibold text-gray-800 text-lg mb-2">Thêm ảnh đại diện</h4>
                                <p class="text-gray-600 text-sm">Nhấn để chọn ảnh</p>
                            </div>
                            <img id="avatarPreview" class="avatar-preview hidden" alt="Avatar Preview">
                            <input id="avatar" name="avatar" type="file" accept="image/*" class="hidden">
                        </div>
                        
                        <div class="flex gap-3 justify-center mt-6">
                            <label for="avatar" class="sport-btn sport-btn-secondary cursor-pointer">
                                <i class="ri-image-add-line"></i>
                                Chọn ảnh
                            </label>
                            <button type="button" id="removeAvatar" class="sport-btn sport-btn-danger px-4" disabled>
                                <i class="ri-delete-bin-line"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Avatar Requirements -->
                    <div class="requirements-card blue">
                        <h4 class="font-semibold text-blue-800 mb-3 flex items-center">
                            <i class="ri-information-line mr-2"></i>
                            Yêu cầu ảnh đại diện
                        </h4>
                        <ul class="text-sm text-blue-700 space-y-2">
                            <li class="flex items-center gap-2">
                                <i class="ri-check-line text-blue-600"></i>
                                Ảnh rõ nét, không bị mờ
                            </li>
                            <li class="flex items-center gap-2">
                                <i class="ri-check-line text-blue-600"></i>
                                Khuôn mặt hiện rõ, không đeo khẩu trang
                            </li>
                            <li class="flex items-center gap-2">
                                <i class="ri-check-line text-blue-600"></i>
                                Định dạng JPG, PNG (tối đa 5MB)
                            </li>
                        </ul>
                    </div>
                </div>

                <!-- CCCD Section -->
                <div class="space-y-6">
                    <div class="text-center">
                        <div class="inline-flex items-center gap-3 mb-6">
                            <div class="w-10 h-10 bg-gradient-to-r from-emerald-500 to-green-600 rounded-full flex items-center justify-center">
                                <i class="ri-id-card-line text-white text-lg"></i>
                            </div>
                            <h3 class="text-xl font-semibold text-gray-800">Căn cước công dân</h3>
                        </div>
                        
                        <div class="upload-zone cccd-zone" id="cccdContainer">
                            <div class="cccd-placeholder" id="cccdPlaceholder">
                                <div class="upload-icon">
                                    <i class="ri-id-card-line text-white text-3xl"></i>
                                </div>
                                <h4 class="font-semibold text-gray-800 text-xl mb-3">Mặt trước CCCD</h4>
                                <p class="text-gray-600">PNG, JPG tối đa 5MB</p>
                            </div>
                            <img id="cccdPreview" class="cccd-preview hidden" alt="CCCD Preview">
                            <input id="cccd" name="cccd" type="file" accept="image/*" class="hidden">
                        </div>
                        
                        <div class="flex gap-3 justify-center mt-6">
                            <label for="cccd" class="sport-btn sport-btn-secondary cursor-pointer">
                                <i class="ri-image-add-line"></i>
                                Chọn ảnh
                            </label>
                            <button type="button" id="removeCccd" class="sport-btn sport-btn-danger px-4" disabled>
                                <i class="ri-delete-bin-line"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- CCCD Requirements -->
                    <div class="requirements-card green">
                        <h4 class="font-semibold text-emerald-800 mb-3 flex items-center">
                            <i class="ri-shield-check-line mr-2"></i>
                            Yêu cầu CCCD
                        </h4>
                        <ul class="text-sm text-emerald-700 space-y-2">
                            <li class="flex items-center gap-2">
                                <i class="ri-check-line text-emerald-600"></i>
                                Ảnh rõ nét, không bị mờ hay chói sáng
                            </li>
                            <li class="flex items-center gap-2">
                                <i class="ri-check-line text-emerald-600"></i>
                                Chụp trực tiếp từ thẻ gốc
                            </li>
                            <li class="flex items-center gap-2">
                                <i class="ri-check-line text-emerald-600"></i>
                                Toàn bộ thẻ nằm trong khung hình
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Status -->
            <div class="text-center">
                <div class="status-section inline-flex items-center gap-2 text-gray-600 text-sm font-medium">
                    <i class="ri-upload-line"></i>
                    <span id="statusText">Đã tải lên 0/2 tài liệu</span>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="text-center">
                <button type="button" id="submitBtn" class="sport-btn sport-btn-primary text-lg py-4 px-12 min-w-[280px]" disabled>
                    <i class="ri-shield-check-line"></i>
                    <span id="submitText">Hoàn tất xác thực</span>
                </button>
            </div>
        </form>
    </div>

    <script>
        class ModernDocumentUploader {
            constructor() {
                this.uploadedFiles = {
                    avatar: null,
                    cccd: null
                };
                this.init();
            }

            init() {
                this.setupFileUploads();
                this.setupEventListeners();
                this.updateProgress();
            }

            setupFileUploads() {
                this.setupImageUpload('avatar', 'avatarContainer', 'avatarPreview', 'avatarPlaceholder', 'removeAvatar');
                this.setupImageUpload('cccd', 'cccdContainer', 'cccdPreview', 'cccdPlaceholder', 'removeCccd');
            }

            setupImageUpload(inputId, containerId, previewId, placeholderId, removeButtonId) {
                const input = document.getElementById(inputId);
                const container = document.getElementById(containerId);
                const preview = document.getElementById(previewId);
                const placeholder = document.getElementById(placeholderId);
                const removeBtn = document.getElementById(removeButtonId);

                input.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        this.handleFileUpload(file, inputId, container, preview, placeholder, removeBtn);
                    }
                });

                removeBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.removeFile(inputId, container, preview, placeholder, removeBtn);
                });

                container.addEventListener('click', (e) => {
                    if (!e.target.closest('button')) {
                        input.click();
                    }
                });
            }

            handleFileUpload(file, inputId, container, preview, placeholder, removeBtn) {
                if (!this.validateFile(file)) {
                    return;
                }

                this.uploadedFiles[inputId] = file;

                const reader = new FileReader();
                reader.onload = (e) => {
                    preview.src = e.target.result;
                    preview.classList.remove('hidden');
                    placeholder.classList.add('hidden');
                    container.classList.add('has-image');
                    removeBtn.disabled = false;
                    
                    this.updateProgress();
                    this.showToast(`${this.getFileTypeName(inputId)} đã được tải lên thành công!`, 'success');
                };
                reader.readAsDataURL(file);
            }

            removeFile(inputId, container, preview, placeholder, removeBtn) {
                document.getElementById(inputId).value = '';
                this.uploadedFiles[inputId] = null;

                preview.classList.add('hidden');
                placeholder.classList.remove('hidden');
                container.classList.remove('has-image');
                removeBtn.disabled = true;
                
                this.updateProgress();
                this.showToast(`${this.getFileTypeName(inputId)} đã được xóa`, 'warning');
            }

            validateFile(file) {
                const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
                if (!allowedTypes.includes(file.type)) {
                    this.showToast('Vui lòng chọn file ảnh định dạng JPG hoặc PNG', 'error');
                    return false;
                }

                const maxSize = 5 * 1024 * 1024;
                if (file.size > maxSize) {
                    this.showToast('Kích thước file không được vượt quá 5MB', 'error');
                    return false;
                }

                return true;
            }

            getFileTypeName(inputId) {
                const names = {
                    'avatar': 'Ảnh đại diện',
                    'cccd': 'CCCD'
                };
                return names[inputId] || 'File';
            }

            updateProgress() {
                const totalFiles = Object.keys(this.uploadedFiles).length;
                const uploadedCount = Object.values(this.uploadedFiles).filter(file => file !== null).length;
                const percentage = Math.round((uploadedCount / totalFiles) * 100);

                const circle = document.getElementById('progressCircle');
                const isMobile = window.innerWidth <= 768;
                const circumference = isMobile ? 2 * Math.PI * 42 : 2 * Math.PI * 52;
                const offset = circumference - (percentage / 100) * circumference;
                circle.style.strokeDashoffset = offset;

                document.getElementById('progressPercent').textContent = `${percentage}%`;

                const submitBtn = document.getElementById('submitBtn');
                const statusText = document.getElementById('statusText');
                
                if (percentage === 100) {
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('opacity-50');
                    statusText.textContent = 'Sẵn sàng hoàn tất xác thực';
                } else {
                    submitBtn.disabled = true;
                    submitBtn.classList.add('opacity-50');
                    statusText.textContent = `Đã tải lên ${uploadedCount}/${totalFiles} tài liệu`;
                }
            }

            setupEventListeners() {
                const submitBtn = document.getElementById('submitBtn');
                submitBtn.addEventListener('click', () => {
                    this.handleSubmit();
                });

                window.addEventListener('resize', () => {
                    this.updateProgress();
                });
            }

            async handleSubmit() {
                const submitBtn = document.getElementById('submitBtn');
                const submitText = document.getElementById('submitText');

                // Kiểm tra xem đã upload đủ file chưa
                if (!this.uploadedFiles.avatar || !this.uploadedFiles.cccd) {
                    this.showToast('Vui lòng tải lên đầy đủ ảnh đại diện và CCCD', 'error');
                    return;
                }

                submitBtn.disabled = true;
                submitText.innerHTML = '<i class="ri-loader-line animate-spin"></i>Đang xử lý...';

                try {
                    // Tạo FormData để gửi file
                    const formData = new FormData();

                    // Thêm các file vào FormData với tên parameter đúng theo method CompleteRegistration
                    if (this.uploadedFiles.avatar) {
                        formData.append('avatar', this.uploadedFiles.avatar);
                    }

                    if (this.uploadedFiles.cccd) {
                        formData.append('frontCccdImage', this.uploadedFiles.cccd); // Map cccd -> frontCccdImage
                    }

                    // Debug log để kiểm tra
                    console.log('Submitting files:');
                    console.log('Avatar:', this.uploadedFiles.avatar ? this.uploadedFiles.avatar.name : 'None');
                    console.log('CCCD:', this.uploadedFiles.cccd ? this.uploadedFiles.cccd.name : 'None');

                    // Gửi request đến CompleteRegistration action
                    const response = await fetch('/Common/CompleteRegistration', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (response.ok) {
                        // Kiểm tra xem response có redirect không
                        if (response.redirected) {
                            submitText.innerHTML = '<i class="ri-check-double-line"></i>Hoàn thành!';
                            this.showToast('Đăng ký thành công! Đang chuyển hướng...', 'success');

                            setTimeout(() => {
                                window.location.href = response.url;
                            }, 1500);
                            return;
                        }

                        // Xử lý response text
                        const responseText = await response.text();

                        // Kiểm tra xem có phải là HTML response không (có thể là View với error)
                        if (responseText.includes('<!DOCTYPE html>')) {
                            // Response là HTML, kiểm tra có error không
                            if (responseText.includes('ViewBag.ErrorMessage')) {
                                // Tìm error message trong HTML
                                const errorMatch = responseText.match(/ViewBag\.ErrorMessage[^"]*"([^"]+)"/);
                                const errorMessage = errorMatch ?
                                    errorMatch[1] :
                                    'Có lỗi xảy ra trong quá trình đăng ký.';

                                throw new Error(errorMessage);
                            } else {
                                // HTML response không có error, có thể là success page
                                submitText.innerHTML = '<i class="ri-check-double-line"></i>Hoàn thành!';
                                this.showToast('Đăng ký thành công! Đang chuyển hướng...', 'success');

                                setTimeout(() => {
                                    window.location.href = '/Home/Index';
                                }, 1500);
                            }
                        } else {
                            // Response không phải HTML, có thể là JSON hoặc text khác
                            try {
                                const jsonResponse = JSON.parse(responseText);
                                if (jsonResponse.success) {
                                    submitText.innerHTML = '<i class="ri-check-double-line"></i>Hoàn thành!';
                                    this.showToast('Đăng ký thành công! Đang chuyển hướng...', 'success');

                                    setTimeout(() => {
                                        window.location.href = jsonResponse.redirectUrl || '/Home/Index';
                                    }, 1500);
                                } else {
                                    throw new Error(jsonResponse.message || 'Đăng ký không thành công.');
                                }
                            } catch (parseError) {
                                // Không parse được JSON, coi như success
                                submitText.innerHTML = '<i class="ri-check-double-line"></i>Hoàn thành!';
                                this.showToast('Đăng ký thành công! Đang chuyển hướng...', 'success');

                                setTimeout(() => {
                                    window.location.href = '/Home/Index';
                                }, 1500);
                            }
                        }
                    } else {
                        // Xử lý lỗi HTTP
                        let errorMessage = 'Có lỗi xảy ra trong quá trình đăng ký.';

                        try {
                            const errorText = await response.text();
                            console.log('Error response:', errorText);

                            // Thử tìm error message trong response
                            if (errorText.includes('ViewBag.ErrorMessage')) {
                                const errorMatch = errorText.match(/ViewBag\.ErrorMessage[^"]*"([^"]+)"/);
                                if (errorMatch) {
                                    errorMessage = errorMatch[1];
                                }
                            } else {
                                // Thử parse JSON error
                                try {
                                    const errorData = JSON.parse(errorText);
                                    errorMessage = errorData.message || errorData.error || errorMessage;
                                } catch {
                                    // Không parse được, dùng status text
                                    errorMessage = `Lỗi ${response.status}: ${response.statusText || 'Unknown error'}`;
                                }
                            }
                        } catch (e) {
                            console.error('Error parsing error response:', e);
                            errorMessage = `Lỗi ${response.status}: ${response.statusText || 'Network error'}`;
                        }

                        throw new Error(errorMessage);
                    }
                } catch (error) {
                    console.error('Submit error:', error);

                    let errorMessage = 'Có lỗi xảy ra. Vui lòng thử lại.';

                    if (error.message) {
                        errorMessage = error.message;
                    } else if (error.name === 'NetworkError') {
                        errorMessage = 'Lỗi kết nối mạng. Vui lòng kiểm tra internet và thử lại.';
                    } else if (error.name === 'TypeError') {
                        errorMessage = 'Lỗi kỹ thuật. Vui lòng thử lại sau.';
                    }

                    this.showToast(errorMessage, 'error');

                    // Reset button state
                    submitBtn.disabled = false;
                    submitText.innerHTML = '<i class="ri-shield-check-line"></i>Hoàn tất đăng ký';
                }
            }

            showToast(message, type = 'success', autoHide = true) {
                const container = document.getElementById('toast-container');
                const toastId = 'toast-' + Date.now();
                
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.id = toastId;
                
                const iconMap = {
                    'success': 'ri-check-circle-line',
                    'error': 'ri-error-warning-line',
                    'warning': 'ri-alert-line'
                };
                
                toast.innerHTML = `
                    <i class="${iconMap[type] || 'ri-information-line'}"></i>
                    <div>${message}</div>
                `;
                
                container.appendChild(toast);
                
                if (autoHide) {
                    setTimeout(() => {
                        toast.style.animation = 'slideOutAlert 0.3s ease-out forwards';
                        setTimeout(() => toast.remove(), 300);
                    }, 4000);
                }
                
                return toastId;
            }
        }

        // Initialize uploader when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            new ModernDocumentUploader();

            // Auto-hide server error message
            const serverError = document.getElementById('server-error');
            if (serverError) {
                setTimeout(() => {
                    serverError.style.animation = 'slideOutAlert 0.3s ease-out forwards';
                    setTimeout(() => serverError.remove(), 300);
                }, 5000);
            }
        });
    </script>
</body>
</html>