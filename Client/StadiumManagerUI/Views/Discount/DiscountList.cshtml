@{
    ViewData["Title"] = "Quản lý Mã giảm giá";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

    <link href="~/css/Discount/discount.css" rel="stylesheet" />
</head>
<body>
    <div class="discount-management-container">
        <div class="page-container">
            <div class="page-header">
                <h1 class="page-title">Quản lý Mã giảm giá</h1>
                <button class="create-btn" onclick="openDiscountModal()">
                    <i class="fas fa-plus"></i> Tạo Mã Mới
                </button>
            </div>

            <div class="filters-card">
                <div class="filter-row">
                    <div class="form-group">
                        <label class="form-label">Tìm kiếm mã giảm giá</label>
                        <input type="text" class="form-control" id="searchInput" placeholder="Tìm theo mã...">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Sân vận động</label>
                        <select class="form-control" id="stadiumFilter">
                            <option value="">Tất cả sân</option>
                            <!-- Options will be added by JS -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Trạng thái</label>
                        <select class="form-control" id="statusFilter">
                            <option value="">Tất cả</option>
                            <option value="true">Đang hoạt động</option>
                            <option value="false">Không hoạt động</option>
                        </select>
                    </div>
                    <div class="filter-buttons">
                        <button class="filter-btn" onclick="applyFilters()">
                            <i class="fas fa-search"></i> Tìm kiếm
                        </button>
                        <button class="reset-btn" onclick="resetFilters()">
                            <i class="fas fa-undo-alt"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="discounts-container">
                <div class="table-header">
                    <h3 class="table-title">Danh sách mã giảm giá</h3>
                    <span class="results-count" id="resultsCount">Đang tải...</span>
                </div>
                <table class="discount-table">
                    <thead>
                        <tr>
                            <th>Mã</th>
                            <th>Giá trị</th>
                            <th>Thời gian áp dụng</th>
                            <th>Loại</th>
                            <th>Đối tượng áp dụng</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="discountTableBody">
                        <!-- Data will be rendered by JS -->
                    </tbody>
                </table>
                <div class="pagination-container" id="paginationControls">
                    <!-- Pagination will be rendered by JS -->
                </div>
            </div>
        </div>

        <!-- Modal HTML -->
        <div class="modal-overlay" id="discountModal">
            <div class="modal modal-wide">
                <div class="modal-header">
                    <h2 class="modal-title" id="modalTitle">Tạo Mã Mới</h2>
                    <button class="modal-close" onclick="closeDiscountModal()"><i class="fas fa-times"></i></button>
                </div>
                <form id="discountForm">
                    <input type="hidden" id="discountId" />
                    <div class="form-section">
                        <h3 class="section-title"><i class="fas fa-info-circle"></i> Thông tin cơ bản</h3>
                        <div class="form-grid">
                            <div class="form-group"><label class="form-label">Mã Discount *</label><input type="text" class="form-control" id="discountCode" required></div>
                            <div class="form-group">
                                <label class="form-label">Loại Discount *</label>
                                <select class="form-control" id="codeType" required onchange="toggleSections()">
                                    <option value="">Chọn loại</option>
                                    <option value="Stadium">Mã theo sân</option>
                                    <option value="Unique">Mã cá nhân</option>
                                </select>
                            </div>
                            <div class="form-group"><label class="form-label">Giá trị giảm (%) *</label><input type="number" class="form-control" id="percentValue" min="0" max="100" required></div>
                            <div class="form-group"><label class="form-label">Số tiền giảm tối đa</label><input type="number" class="form-control" id="maxDiscountAmount" min="0"></div>
                            <div class="form-group"><label class="form-label">Giá trị đơn hàng tối thiểu</label><input type="number" class="form-control" id="minOrderAmount" min="0"></div>
                        </div>
                        <div class="form-grid">
                            <div class="form-group"><label class="form-label">Ngày bắt đầu *</label><input type="date" class="form-control" id="startDate" required></div>
                            <div class="form-group"><label class="form-label">Ngày kết thúc *</label><input type="date" class="form-control" id="endDate" required></div>
                        </div>
                        <div class="form-group form-group-full"><label class="form-label">Mô tả</label><textarea class="form-control" id="description"></textarea></div>
                    </div>

                    <div class="form-section" id="userSelectionSection" style="display:none;">
                        <h3 class="section-title"><i class="fas fa-user"></i> Chọn người dùng mục tiêu</h3>
                        <div class="user-search-container">
                            <div class="user-search-bar">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" id="userSearchInput" class="form-control" placeholder="Nhập SĐT hoặc Email để tìm...">
                                <button type="button" class="search-btn" onclick="searchUsers()">
                                    <i class="fas fa-search"></i> Tìm kiếm
                                </button>
                            </div>
                            <div class="user-search-info">Nhập thông tin và nhấn tìm kiếm để hiển thị kết quả</div>
                        </div>
                        <div class="user-selection-grid" id="userSelectionResults">
                            <!-- User search results will be rendered here -->
                        </div>
                    </div>

                    <div class="form-section" id="stadiumSelectionSection" style="display:none;">
                        <h3 class="section-title"><i class="fas fa-futbol"></i> Chọn sân vận động áp dụng</h3>
                        <div class="stadium-actions">
                            <button type="button" class="btn-select-all" onclick="selectAllStadiums(true)">
                                <i class="fas fa-check-double"></i> Chọn tất cả
                            </button>
                            <span class="selected-count" id="stadiumsSelectedCount">0 sân được chọn</span>
                            <button type="button" class="btn-deselect-all" onclick="selectAllStadiums(false)">
                                <i class="fas fa-times"></i> Bỏ chọn tất cả
                            </button>
                        </div>
                        <div class="stadium-grid" id="stadiumSelectionGroup">
                            <!-- Stadiums will be added by JS -->
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-cancel" onclick="closeDiscountModal()">Hủy</button>
                        <button type="submit" class="btn-save"><i class="fas fa-save"></i> <span id="saveButtonText">Lưu</span></button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            // === STATE MANAGEMENT ===
            let allStadiums = [];
            let allUsers = []; // Cache user data
            let currentEditingId = null;
            let currentPage = 1;
            let pageSize = 5;
            let currentDiscounts = [];
            let userSearchTimeout;

            // === INITIALIZATION ===
            document.addEventListener('DOMContentLoaded', function () {
                fetchAndRenderDiscounts();
                document.getElementById('discountForm').addEventListener('submit', handleFormSubmit);
                document.getElementById('startDate').addEventListener('change', validateDates);
                document.getElementById('endDate').addEventListener('change', validateDates);
                document.getElementById('userSearchInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        searchUsers();
                    }
                });
            });

            // === DATA FETCHING & RENDERING ===
            function fetchAndRenderDiscounts(page = 1) {
                currentPage = page;
                const searchCode = document.getElementById('searchInput').value;
                const stadiumId = document.getElementById('stadiumFilter').value;
                const status = document.getElementById('statusFilter').value;
                let query = `?page=${currentPage}&pageSize=${pageSize}`;
                if (searchCode) query += `&searchByCode=${encodeURIComponent(searchCode)}`;
                if (stadiumId) query += `&stadiumId=${stadiumId}`;
                if (status !== "") query += `&isActive=${status}`;
                setLoadingState(true);
                fetch(`/Discount/GetDiscountPageData${query}`)
                    .then(response => response.ok ? response.json() : Promise.reject(response.statusText))
                    .then(data => {
                        currentDiscounts = data.discounts;

                        // *** LOGIC UPDATE START ***
                        // Cache stadiums if not already cached
                        if (allStadiums.length === 0 && data.stadiums) {
                            allStadiums = data.stadiums;
                            renderFilterOptions(allStadiums);
                            renderStadiumSelectionModal(allStadiums);
                        }
                        // Cache target users from the response
                        if (data.targetUsers && data.targetUsers.length > 0) {
                            cacheUserData(data.targetUsers);
                        }
                        // *** LOGIC UPDATE END ***

                        renderTable(currentDiscounts);
                        renderPagination(currentDiscounts.length);
                    })
                    .catch(error => {
                        console.error('Lỗi tải dữ liệu:', error);
                        document.getElementById('discountTableBody').innerHTML = `<tr><td colspan="7" class="text-center">Lỗi tải dữ liệu. Vui lòng thử lại.</td></tr>`;
                    })
                    .finally(() => setLoadingState(false));
            }

            function setLoadingState(isLoading) {
                const tableBody = document.getElementById('discountTableBody');
                const resultsCount = document.getElementById('resultsCount');
                if (isLoading) {
                    tableBody.innerHTML = '<tr><td colspan="7" style="text-align:center; padding: 20px;"><i class="fas fa-spinner fa-spin"></i> Đang tải...</td></tr>';
                    resultsCount.textContent = 'Đang tải...';
                }
            }

            function renderTable(discounts) {
                const tableBody = document.getElementById('discountTableBody');
                const resultsCount = document.getElementById('resultsCount');
                tableBody.innerHTML = '';
                if (!discounts || discounts.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="7" style="text-align:center; padding: 20px;">Không tìm thấy discount nào phù hợp.</td></tr>`;
                    resultsCount.textContent = 'Tìm thấy 0 kết quả';
                } else {
                    discounts.forEach(d => tableBody.appendChild(createTableRow(d)));
                    resultsCount.textContent = `Hiển thị ${discounts.length} kết quả`;
                }
            }

            function renderPagination(currentItemCount) {
                const container = document.getElementById('paginationControls');
                container.innerHTML = '';
                const hasPrevious = currentPage > 1;
                const hasNext = currentItemCount === pageSize;
                if (!hasPrevious && !hasNext) return;
                container.innerHTML = `
                    <button class="pagination-btn" onclick="fetchAndRenderDiscounts(${currentPage - 1})" ${!hasPrevious ? 'disabled' : ''}>
                        <i class="fas fa-chevron-left"></i> Trước
                    </button>
                    <span class="pagination-info">Trang ${currentPage}</span>
                    <button class="pagination-btn" onclick="fetchAndRenderDiscounts(${currentPage + 1})" ${!hasNext ? 'disabled' : ''}>
                        Sau <i class="fas fa-chevron-right"></i>
                    </button>
                `;
            }

            function applyFilters() { fetchAndRenderDiscounts(1); }
            function resetFilters() {
                document.getElementById('searchInput').value = '';
                document.getElementById('stadiumFilter').value = '';
                document.getElementById('statusFilter').value = '';
                fetchAndRenderDiscounts(1);
            }

            function createTableRow(discount) {
                const tr = document.createElement('tr');
                tr.id = `discount-row-${discount.id}`;
                const isExpired = new Date() > new Date(discount.endDate);
                const isActive = discount.isActive && !isExpired;
                const statusClass = isActive ? 'status-active' : 'status-inactive';
                const statusText = isActive ? 'ON' : 'OFF';
                const remainingDays = Math.ceil((new Date(discount.endDate) - new Date()) / (1000 * 60 * 60 * 24));
                const codeTypeLabels = { 'Stadium': 'Mã theo sân', 'Unique': 'Mã cá nhân' };
                const codeTypeDisplay = codeTypeLabels[discount.codeType] || discount.codeType;

                // *** LOGIC UPDATE START: Restore target user display ***
                let targetDisplay = '';
                const hasStadiums = discount.stadiumIds && discount.stadiumIds.length > 0;
                const stadiumTag = hasStadiums
                    ? `<span class="stadium-tag">${discount.stadiumIds.length} sân</span>`
                    : `<span class="stadium-tag" style="background: var(--danger-red);">Chưa áp dụng</span>`;

                if (discount.codeType === 'Stadium') {
                    targetDisplay = stadiumTag;
                } else if (discount.codeType === 'Unique') {
                    targetDisplay = `<div class="target-display-flex">${stadiumTag}</div>`;
                } else {
                    targetDisplay = '<span class="stadium-tag">Tất cả</span>';
                }
                // *** LOGIC UPDATE END ***

                tr.innerHTML = `
                    <td><span class="discount-code">${discount.code}</span></td>
                    <td><span class="discount-value">${discount.percentValue}%</span></td>
                    <td>
                        <div class="discount-dates">
                            <div><strong>${new Date(discount.startDate).toLocaleDateString('vi-VN')} - ${new Date(discount.endDate).toLocaleDateString('vi-VN')}</strong></div>
                            <div style="font-size: 0.8rem; color: ${isExpired ? 'var(--danger-red)' : 'var(--text-muted)'};">
                                ${isExpired ? 'Đã hết hạn' : (remainingDays > 0 ? `Còn ${remainingDays} ngày` : 'Hết hạn hôm nay')}
                            </div>
                        </div>
                    </td>
                    <td><span class="code-type-badge type-${discount.codeType.toLowerCase()}">${codeTypeDisplay}</span></td>
                    <td>${targetDisplay}</td>
                    <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                    <td>
                        <div class="action-buttons">
                            <button class="action-btn edit-btn" title="Chỉnh sửa" onclick="openDiscountModal(${discount.id})"><i class="fas fa-edit"></i></button>
                            <button class="action-btn toggle-btn" style="background: ${isActive ? '#F7665E' : '#22c55e' };" title="${isActive ? 'Khóa' : 'Mở khóa'}" onclick="openToggleStatusConfirm(${discount.id})">
                                <i class="fas ${isActive ? 'fa-lock' : 'fa-lock-open'}"></i>
                            </button>
                        </div>
                    </td>`;
                return tr;
            }

            // === MODAL & FORM LOGIC ===
            function openDiscountModal(discountId = null) {
                document.getElementById('discountForm').reset();
                document.getElementById('userSelectionResults').innerHTML = '';
                document.getElementById('userSearchInput').value = '';
                document.getElementById('endDate').setCustomValidity('');
                const modalTitle = document.getElementById('modalTitle');
                const saveBtnText = document.getElementById('saveButtonText');
                document.getElementById('discountCode').readOnly = false;
                currentEditingId = discountId;
                let selectedStadiumIds = [], isActiveValue = true, targetUserId = null;

                if (discountId) {
                    modalTitle.textContent = 'Chỉnh sửa Discount';
                    saveBtnText.textContent = 'Cập nhật';
                    const data = currentDiscounts.find(d => d.id === discountId);
                    if (data) {
                        document.getElementById('discountId').value = data.id;
                        document.getElementById('discountCode').value = data.code;
                        document.getElementById('discountCode').readOnly = true;
                        document.getElementById('description').value = data.description || '';
                        document.getElementById('percentValue').value = data.percentValue;
                        document.getElementById('maxDiscountAmount').value = data.maxDiscountAmount;
                        document.getElementById('minOrderAmount').value = data.minOrderAmount;
                        document.getElementById('startDate').value = data.startDate.slice(0, 10);
                        document.getElementById('endDate').value = data.endDate.slice(0, 10);
                        document.getElementById('codeType').value = data.codeType;
                        selectedStadiumIds = data.stadiumIds || [];
                        isActiveValue = data.isActive;
                        targetUserId = data.targetUserId;
                        if (data.codeType === 'Unique' && targetUserId) {
                             const user = allUsers.find(u => u.userId == targetUserId);
                             if (user) renderUserSelectionResults([user], targetUserId);
                        }
                    }
                } else {
                    modalTitle.textContent = 'Tạo Mã Mới';
                    saveBtnText.textContent = 'Lưu';
                    document.getElementById('startDate').value = new Date().toISOString().slice(0, 10);
                }
                renderStadiumSelectionModal(allStadiums, selectedStadiumIds);
                toggleSections();
                document.getElementById('discountForm').dataset.isActive = isActiveValue;
                document.getElementById('discountModal').classList.add('active');
            }

            async function handleFormSubmit(event) {
                event.preventDefault();
                if (!validateDates()) {
                    alert('Ngày kết thúc không được nhỏ hơn ngày bắt đầu.');
                    return;
                }
                const saveButton = event.target.querySelector('.btn-save');
                saveButton.disabled = true;

                const payload = getFormData();
                const codeType = payload.codeType;

                if (codeType === 'Stadium' || codeType === 'Unique') {
                    payload.stadiumIds = Array.from(document.querySelectorAll('#stadiumSelectionGroup input[type="checkbox"]:checked')).map(cb => parseInt(cb.value));
                    if (payload.stadiumIds.length === 0) {
                        alert('Với loại mã này, bạn phải chọn ít nhất một sân vận động để áp dụng.');
                        saveButton.disabled = false;
                        return;
                    }
                }

                if (codeType === 'Unique') {
                    const selectedUser = document.querySelector('#userSelectionResults input[name="targetUser"]:checked');
                    if (!selectedUser) {
                        alert('Vui lòng chọn một người dùng mục tiêu cho mã cá nhân.');
                        saveButton.disabled = false;
                        return;
                    }
                    payload.targetUserId = selectedUser.value;
                }

                payload.isActive = (event.target.dataset.isActive === "true");
                const url = currentEditingId ? '/Discount/UpdateDiscount' : '/Discount/CreateDiscount';

                try {
                    const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    const result = await response.json();
                    if (result.success) {
                        closeDiscountModal();
                        alert(currentEditingId ? 'Cập nhật thành công!' : 'Tạo mới thành công!');
                        fetchAndRenderDiscounts(currentEditingId ? currentPage : 1);
                    } else {
                        alert('Lỗi: ' + (result.message || 'Thao tác thất bại.'));
                    }
                } catch (err) {
                    console.error("Submit Error:", err);
                    alert('Lỗi kết nối đến server.');
                } finally {
                    saveButton.disabled = false;
                }
            }

            function getFormData() {
                return {
                    id: currentEditingId ? parseInt(document.getElementById('discountId').value) : 0,
                    code: document.getElementById('discountCode').value.trim(),
                    description: document.getElementById('description').value,
                    percentValue: parseFloat(document.getElementById('percentValue').value),
                    maxDiscountAmount: parseFloat(document.getElementById('maxDiscountAmount').value) || 0,
                    minOrderAmount: parseFloat(document.getElementById('minOrderAmount').value) || 0,
                    startDate: new Date(document.getElementById('startDate').value + 'T00:00:00Z'),
                    endDate: new Date(document.getElementById('endDate').value + 'T23:59:59Z'),
                    codeType: document.getElementById('codeType').value,
                    stadiumIds: [],
                    targetUserId: null
                };
            }

            async function openToggleStatusConfirm(discountId) {
                const discount = currentDiscounts.find(d => d.id === discountId);
                if (!discount) return;
                try {
                    const payload = { ...discount, isActive: !discount.isActive };
                    const response = await fetch('/Discount/UpdateDiscount', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    const result = await response.json();
                    if (result.success) {
                        alert('Thay đổi trạng thái thành công!');
                        fetchAndRenderDiscounts(currentPage);
                    } else {
                        alert('Lỗi: ' + (result.message || 'Thao tác thất bại.'));
                    }
                } catch (err) { alert('Lỗi kết nối đến server.'); }
            }

            function renderFilterOptions(stadiums) {
                const stadiumFilter = document.getElementById('stadiumFilter');
                stadiums.forEach(s => {
                    const option = document.createElement('option');
                    option.value = s.id;
                    option.textContent = s.name;
                    stadiumFilter.appendChild(option);
                });
            }

            function renderStadiumSelectionModal(stadiums, selectedIds = []) {
                const container = document.getElementById('stadiumSelectionGroup');
                container.innerHTML = '';
                stadiums.forEach(s => {
                    const checked = selectedIds.includes(s.id) ? 'checked' : '';
                    container.innerHTML += `
                        <div class="stadium-card">
                            <div class="stadium-card-header">
                                <div class="stadium-info">
                                    <i class="fas fa-futbol stadium-icon"></i>
                                    <div><h4>${s.name}</h4><p>${s.address}</p></div>
                                </div>
                                <label class="custom-checkbox"><input type="checkbox" name="stadiumIds" value="${s.id}" ${checked} onchange="updateStadiumCount()"><span class="checkmark"></span></label>
                            </div>
                        </div>`;
                });
                updateStadiumCount();
            }

            function updateStadiumCount() {
                const selectedCount = document.querySelectorAll('#stadiumSelectionGroup input[type="checkbox"]:checked').length;
                document.getElementById('stadiumsSelectedCount').textContent = `${selectedCount} sân được chọn`;
            }

            function selectAllStadiums(select) {
                const checkboxes = document.querySelectorAll('#stadiumSelectionGroup input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = select;
                });
                updateStadiumCount();
            }

            function closeDiscountModal() { document.getElementById('discountModal').classList.remove('active'); }

            function toggleSections() {
                const codeType = document.getElementById('codeType').value;
                document.getElementById('stadiumSelectionSection').style.display = (codeType === 'Stadium' || codeType === 'Unique') ? 'block' : 'none';
                document.getElementById('userSelectionSection').style.display = codeType === 'Unique' ? 'block' : 'none';
            }

            function validateDates() {
                const startDate = document.getElementById('startDate').value;
                const endDateInput = document.getElementById('endDate');
                if (startDate && endDateInput.value && startDate > endDateInput.value) {
                    endDateInput.setCustomValidity('Ngày kết thúc không được nhỏ hơn ngày bắt đầu.');
                    endDateInput.reportValidity();
                    return false;
                }
                endDateInput.setCustomValidity('');
                return true;
            }

            async function searchUsers() {
                const searchTerm = document.getElementById('userSearchInput').value;
                const resultsContainer = document.getElementById('userSelectionResults');
                if (!searchTerm.trim()) {
                    resultsContainer.innerHTML = '<p class="user-search-message">Nhập SĐT hoặc Email để tìm người dùng.</p>';
                    return;
                }
                resultsContainer.innerHTML = '<p class="user-search-message"><i class="fas fa-spinner fa-spin"></i> Đang tìm...</p>';
                try {
                    const response = await fetch(`/Discount/SearchUsers?searchTerm=${encodeURIComponent(searchTerm)}`);
                    const result = await response.json();
                    if (result.success && result.users) {
                        cacheUserData(result.users);
                        renderUserSelectionResults(result.users, document.querySelector('#userSelectionResults input[name="targetUser"]:checked')?.value);
                    } else {
                        resultsContainer.innerHTML = `<p class="user-search-message">${result.message || 'Không tìm thấy người dùng.'}</p>`;
                    }
                } catch (error) {
                    console.error('Lỗi tìm kiếm người dùng:', error);
                    resultsContainer.innerHTML = '<p class="user-search-message">Lỗi kết nối server.</p>';
                }
            }

            function renderUserSelectionResults(users, selectedUserId = null) {
                const container = document.getElementById('userSelectionResults');
                if (users.length === 0 && !selectedUserId) {
                    container.innerHTML = '<p class="user-search-message">Không tìm thấy người dùng nào.</p>';
                    return;
                }
                container.innerHTML = users.map(user => {
                    const checked = user.userId == selectedUserId ? 'checked' : '';
                    const avatarSrc = user.avatarUrl ? `https://localhost:7136/${user.avatarUrl}` : '/images/default-avatar.png';
                    return `
                        <div class="user-card ${checked ? 'user-card-selected' : ''}">
                           <label class="user-card-content">
                                <img src="${avatarSrc}" alt="Avatar" class="user-avatar" onerror="this.src='/images/default-avatar.png'; this.onerror=null;">
                                <div class="user-info">
                                    <h4>${user.fullName}</h4>
                                    <p><i class="fas fa-envelope"></i> ${user.email || 'N/A'}</p>
                                    <p><i class="fas fa-phone"></i> ${user.phoneNumber || 'N/A'}</p>
                                </div>
                                <input type="radio" name="targetUser" value="${user.userId}" ${checked} onchange="highlightSelectedUser(this)">
                                <span class="radio-checkmark"></span>
                            </label>
                        </div>`;
                }).join('');
            }

            function highlightSelectedUser(radioBtn) {
                // Remove selected class from all cards
                document.querySelectorAll('.user-card').forEach(card => {
                    card.classList.remove('user-card-selected');
                });

                // Add selected class to the parent card
                if (radioBtn.checked) {
                    radioBtn.closest('.user-card').classList.add('user-card-selected');
                }
            }

            function cacheUserData(users) {
                users.forEach(user => {
                    if (!allUsers.some(u => u.userId === user.userId)) {
                        allUsers.push(user);
                    }
                });
            }
        </script>
    }
</body>
</html>