@{
    ViewData["Title"] = "Feedback - OData list";
}

<div class="feedback-container card">
    <div class="card-header">
        <h2>Danh sách Feedback</h2>
        <div class="card-actions">
            <div class="summary" id="feedbackSummary">Đang tải...</div>
        </div>
    </div>

    <div class="filters" role="region" aria-label="Bộ lọc phản hồi">
        <div class="filter-item">
            <label for="ratingFilter">Lọc theo rating:</label>
            <select id="ratingFilter" aria-label="Lọc rating">
                <option value="">Tất cả</option>
                <option value="5">5</option>
                <option value="4">4</option>
                <option value="3">3</option>
                <option value="2">2</option>
                <option value="1">1</option>
            </select>
        </div>

        <div class="filter-item">
            <label for="pageSize">Số bản ghi / trang:</label>
            <select id="pageSize" aria-label="Số bản ghi trên một trang">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>

        <div class="filter-item">
            <label for="orderBy">Sắp xếp:</label>
            <select id="orderBy" aria-label="Sắp xếp phản hồi">
                <option value="createdAt desc">Mới nhất</option>
                <option value="createdAt asc">Cũ nhất</option>
                <option value="rating desc">Rating cao → thấp</option>
                <option value="rating asc">Rating thấp → cao</option>
            </select>
        </div>

        <div class="filter-item actions">
            <button id="applyFilters" class="btn btn-primary" aria-label="Áp dụng bộ lọc">Áp dụng</button>
        </div>
    </div>

    <div id="loadingOverlay" class="loading-overlay" aria-hidden="true">
        <div class="spinner" role="status" aria-live="polite"><span class="sr-only">Đang tải...</span></div>
    </div>

    <div id="feedbackInfo" class="info" aria-live="polite"></div>

    <div class="table-responsive">
        <table id="feedbackTable" class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>User</th>
                    <th>Rating</th>
                    <th>Comment</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody>
                <!-- rows injected by JS -->
            </tbody>
        </table>
    </div>

    <div id="pager" class="pager" role="navigation" aria-label="Phân trang">
        <button id="firstPage" class="pager-btn" title="Đầu tiên" aria-label="Trang đầu">|&lt;</button>
        <button id="prevPage" class="pager-btn" title="Trang trước" aria-label="Trang trước">&lt;</button>

        <div id="pageNumbers" class="page-numbers" role="list"></div>

        <button id="nextPage" class="pager-btn" title="Trang sau" aria-label="Trang sau">&gt;</button>
        <button id="lastPage" class="pager-btn" title="Cuối cùng" aria-label="Trang cuối">&gt;|</button>
    </div>
</div>

<style>
    :root {
        --card-bg: #ffffff;
        --muted: #6b7280;
        --primary: #667eea;
        --primary-dark: #5a67d8;
        --border: #e6e9ee;
        --accent: #f3f4f6;
        --gradient-start: #667eea;
        --gradient-end: #764ba2;
    }

    /* Add gradient background to body */
    body {
        background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
        min-height: 100vh;
        margin: 0;
        padding: 20px 0;
    }

    .feedback-container {
        max-width: 1200px;
        margin: 20px auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #111827;
    }

    .card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 25px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(20px);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 25px 30px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

        .card-header h2 {
            margin: 0;
            font-size: 1.75rem;
            font-weight: 600;
            color: #1f2937;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

    .card-actions .summary {
        color: var(--muted);
        font-size: 1rem;
        font-weight: 500;
        padding: 8px 16px;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 15px;
        backdrop-filter: blur(10px);
    }

    .filters {
        display: flex;
        gap: 20px;
        align-items: end;
        padding: 25px 30px;
        flex-wrap: wrap;
        background: linear-gradient(180deg, rgba(102, 126, 234, 0.03), transparent 60%);
    }

    .filter-item {
        display: flex;
        flex-direction: column;
        gap: 8px;
        min-width: 180px;
    }

        .filter-item label {
            font-size: 0.9rem;
            color: #374151;
            font-weight: 500;
        }

        .filter-item select {
            padding: 12px 15px;
            border-radius: 12px;
            border: 2px solid #e5e7eb;
            background: white;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

            .filter-item select:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .filter-item.actions {
            margin-left: auto;
            align-self: center;
        }

    .btn {
        padding: 12px 25px;
        border-radius: 12px;
        border: 0;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
        color: white;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }

    .table-responsive {
        padding: 0 30px 30px;
        overflow-x: auto;
        position: relative;
    }

    .table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        min-width: 800px;
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
    }

        .table th, .table td {
            border-bottom: 1px solid #f1f5f9;
            padding: 18px 15px;
            text-align: left;
            vertical-align: middle;
            font-size: 0.95rem;
        }

        .table thead th {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            color: #374151;
            font-weight: 600;
            position: sticky;
            top: 0;
            border-bottom: 2px solid #e5e7eb;
        }

        .table tbody tr {
            transition: all 0.2s ease;
        }

            .table tbody tr:hover {
                background: rgba(102, 126, 234, 0.03);
                transform: scale(1.001);
            }

            .table tbody tr:nth-child(even) {
                background: rgba(248, 250, 252, 0.5);
            }

    .stars {
        display: inline-flex;
        gap: 3px;
        color: #d1d5db;
        font-size: 1.1rem;
    }

    .star.filled {
        color: #f59e0b;
        text-shadow: 0 1px 2px rgba(245, 158, 11, 0.3);
    }

    .info {
        padding: 15px 30px;
        color: var(--muted);
        font-size: 0.95rem;
        background: rgba(102, 126, 234, 0.02);
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    /* pager */
    .pager {
        display: flex;
        gap: 10px;
        align-items: center;
        justify-content: space-between;
        padding: 25px 30px;
        border-top: 1px solid rgba(0, 0, 0, 0.08);
        flex-wrap: wrap;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.02) 0%, rgba(118, 75, 162, 0.02) 100%);
    }

        .pager .page-numbers {
            display: flex;
            gap: 8px;
            flex: 1;
            justify-content: center;
        }

    .pager-btn, .page-number {
        padding: 10px 15px;
        border-radius: 10px;
        border: 2px solid #e5e7eb;
        background: white;
        cursor: pointer;
        min-width: 45px;
        text-align: center;
        font-weight: 500;
        transition: all 0.3s ease;
        color: #6b7280;
    }

        .pager-btn:hover:not(:disabled), .page-number:hover:not(.active) {
            border-color: var(--primary);
            color: var(--primary);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
        }

        .page-number.active {
            background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
            color: #fff;
            border-color: var(--primary);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
        }

        .pager-btn:disabled {
            opacity: 0.4;
            cursor: not-allowed;
            transform: none;
        }

    /* loading overlay */
    .loading-overlay {
        display: none;
        position: absolute;
        inset: 0;
        background: rgba(255, 255, 255, 0.8);
        align-items: center;
        justify-content: center;
        z-index: 50;
        backdrop-filter: blur(5px);
    }

        .loading-overlay.visible {
            display: flex;
        }

    /* spinner */
    .spinner {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: 4px solid rgba(102, 126, 234, 0.1);
        border-top: 4px solid var(--primary);
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* responsive */
    @@media (max-width: 768px) {
        .feedback-container {
            margin: 10px;
        }

        .filter-item {
            min-width: 140px;
        }

        .table {
            min-width: 640px;
        }

        .card-header {
            flex-direction: column;
            gap: 15px;
            align-items: flex-start;
        }

            .card-header h2 {
                font-size: 1.5rem;
            }

        .filters {
            padding: 20px;
        }

        .table-responsive, .pager, .info {
            padding-left: 20px;
            padding-right: 20px;
        }
    }
</style>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(function () {
            const $tableBody = $("#feedbackTable tbody");
            const $ratingFilter = $("#ratingFilter");
            const $pageSize = $("#pageSize");
            const $orderBy = $("#orderBy");
            const $applyBtn = $("#applyFilters");
            const $info = $("#feedbackInfo");
            const $pageNumbers = $("#pageNumbers");
            const $first = $("#firstPage");
            const $prev = $("#prevPage");
            const $next = $("#nextPage");
            const $last = $("#lastPage");
            const $loading = $("#loadingOverlay");

            let currentPage = 1;
            let totalPages = 1;
            let totalCount = 0;

            function setLoading(on) {
                $loading.attr('aria-hidden', !on);
                if (on) $loading.addClass('visible');
                else $loading.removeClass('visible');
                $applyBtn.prop('disabled', on);
                $first.prop('disabled', on || currentPage === 1);
                $prev.prop('disabled', on || currentPage === 1);
                $next.prop('disabled', on || currentPage === totalPages);
                $last.prop('disabled', on || currentPage === totalPages);
            }

            function buildODataFilter() {
                const rating = $ratingFilter.val();
                const filters = [];
                if (rating) filters.push(`rating eq ${rating}`);
                return filters.length ? filters.join(" and ") : null;
            }

            function loadPage(page = 1) {
                currentPage = page;
                setLoading(true);

                const top = parseInt($pageSize.val(), 10) || 10;
                const skip = (page - 1) * top;
                const filter = buildODataFilter();
                const orderBy = $orderBy.val() || "createdAt desc";

                const data = { skip: skip, top: top, orderBy: orderBy };
                if (filter) data.filter = filter;

                $.ajax({
                    url: "/Feedback/GetAllOdata",
                    method: "GET",
                    data: data,
                    dataType: "json",
                    xhrFields: { withCredentials: true },
                    success: function (json) {
                        const items = (json.data || json.Data) || [];
                        totalCount = (json.totalCount || json.TotalCount) || 0;
                        renderTable(items);
                        totalPages = Math.max(1, Math.ceil(totalCount / top));
                        renderPager();
                        $info.text(`Hiển thị ${items.length} / ${totalCount} phản hồi. Trang ${currentPage} / ${totalPages}`);
                        $(".summary").text(`Tổng: ${totalCount}`);
                    },
                    error: function (xhr) {
                        console.error("AJAX error:", xhr.status, xhr.responseText);
                        $tableBody.html('<tr><td colspan="5" style="text-align: center; padding: 40px; color: #ef4444;">❌ Lỗi khi tải dữ liệu</td></tr>');
                        $info.text(`Lỗi server: ${xhr.status}`);
                    },
                    complete: function () {
                        setLoading(false);
                    }
                });
            }

            // Render rating stars and rows safely using .text()
            function renderTable(items) {
                $tableBody.empty();
                if (!items || !items.length) {
                    $tableBody.append('<tr><td colspan="5" style="text-align: center; padding: 40px; color: #6b7280;">📝 Không có phản hồi nào</td></tr>');
                    return;
                }

                items.forEach(function (it) {
                    const id = it.id ?? it.Id ?? "";
                    const user = it.userName || it.user || it.userId || it.UserName || it.User || it.UserId || "";
                    const rating = it.rating ?? it.Rating ?? "";
                    const comment = it.comment || it.content || it.Comment || it.Content || "";
                    const createdVal = (it.createdAt || it.CreatedAt);
                    const created = createdVal ? new Date(createdVal).toLocaleString() : "";

                    const $tr = $("<tr>").attr("tabindex", 0);
                    $tr.append($("<td>").text(id));
                    $tr.append($("<td>").text(user));
                    $tr.append($("<td>").append(renderStars(rating)));
                    $tr.append($("<td>").text(comment));
                    $tr.append($("<td>").text(created));
                    $tableBody.append($tr);
                });
            }

            function renderStars(rating) {
                const $wrap = $("<div>").addClass("stars").attr("aria-hidden", "true");
                const r = parseInt(rating, 10) || 0;
                for (let i = 1; i <= 5; i++) {
                    const $s = $("<span>").addClass("star").toggleClass("filled", i <= r).text("★");
                    $wrap.append($s);
                }
                return $wrap;
            }

            function renderPager() {
                const maxButtons = 7;
                let start = Math.max(1, currentPage - Math.floor(maxButtons / 2));
                let end = start + maxButtons - 1;
                if (end > totalPages) {
                    end = totalPages;
                    start = Math.max(1, end - maxButtons + 1);
                }

                $pageNumbers.empty();
                for (let p = start; p <= end; p++) {
                    const $btn = $("<button>")
                        .addClass("page-number")
                        .attr("role", "button")
                        .attr("aria-label", `Trang ${p}`)
                        .toggleClass("active", p === currentPage)
                        .text(p)
                        .on("click", function () { if (p !== currentPage) loadPage(p); });
                    $pageNumbers.append($btn);
                }

                $first.prop("disabled", currentPage === 1);
                $prev.prop("disabled", currentPage === 1);
                $next.prop("disabled", currentPage === totalPages);
                $last.prop("disabled", currentPage === totalPages);
            }

            // events
            $applyBtn.on("click", function () { loadPage(1); });
            $pageSize.on("change", function () { loadPage(1); });
            $orderBy.on("change", function () { loadPage(1); });

            $first.on("click", function () { loadPage(1); });
            $prev.on("click", function () { loadPage(Math.max(1, currentPage - 1)); });
            $next.on("click", function () { loadPage(Math.min(totalPages, currentPage + 1)); });
            $last.on("click", function () { loadPage(totalPages); });

            // initial load
            loadPage(1);
        });
    </script>
}