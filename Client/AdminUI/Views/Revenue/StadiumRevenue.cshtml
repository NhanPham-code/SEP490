@{
    ViewData["Title"] = "Doanh Thu Theo Sân";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Revenue/Revenue.css">
    <link rel="stylesheet" href="~/css/Revenue/StadiumRevenue.css">
    
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="page-title">Doanh Thu Theo Sân</h1>
            <div class="header-actions">
                <a href="@Url.Action("Revenue", "Revenue")" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Quay lại</a>
            </div>
        </div>

        <div class="filter-section">
            <div class="filter-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div class="form-group"><label>Lọc theo</label><select class="form-control" id="filterType" onchange="toggleFilterInputs()"><option value="month" selected>Tháng</option><option value="day">Ngày</option><option value="year">Năm</option></select></div>
                <div class="form-group" id="dayFilter" style="display: none;"><label>Chọn ngày</label><input type="date" class="form-control" id="dateInput"></div>
                <div class="form-group" id="monthFilter"><label>Chọn tháng</label><select class="form-control" id="monthInput"></select></div>
                <div class="form-group" id="commonYearFilter"><label>Năm</label><input type="number" class="form-control" id="yearForMonthInput" placeholder="VD: 2025"></div>
                <div class="form-group" id="yearFilter" style="display: none;"><label>Chọn năm</label><input type="number" class="form-control" id="yearInput" placeholder="VD: 2025"></div>
                <div class="form-group"><label style="opacity: 0;">Btn</label><button class="btn btn-primary" style="width: 100%;" onclick="fetchData()"><i class="fas fa-filter"></i> Xác nhận</button></div>
            </div>
        </div>

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th style="width: 50px;">STT</th>
                        <th>Tên Sân</th>
                        <th>Đã hoàn thành</th>
                        <th>Tổng Doanh Thu</th>
                        <th style="width: 150px;">Hành Động</th>
                    </tr>
                </thead>
                <tbody id="stadium-revenue-table"></tbody>
            </table>
            <div id="loading-spinner" style="text-align:center; padding: 20px; display:none;"><i class="fas fa-spinner fa-spin fa-2x"></i></div>
            <div class="pagination-container" id="pagination-container" style="display: none;">
                <div class="pagination-info">Hiển thị <strong id="showing-from">0</strong> - <strong id="showing-to">0</strong> trong tổng số <strong id="total-items">0</strong> sân</div>
                <div class="pagination" id="pagination-controls"></div>
            </div>
        </div>
    </div>

    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title" id="modalTitle">Chi tiết Booking</h5><button class="close" onclick="closeModal()">&times;</button></div>
            <div class="modal-body" id="modalBody"></div>
        </div>
    </div>

    <script>
        let stadiumDataStore = [], currentPage = 1, itemsPerPage = 10, filteredData = [];
        let modalCurrentPage = 1, modalItemsPerPage = 5, currentModalBookings = [];

        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date();
            document.getElementById('yearForMonthInput').value = today.getFullYear();
            document.getElementById('yearInput').value = today.getFullYear();
            const monthSelect = document.getElementById('monthInput');
            for (let i = 1; i <= 12; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = `Tháng ${i}`;
                if (i === today.getMonth() + 1) option.selected = true;
                monthSelect.appendChild(option);
            }
            document.getElementById('dateInput').valueAsDate = today;
            fetchData();
        });

        function fetchData() {
            const filterType = document.getElementById('filterType').value;
            let year, month, day;
            if (filterType === 'day') {
                const dateVal = document.getElementById('dateInput').value;
                if (!dateVal) { alert('Vui lòng chọn ngày.'); return; }
                const date = new Date(dateVal);
                year = date.getFullYear(); month = date.getMonth() + 1; day = date.getDate();
            } else if (filterType === 'month') {
                year = document.getElementById('yearForMonthInput').value; month = document.getElementById('monthInput').value;
                if (!year) { alert('Vui lòng nhập năm.'); return; }
            } else {
                year = document.getElementById('yearInput').value;
                if (!year) { alert('Vui lòng nhập năm.'); return; }
            }
            const url = `@Url.Action("GetStadiumRevenueData", "Revenue")?page=1&pageSize=100&year=${year}${month ? '&month=' + month : ''}${day ? '&day=' + day : ''}`;
            const tableBody = document.getElementById('stadium-revenue-table');
            const loadingSpinner = document.getElementById('loading-spinner');
            tableBody.innerHTML = ''; loadingSpinner.style.display = 'block'; document.getElementById('pagination-container').style.display = 'none';
            fetch(url).then(res => res.json()).then(result => {
                loadingSpinner.style.display = 'none';
                if (result.success) {
                    stadiumDataStore = result.data; filteredData = result.data; currentPage = 1;
                    renderTable(); renderPagination();
                } else {
                    alert(result.message || 'Có lỗi xảy ra.');
                    tableBody.innerHTML = `<tr><td colspan="5" style="text-align:center; color: red;">${result.message}</td></tr>`;
                }
            }).catch(err => {
                loadingSpinner.style.display = 'none'; console.error('Error fetching data:', err);
                tableBody.innerHTML = '<tr><td colspan="5" style="text-align:center; color: red;">Không thể kết nối đến máy chủ.</td></tr>';
            });
        }

        function renderTable() {
            const tableBody = document.getElementById('stadium-revenue-table');
            tableBody.innerHTML = '';
            if (filteredData.length === 0) { tableBody.innerHTML = '<tr><td colspan="5" style="text-align:center;">Không có dữ liệu.</td></tr>'; return; }
            const startIndex = (currentPage - 1) * itemsPerPage;
            const pageData = filteredData.slice(startIndex, startIndex + itemsPerPage);
            pageData.forEach((stadium, index) => {
                const globalIndex = startIndex + index;
                const row = `
                    <tr>
                        <td>${globalIndex + 1}</td>
                        <td><strong>${stadium.stadiumName}</strong></td>
                        <td><span class="badge badge-success">${stadium.completedBookingsCount} đơn</span></td>
                        <td><span class="badge badge-revenue">${new Intl.NumberFormat('vi-VN').format(stadium.totalRevenue)} VNĐ</span></td>
                        <td><button class="btn btn-sm btn-info" onclick="showDetails(${globalIndex})"><i class="fas fa-eye"></i> Xem chi tiết</button></td>
                    </tr>`;
                tableBody.innerHTML += row;
            });
        }

        function renderPagination() {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            const paginationContainer = document.getElementById('pagination-container');
            if (totalPages <= 1) { paginationContainer.style.display = 'none'; return; }
            paginationContainer.style.display = 'flex';
            const startIndex = (currentPage - 1) * itemsPerPage;
            document.getElementById('showing-from').textContent = startIndex + 1;
            document.getElementById('showing-to').textContent = Math.min(startIndex + itemsPerPage, filteredData.length);
            document.getElementById('total-items').textContent = filteredData.length;
            const paginationControls = document.getElementById('pagination-controls');
            paginationControls.innerHTML = '';
            const createBtn = (text, page, isDisabled = false, isActive = false) => {
                const btn = document.createElement('button');
                btn.innerHTML = text; btn.disabled = isDisabled;
                if (isActive) btn.classList.add('active');
                btn.onclick = () => changePage(page);
                return btn;
            };
            paginationControls.appendChild(createBtn('<i class="fas fa-chevron-left"></i>', currentPage - 1, currentPage === 1));
            for (let i = 1; i <= totalPages; i++) { paginationControls.appendChild(createBtn(i, i, false, i === currentPage)); }
            paginationControls.appendChild(createBtn('<i class="fas fa-chevron-right"></i>', currentPage + 1, currentPage === totalPages));
        }

        function changePage(page) { currentPage = page; renderTable(); renderPagination(); }

        function showDetails(index) {
            const stadium = filteredData[index];
            document.getElementById('modalTitle').textContent = `Chi tiết Booking - ${stadium.stadiumName}`;
            currentModalBookings = stadium.bookings || []; modalCurrentPage = 1;
            renderModalTable();
            document.getElementById('detailsModal').style.display = 'block';
        }

        function renderModalTable() {
            const modalBody = document.getElementById('modalBody');
            if (currentModalBookings.length === 0) { modalBody.innerHTML = '<p style="text-align: center; color: #6b7280; padding: 40px;">Không có booking nào.</p>'; return; }
            const totalPages = Math.ceil(currentModalBookings.length / modalItemsPerPage);
            const startIndex = (modalCurrentPage - 1) * modalItemsPerPage;
            const pageBookings = currentModalBookings.slice(startIndex, startIndex + modalItemsPerPage);
            let html = `
                <div style="overflow-x: auto;">
                    <table class="table">
                        <thead><tr><th></th><th>STT</th><th>Ngày tạo</th><th>Ngày đá</th><th>Trạng thái</th><th>Phương thức</th><th>Thành tiền</th><th>Tổng tiền</th></tr></thead>
                        <tbody>`;
            pageBookings.forEach((booking, idx) => {
                const globalIdx = startIndex + idx;
                const statusBadge = getStatusBadge(booking.status);
                const methodBadge = booking.monthlyBookingId ? `<span class="badge badge-monthly"><i class="fas fa-calendar-alt"></i> Theo tháng</span>` : `<span class="badge badge-daily"><i class="fas fa-calendar-day"></i> Theo ngày</span>`;
                html += `
                    <tr class="booking-row">
                        <td><i class="fas fa-chevron-right expand-icon" id="modal-expand-icon-${globalIdx}" onclick="toggleModalBookingDetails(${globalIdx})"></i></td>
                        <td>${globalIdx + 1}</td>
                        <td>${new Date(booking.createdAt).toLocaleDateString('vi-VN')}</td>
                        <td>${new Date(booking.date).toLocaleDateString('vi-VN')}</td>
                        <td>${statusBadge}</td>
                        <td>${methodBadge}</td>
                        <td>${new Intl.NumberFormat('vi-VN').format(booking.originalPrice)} VNĐ</td>
                        <td><strong>${new Intl.NumberFormat('vi-VN').format(booking.totalPrice)} VNĐ</strong></td>
                    </tr>
                    <tr class="booking-details-row" id="modal-details-row-${globalIdx}">
                        <td colspan="8"><div class="booking-details-content" id="modal-details-content-${globalIdx}"></div></td>
                    </tr>`;
            });
            html += '</tbody></table></div>';
            if (totalPages > 1) {
                html += `<div class="pagination-container" style="margin-top: 20px;"><div class="pagination-info">Hiển thị ${startIndex + 1} - ${Math.min(startIndex + modalItemsPerPage, currentModalBookings.length)} trên ${currentModalBookings.length}</div><div class="pagination" id="modal-pagination-controls"></div></div>`;
            }
            modalBody.innerHTML = html;
            if (totalPages > 1) renderModalPagination(totalPages);
        }

        function toggleModalBookingDetails(globalIndex) {
            const detailsRow = document.getElementById(`modal-details-row-${globalIndex}`);
            const icon = document.getElementById(`modal-expand-icon-${globalIndex}`);
            if (detailsRow.classList.contains('show')) {
                detailsRow.classList.remove('show'); icon.classList.remove('expanded');
            } else {
                const booking = currentModalBookings[globalIndex];
                const contentDiv = document.getElementById(`modal-details-content-${globalIndex}`);
                let detailsHtml = '<h4 style="margin-bottom:12px;">Chi tiết sân đã đặt:</h4>';
                if (booking.bookingDetails && booking.bookingDetails.length > 0) {
                    detailsHtml += `<div style="overflow-x:auto;">
                <table class="table" style="min-width: 450px;">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Sân số</th>
                            <th>Giá/giờ</th>
                            <th>Bắt đầu</th>
                            <th>Kết thúc</th>
                        </tr>
                    </thead>
                    <tbody>`;
                    booking.bookingDetails.forEach((detail, idx) => {
                        detailsHtml += `
                    <tr>
                        <td>${idx + 1}</td>
                        <td>Sân số: ${detail.courtId}</td>
                        <td>${booking.originalPrice ? new Intl.NumberFormat('vi-VN').format(booking.originalPrice) + ' VNĐ' : '-'}</td>
                        <td>${new Date(detail.startTime).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}</td>
                        <td>${new Date(detail.endTime).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}</td>
                    </tr>
                `;
                    });
                    detailsHtml += '</tbody></table></div>';
                } else {
                    detailsHtml += '<p>Không có chi tiết.</p>';
                }
                contentDiv.innerHTML = detailsHtml;
                detailsRow.classList.add('show'); icon.classList.add('expanded');
            }
        }

        function renderModalPagination(totalPages) {
            const paginationControls = document.getElementById('modal-pagination-controls');
            paginationControls.innerHTML = '';
            const createBtn = (text, page, isDisabled = false, isActive = false) => {
                const btn = document.createElement('button'); btn.innerHTML = text; btn.disabled = isDisabled;
                if (isActive) btn.classList.add('active');
                btn.onclick = () => changeModalPage(page); return btn;
            };
            paginationControls.appendChild(createBtn('<i class="fas fa-chevron-left"></i>', modalCurrentPage - 1, modalCurrentPage === 1));
            for (let i = 1; i <= totalPages; i++) { paginationControls.appendChild(createBtn(i, i, false, i === modalCurrentPage)); }
            paginationControls.appendChild(createBtn('<i class="fas fa-chevron-right"></i>', modalCurrentPage + 1, modalCurrentPage === totalPages));
        }

        function changeModalPage(page) { modalCurrentPage = page; renderModalTable(); }

        function getStatusBadge(status) {
            const s = status.toLowerCase();
            if (s === 'completed') return `<span class="badge badge-success"><i class="fas fa-check-circle"></i> Hoàn thành</span>`;
            if (s === 'accepted') return `<span class="badge badge-info"><i class="fas fa-thumbs-up"></i> Đã chấp nhận</span>`;
            if (s === 'cancelled') return `<span class="badge badge-danger"><i class="fas fa-times-circle"></i> Đã hủy</span>`;
            return `<span class="badge badge-warning"><i class="fas fa-clock"></i> Đang chờ</span>`;
        }

        function closeModal() { document.getElementById('detailsModal').style.display = 'none'; }
        function toggleFilterInputs() {
            const type = document.getElementById('filterType').value;
            document.getElementById('dayFilter').style.display = type === 'day' ? 'block' : 'none';
            document.getElementById('monthFilter').style.display = type === 'month' ? 'block' : 'none';
            document.getElementById('commonYearFilter').style.display = type === 'month' ? 'block' : 'none';
            document.getElementById('yearFilter').style.display = type === 'year' ? 'block' : 'none';
        }
        window.onclick = e => { if (e.target == document.getElementById('detailsModal')) closeModal(); };
    </script>
</body>
</html>