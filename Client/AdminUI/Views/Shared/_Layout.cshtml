<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Quản trị Sportivey</title>

    <!-- External Dependencies -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <link href="~/css/layout_admin-dashboard.css" rel="stylesheet" />
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'admin-primary': '#1e40af',
                        'admin-secondary': '#3b82f6',
                        'admin-accent': '#06b6d4',
                        'admin-success': '#10b981',
                        'admin-warning': '#f59e0b',
                        'admin-error': '#ef4444',
                        'admin-dark': '#1f2937',
                        'admin-light': '#f8fafc',
                    }
                }
            }
        }
    </script>

    @await RenderSectionAsync("Styles", required: false)
</head>

<body class="bg-gray-50 font-sans antialiased">
    <!-- Toast Container -->
    <div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <!-- Logout Confirmation Modal -->
    <div id="logoutModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-xl shadow-xl p-6 max-w-md w-full mx-4">
            <div class="flex items-center space-x-3 mb-4">
                <div class="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
                    <i class="ri-logout-box-line text-2xl text-red-600"></i>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Xác nhận đăng xuất</h3>
                    <p class="text-gray-500">Bạn có chắc chắn muốn đăng xuất khỏi hệ thống?</p>
                </div>
            </div>
            <div class="flex justify-end space-x-3">
                <button id="cancelLogout" class="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                    Hủy bỏ
                </button>
                <button id="confirmLogout" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                    <i class="ri-logout-box-line mr-2"></i>
                    Đăng xuất
                </button>
            </div>
        </div>
    </div>

    <!-- Mobile Menu Overlay -->
    <div id="mobileMenuOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden"></div>

    <div class="flex h-screen bg-gray-50">
        <!-- Sidebar -->
        <aside id="sidebar" class="fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-xl transform -translate-x-full transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0">
            <div class="flex items-center justify-between h-16 px-6 bg-admin-primary">
                <div class="flex items-center space-x-2">
                    <div class="w-8 h-8 bg-white rounded-lg flex items-center justify-center">
                        <i class="ri-dashboard-3-line text-admin-primary text-xl"></i>
                    </div>
                    <h1 class="text-white text-xl font-bold">Sportivey</h1>
                </div>
                <button id="closeSidebar" class="text-white lg:hidden">
                    <i class="ri-close-line text-2xl"></i>
                </button>
            </div>

            <nav class="mt-6">
                <div class="px-6 mb-4">
                    <h3 class="text-gray-500 text-xs font-semibold uppercase tracking-wider">Quản Lý Chính</h3>
                </div>

                <ul class="space-y-1 px-3">
                    <li>
                        <a href="/Admin/Dashboard" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")" data-section="dashboard">
                            <i class="ri-dashboard-line"></i>
                            <span>Tổng Quan</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                    <li>
                        <a asp-controller="Account" asp-action="UserManagement" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Users" ? "active" : "")" data-section="users">
                            <i class="ri-user-line"></i>
                            <span>Quản Lý Người Dùng</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Users")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                    <li>
                        <a href="/Revenue/Revenue" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Revenue" ? "active" : "")" data-section="revenue">
                            <i class="ri-money-dollar-circle-line"></i>
                            <span>Quản Lý Doanh Thu</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Revenue")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                    <li>
                        <a href="/Stadium/StadiumAdmin" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "StadiumAdmin" ? "active" : "")" data-section="venues">
                            <i class="ri-building-line"></i>
                            <span>Quản Lý Nhà Thi Đấu</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Venues")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                    <li>
                        <a href="@Url.Action("DiscountList", "Discount")" class="nav-link @(ViewContext.RouteData.Values["controller"].ToString() == "Discount" && ViewContext.RouteData.Values["action"].ToString() == "DiscountList" ? "active" : "")">
                            <i class="ri-coupon-line"></i>
                            <span>Quản Lý Mã Giảm Giá</span>
                        </a>
                    </li>
                    <li>
                        <a asp-controller="Feedback"
                           asp-action="Feedback"
                           class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Feedback" ? "active" : "")"
                           data-section="feedback">
                            <i class="ri-feedback-line"></i>
                            <span>Quản Lý Feedback</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Feedback")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>

                    </li>
                    <li>
                        <a asp-controller="Chat" asp-action="Chat"
                           class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Chat" ? "active" : "")"
                           data-section="chat">
                            <i class="ri-chat-3-line"></i>
                            <span>Quản Lý Chat</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Chat")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>


                    <li>
                        <a href="/Admin/Notifications" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Notifications" ? "active" : "")" data-section="notifications">
                            <i class="ri-notification-line"></i>
                            <span>Quản Lý Thông Báo</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Notifications")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                </ul>

                <div class="px-6 mt-8 mb-4">
                    <h3 class="text-gray-500 text-xs font-semibold uppercase tracking-wider">Hệ Thống</h3>
                </div>

                <ul class="space-y-1 px-3">
                    <li>
                        <a href="/Admin/Settings" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Settings" ? "active" : "")" data-section="settings">
                            <i class="ri-settings-3-line"></i>
                            <span>Cài Đặt</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Settings")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                    <li>
                        <a href="/Admin/Logs" class="nav-item @(ViewContext.RouteData.Values["action"]?.ToString() == "Logs" ? "active" : "")" data-section="logs">
                            <i class="ri-file-list-3-line"></i>
                            <span>Nhật Ký Hệ Thống</span>
                            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Logs")
                            {
                                <div class="nav-indicator"></div>
                            }
                        </a>
                    </li>
                </ul>
            </nav>

            <!-- User Profile -->
            <div class="absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-admin-primary rounded-full flex items-center justify-center">
                        <i class="ri-user-line text-white"></i>
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-900 truncate">@User.Identity.Name</p>
                        <p class="text-xs text-gray-500">Quản trị viên</p>
                        <p class="text-xs text-gray-400">Trực tuyến lúc <span id="loginTime">08:03</span></p>
                    </div>
                    <button class="text-gray-400 hover:text-red-600 transition-colors p-1 rounded-md hover:bg-red-50" onclick="showLogoutModal()" title="Đăng xuất">
                        <i class="ri-logout-box-line text-lg"></i>
                    </button>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <div class="flex-1 flex flex-col overflow-hidden lg:ml-0">
            <!-- Top Bar -->
            <header class="bg-white shadow-sm border-b border-gray-200">
                <div class="flex items-center justify-between h-16 px-6">
                    <div class="flex items-center">
                        <button id="menuToggle" class="text-gray-500 hover:text-gray-600 lg:hidden">
                            <i class="ri-menu-line text-2xl"></i>
                        </button>
                        <h1 id="pageTitle" class="ml-4 lg:ml-0 text-2xl font-bold text-gray-900">@ViewData["Title"]</h1>
                    </div>

                    <div class="flex items-center space-x-4">
                        <!-- Time Display -->
                        <div class="hidden md:flex items-center text-sm text-gray-500">
                            <i class="ri-time-line mr-1"></i>
                            <span id="currentTime">04/09/2025 08:03</span>
                        </div>

                        <!-- Notifications -->
                        <div class="relative">
                            <button class="text-gray-500 hover:text-gray-600 relative p-2 rounded-lg hover:bg-gray-100">
                                <i class="ri-notification-3-line text-xl"></i>
                                <span class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
                            </button>
                        </div>

                        <!-- Quick Actions -->
                        <button class="px-4 py-2 bg-admin-primary text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="ri-add-line mr-2"></i>
                            Thêm Mới
                        </button>

                        <!-- Logout Button -->
                        <button onclick="showLogoutModal()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                            <i class="ri-logout-box-line mr-2"></i>
                            Đăng Xuất
                        </button>
                    </div>
                </div>
            </header>

            <!-- Content Area -->
            <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50">
                @RenderBody()
            </main>
        </div>
    </div>

    <!-- Global JavaScript -->
    <script>
        'use strict';

        // Global Admin Layout Module
        window.AdminLayout = (function () {
            // Toast System
            function showToast(message, type = "success", duration = 4000) {
                const icons = {
                    success: '<i class="ri-checkbox-circle-line text-xl"></i>',
                    error: '<i class="ri-close-circle-line text-xl"></i>',
                    warning: '<i class="ri-alert-line text-xl"></i>',
                    info: '<i class="ri-information-line text-xl"></i>'
                };

                const toast = document.createElement("div");
                toast.className = `flex items-center space-x-3 bg-white border-l-4 border-${type === 'success' ? 'green' : type === 'error' ? 'red' : type === 'warning' ? 'yellow' : 'blue'}-500 p-4 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300`;
                toast.innerHTML = `
                            ${icons[type] || ''}
                            <span class="flex-1 text-gray-900">${message}</span>
                            <button class="text-gray-400 hover:text-gray-600" onclick="this.parentElement.remove()">
                                <i class="ri-close-line"></i>
                            </button>
                        `;

                const container = document.getElementById("toastContainer");
                if (container) {
                    container.appendChild(toast);
                    setTimeout(() => toast.classList.remove('translate-x-full'), 100);

                    if (duration > 0) {
                        setTimeout(() => {
                            if (toast.parentElement) {
                                toast.classList.add('translate-x-full');
                                setTimeout(() => {
                                    if (toast.parentElement) {
                                        toast.remove();
                                    }
                                }, 300);
                            }
                        }, duration);
                    }
                }
            }

            // Update current time
            function updateTime() {
                const now = new Date();
                const timeString = now.toLocaleString('vi-VN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                const timeElement = document.getElementById('currentTime');
                if (timeElement) {
                    timeElement.textContent = timeString;
                }
            }

            // Logout Functions
            function showLogoutModal() {
                document.getElementById('logoutModal').classList.remove('hidden');
            }

            function hideLogoutModal() {
                document.getElementById('logoutModal').classList.add('hidden');
            }

            function performLogout() {
                hideLogoutModal();
                showToast('Đang đăng xuất khỏi hệ thống...', 'info');

                setTimeout(() => {
                    // Call logout endpoint
                    $.ajax({
                        url: '/Account/Logout',
                        type: 'GET',
                        success: function () {
                            showToast('Đã đăng xuất thành công!', 'success', 2000);
                            setTimeout(() => {
                                window.location.href = '/Account/Login';
                            }, 2000);
                        },
                        error: function () {
                            showToast('Có lỗi xảy ra khi đăng xuất!', 'error');
                        }
                    });
                }, 1500);
            }

            // Mobile Menu Functions
            function toggleMobileMenu() {
                const sidebar = document.getElementById('sidebar');
                const overlay = document.getElementById('mobileMenuOverlay');

                sidebar.classList.toggle('-translate-x-full');
                overlay.classList.toggle('hidden');
            }

            function closeMobileMenu() {
                const sidebar = document.getElementById('sidebar');
                const overlay = document.getElementById('mobileMenuOverlay');

                sidebar.classList.add('-translate-x-full');
                overlay.classList.add('hidden');
            }

            // Initialize Event Listeners
            function initializeEventListeners() {
                // Mobile menu toggle
                const menuToggle = document.getElementById('menuToggle');
                if (menuToggle) {
                    menuToggle.addEventListener('click', toggleMobileMenu);
                }

                // Close sidebar button
                const closeSidebar = document.getElementById('closeSidebar');
                if (closeSidebar) {
                    closeSidebar.addEventListener('click', closeMobileMenu);
                }

                // Mobile menu overlay
                const overlay = document.getElementById('mobileMenuOverlay');
                if (overlay) {
                    overlay.addEventListener('click', closeMobileMenu);
                }

                // Logout modal events
                const cancelLogout = document.getElementById('cancelLogout');
                const confirmLogout = document.getElementById('confirmLogout');

                if (cancelLogout) {
                    cancelLogout.addEventListener('click', hideLogoutModal);
                }

                if (confirmLogout) {
                    confirmLogout.addEventListener('click', performLogout);
                }

                // Window resize handler
                window.addEventListener('resize', function () {
                    if (window.innerWidth >= 1024) {
                        closeMobileMenu();
                    }
                });

                // Update time every minute
                setInterval(updateTime, 60000);
                updateTime(); // Initial call

                // Set login time
                document.getElementById('loginTime').textContent = '08:03';
            }

            // Initialize Layout
            function init() {
                initializeEventListeners();
                console.log('Admin Layout initialized successfully');
            }

            // Public API
            return {
                init: init,
                showToast: showToast,
                showLogoutModal: showLogoutModal,
                hideLogoutModal: hideLogoutModal
            };
        })();

        // Make functions globally available
        window.showToast = function (message, type, duration) {
            return window.AdminLayout.showToast(message, type, duration);
        };

        window.showLogoutModal = function () {
            window.AdminLayout.showLogoutModal();
        };

        window.hideLogoutModal = function () {
            window.AdminLayout.hideLogoutModal();
        };

        // Initialize when document is ready
        $(document).ready(function () {
            if (window.AdminLayout) {
                window.AdminLayout.init();
            }
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>