<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Nền tảng đặt sân thể thao và tìm đồng đội chơi thể thao">
    <title>Nền Tảng Đặt Sân Thể Thao</title>

    <!-- Preload critical resources -->
    <link rel="preload" href="~/css/FindTeam/FindTeam.css" as="style">
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap" as="style">

    <!-- Stylesheets -->
    <link rel="stylesheet" href="~/css/FindTeam/FindTeam.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/quill-emoji/dist/quill-emoji.css">
    <script src="https://cdn.jsdelivr.net/npm/quill-emoji/dist/quill-emoji.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/intro.js/minified/introjs.min.css">
    <script src="https://unpkg.com/intro.js/minified/intro.min.js"></script>
    <link href="~/css/FindTeam/tutorial.css" rel="stylesheet" />

    <!-- SEO and Meta -->
    <meta name="robots" content="index, follow">
    <meta name="author" content="Sports Platform Team">
</head>
<body>
    <!-- Skip to content for accessibility -->
    <a href="#main-content" class="skip-link">Chuyển đến nội dung chính</a>

    <!-- Hero Section -->
    <section class="hero" aria-label="Giới thiệu nền tảng">
        <div class="hero-background" aria-hidden="true"></div>
        <div class="hero-overlay" aria-hidden="true"></div>
        <div class="hero-content">
            <div class="hero-text">
                <h1 class="hero-title">Khám Phá Các Sân Thể Thao Cao Cấp</h1>
                <p class="hero-subtitle">Kết nối với các vận động viên, đặt sân thể thao đẳng cấp thế giới và nâng tầm trò chơi của bạn với nền tảng thể thao toàn diện.</p>
                <div class="hero-actions">
                    <a class="btn btn-primary btn-large" href="#main-list" aria-label="Khám phá danh sách sân thể thao">
                        Khám Phá Sân
                    </a>
                    <button class="btn btn-secondary btn-large" onclick="startGuide()" type="button" aria-label="Xem video hướng dẫn cách hoạt động">
                        <i class="ri-play-circle-line" aria-hidden="true"></i>
                        Cách Hoạt Động
                    </button>
                </div>
            </div>
            <div class="hero-stats" aria-label="Thống kê nền tảng">
                <div class="stat-item">
                    <div class="stat-number" aria-label="500 sân cao cấp">500+</div>
                    <div class="stat-label">Sân Cao Cấp</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" aria-label="10000 người chơi hoạt động">10K+</div>
                    <div class="stat-label">Người Chơi Hoạt Động</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" aria-label="50 môn thể thao">50+</div>
                    <div class="stat-label">Môn Thể Thao</div>
                </div>
            </div>
        </div>
    </section>

    <!-- Main Content -->
    <main class="main-content" id="main-content">
        <div class="container">
            <!-- Search and Filter Header -->
            <div class="main-header">
                <div class="search-header">
                    <div class="search-info" data-intro="Ở đây sẽ hiển thị số lượng bài đăng được tìm thấy" data-step="4">
                        <h2 class="page-title">Tìm Kiếm Đồng Đội</h2>
                        <p class="results-count" id="results-count">Hiển thị <span class="current-count" id="post-count"></span> kết quả</p>
                    </div>
                    <button class="btn btn-secondary" id="mobile-filter-btn" type="button" aria-label="Mở bộ lọc" data-intro="Bạn sẽ sử dụng bộ lọc ở đây" data-step="5">
                        <i class="ri-filter-3-line" aria-hidden="true"></i>
                        Bộ Lọc
                    </button>

                </div>

                <!-- Mobile Filter Toggle -->
                @* <div class="mobile-filter-toggle">
               

                    <!-- Sort Options -->
                    <div class="sort-options">
                        <label for="sort-select" class="sort-label">Sắp xếp:</label>
                        <select id="sort-select" class="sort-select" aria-label="Sắp xếp kết quả">
                            <option value="newest">Mới nhất</option>
                            <option value="oldest">Cũ nhất</option>
                            <option value="most-needed">Cần nhiều người nhất</option>
                            <option value="least-needed">Cần ít người nhất</option>
                            <option value="nearest-date">Gần nhất</option>
                        </select>
                    </div>
                </div> *@
            </div>
            <input type="hidden" id="senderId" value="@ViewBag.UserId" />
            <input type="hidden" id="senderName" value="@ViewBag.UserName" />

            <div class="content-grid">
                <!-- Filter Sidebar -->
                <form id="filter-form" data-intro="Bạn sẽ sử dụng bộ lọc ở đây" data-step="5">
                    <aside class="sidebar" id="filter-sidebar" role="complementary" aria-label="Bộ lọc tìm kiếm">
                        <div class="sidebar-header">
                            <h3 class="sidebar-title">
                                <i class="ri-filter-3-line" aria-hidden="true"></i>
                                Bộ Lọc Kết Quả
                            </h3>
                            <div class="sidebar-actions">
                                <button class="clear-filters" type="button" aria-label="Xóa tất cả bộ lọc">
                                    <i class="ri-refresh-line" aria-hidden="true"></i>
                                    Xóa Tất Cả
                                </button>
                                <button class="close-filter" id="close-filter" type="button" aria-label="Đóng bộ lọc">
                                    <i class="ri-close-line " id="close-icon" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Loại Thể Thao -->
                        <div class="filter-section" data-intro="Bạn có thể chọn loại thể thao bạn muốn chơi" data-step="6">
                            <button class="filter-header"
                                    data-target="sport-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="sport-filter">
                                <h4 class="filter-title">Loại Thể Thao</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="sport-filter" role="group" aria-labelledby="sport-filter-title">
                                <div class="filter-options">
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sports" class="custom-checkbox sport-filter" value="Bóng Đá" checked>
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng Đá</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sports" class="custom-checkbox sport-filter" value="Bóng Rổ">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng Rổ</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sports" class="custom-checkbox sport-filter" value="Tennis">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Tennis</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sports" class="custom-checkbox sport-filter" value="Cầu Lông">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Cầu Lông</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sports" class="custom-checkbox sport-filter" value="Bóng Chuyền">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng Chuyền</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sports" class="custom-checkbox sport-filter" value="Đa Môn">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Đa Môn</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Chọn Ngày -->
                        <div class="filter-section" data-intro="Bạn có thể chọn ngày bạn muốn chơi" data-step="7">
                            <button class="filter-header"
                                    data-target="date-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="date-filter">
                                <h4 class="filter-title">Chọn Ngày</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="date-filter">
                                <div class="date-input-wrapper">
                                    <i class="ri-calendar-line" aria-hidden="true"></i>
                                    <input type="date"
                                           name="play_date"
                                           class="date-input"
                                           id="play-date-filter"
                                           aria-label="Chọn ngày chơi">
                                </div>
                                <div class="quick-date-options">
                                    <button type="button" class="quick-date-btn" data-days="0">Hôm nay</button>
                                    <button type="button" class="quick-date-btn" data-days="1">Mai</button>
                                    <button type="button" class="quick-date-btn" data-days="7">Tuần sau</button>
                                    <button type="button" class="quick-date-btn" data-days="30">Tháng sau</button>
                                </div>
                            </div>
                        </div>

                        <!-- Thời Gian -->
                        <div class="filter-section" data-intro="Chọn thời gian bạn muốn chơi" data-step="8">
                          
                            <button class="filter-header"
                                    data-target="time-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="time-filter">
                                <h4 class="filter-title">Thời Gian Chơi</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="time-filter" role="group" aria-label="Chọn giờ chơi">
                                <div class="time-grid">
                                    <input type="time" class="time-slot" name="play_time" value="" />
                                </div>
                            </div>
                        </div>

                        <!-- Khoảng Giá -->
                        <div class="filter-section">
                            <button class="filter-header"
                                    data-target="price-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="price-filter">
                                <h4 class="filter-title">Khoảng Giá</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="price-filter">
                                <div class="price-range">
                                    <input type="range"
                                           name="price_max"
                                           min="0"
                                           max="500000"
                                           value="250000"
                                           step="10000"
                                           class="range-slider"
                                           id="price-range-slider"
                                           aria-label="Khoảng giá từ 0 đến 500.000 VNĐ">
                                    <div class="price-labels">
                                        <span>0đ</span>
                                        <span class="current-price" id="current-price">250.000đ/giờ</span>
                                        <span>500.000đ</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Số Người Cần -->
                        <div class="filter-section">
                            <button class="filter-header"
                                    data-target="players-filter"
                                    type="button"
                                    aria-expanded="false"
                                    aria-controls="players-filter">
                                <h4 class="filter-title">Số Người Cần</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content" id="players-filter">
                                <div class="players-range">
                                    <label for="min-players" class="range-label">Tối thiểu:</label>
                                    <input type="number" id="min-players" name="min_players" min="1" max="20" value="1" class="number-input">

                                    <label for="max-players" class="range-label">Tối đa:</label>
                                    <input type="number" id="max-players" name="max_players" min="1" max="20" value="10" class="number-input">
                                </div>
                            </div>
                        </div>


                        <!-- Địa Điểm -->
                        <div class="filter-section">
                            <button class="filter-header"
                                    data-target="location-filter"
                                    type="button"
                                    aria-expanded="false"
                                    aria-controls="location-filter">
                                <h4 class="filter-title">Địa Điểm</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content" id="location-filter">
                                <div class="location-input-wrapper">
                                    <i class="ri-map-pin-line" aria-hidden="true"></i>
                                    <input type="text"
                                           name="location"
                                           placeholder="Nhập địa điểm"
                                           class="location-input"
                                           id="location-search"
                                           aria-label="Tìm kiếm địa điểm"
                                           autocomplete="off">
                                    <button type="button" class="location-clear" aria-label="Xóa địa điểm">
                                        <i class="ri-close-line" aria-hidden="true"></i>
                                    </button>
                                </div>
                                <div class="popular-locations">
                                    <h5 class="popular-title">Địa điểm phổ biến:</h5>
                                    <div class="location-tags">
                                        <button type="button" class="location-tag" data-location="Quận 1">Quận 1</button>
                                        <button type="button" class="location-tag" data-location="Quận 3">Quận 3</button>
                                        <button type="button" class="location-tag" data-location="Quận 7">Quận 7</button>
                                        <button type="button" class="location-tag" data-location="Thủ Đức">Thủ Đức</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Nút hành động của Form -->
                        <div class="filter-actions">
                            <button class="btn btn-primary btn-full" type="submit">
                                <i class="ri-check-line" aria-hidden="true"></i>
                                Áp Dụng Bộ Lọc
                            </button>
                            <button class="btn btn-secondary btn-outline btn-full" type="reset">
                                <i class="ri-refresh-line" aria-hidden="true"></i>
                                Đặt Lại
                            </button>
                        </div>
                    </aside>
                </form>

                <!-- Find Players Section -->
                <section class="players-section" id="main-list" role="main" aria-label="Danh sách tìm đồng đội">
                    <div class="section-header">
                        <div class="section-info">
                            <h2 class="section-title">Tìm Đồng Đội</h2>
                            <p class="section-subtitle">Kết nối với các vận động viên và tham gia các trận đấu thú vị</p>
                        </div>
                        <div class="section-actions">
                            <a href="/FindTeam/TeamPostManage" class="btn btn-secondary" data-intro="Nhấn để xem bài viết bạn đã đăng" data-step="3" aria-label="Quản lý bài viết của tôi">
                                <i class="ri-file-list-3-line" aria-hidden="true"></i>
                                Bài Viết Của Tôi
                            </a>
                            <a href="/FindTeam/JoinedTeam" class="btn btn-secondary" data-intro="Nhấn để tạo xem những bài đăng bạn đã từng tham gia" data-step="2" aria-label="Quản lý bài viết của tôi">
                                <i class="ri-file-list-3-line" aria-hidden="true"></i>
                                Nhóm đã tham gia
                            </a>

                            <button id="create-post" onclick="openCreate()" class="btn btn-create-post" type="button" data-intro="Nhấn để tạo bài đăng mới" data-step="1" aria-label="Tạo bài viết tìm đồng đội mới">
                                <i class="ri-add-line" aria-hidden="true"></i>
                                Tạo Bài Viết
                            </button>
                        </div>
                    </div>

                    <!-- Loading State -->
                    <div class="loading-state" id="loading-state" style="display: none;" aria-live="polite">
                        <div class="loading-spinner">
                            <i class="ri-loader-2-line" aria-hidden="true"></i>
                            <p>Đang tải dữ liệu...</p>
                        </div>
                    </div>

                    <!-- Players Grid -->
                    <div class="players-grid" id="players-grid" role="list" aria-label="Danh sách bài viết tìm đồng đội">
                        <!-- Player cards will be dynamically loaded here -->
                    </div>

                    <!-- Load More -->
                    <div id="load-more-render"></div>
                   

                    <!-- Empty State -->
                    <div class="empty-state" id="empty-state" style="display: none;">
                        <div class="empty-content">
                            <i class="ri-search-line" aria-hidden="true"></i>
                            <h3>Không tìm thấy kết quả</h3>
                            <p>Thử điều chỉnh bộ lọc hoặc tạo bài viết mới để tìm đồng đội</p>
                            <button class="btn btn-primary" type="button" onclick="findTeamManager.showCreatePostModal()">
                                <i class="ri-add-line" aria-hidden="true"></i>
                                Tạo Bài Viết Đầu Tiên
                            </button>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </main>
    

    <script>
        let skip = 0;
        let pageSize = 0;

        //hướng dẫn người chơi
                 function startGuide() {
            introJs().setOptions({
              nextLabel: 'Tiếp ➡️',
              prevLabel: '⬅️ Quay lại',
              skipLabel: 'x',
              doneLabel: 'Hoàn tất',
              tooltipPosition: 'auto', // Tự động chọn vị trí tốt nhất
              positionPrecedence: ['bottom', 'top', 'right', 'left'], // Ưu tiên vị trí
              disableInteraction: false, // Cho phép tương tác với element
              showStepNumbers: false, // Ẩn số step
              scrollToElement: true, // Tự động scroll đến element
              scrollPadding: 30, // Khoảng cách scroll
              exitOnOverlayClick: false, // Không thoát khi click overlay
              exitOnEsc: true, // Cho phép thoát bằng ESC
              overlayOpacity: 0.7,
              helperElementPadding: 10, // Khoảng cách highlight
              showButtons: true
            }).start();
        }

        //main 
        $(document).ready(function() {

            sessionStorage.clear();
            showLoading();
   
            loadPost();

            setupSearchListener();
        let today = new Date(); // Lấy ngày hiện tại

        let dd = String(today.getDate()).padStart(2, '0');
        let mm = String(today.getMonth() + 1).padStart(2, '0');
        let yyyy = today.getFullYear();

        // Format chuẩn cho input date (yyyy-MM-dd)
        let formatted = `${yyyy}-${mm}-${dd}`;

        console.log(formatted); // 👉 "2025-09-21"

        // Gán min vào input
        document.getElementById("play-date-filter").setAttribute("min", formatted);


        });
                 // SỬA LẠI THEO CÁCH NÀY
        // Gắn sự kiện vào #load-more-render, là phần tử cha không bị xóa.
        // Phần tử này sẽ lắng nghe sự kiện click từ phần tử con có id là #load-more-btn.
        $('#load-more-render').on('click', '#load-more-btn', function() {
            console.log('Sự kiện click đã được nhận!');
            showLoading();
            loadMoreLogic();
            window.scrollTo(0, document.body.scrollHeight);
        });



        // logic cho loadmore
        function loadMoreLogic(){
             
                            console.log('Button clicked!');

                            var count = sessionStorage.getItem('count') || 0;
                            var minTop = 0;
                            skip += 6;

                            if (skip + 6 > count ){
                                minTop = skip - count; // Giảm skip nếu vượt quá số lượng
                                renderLoadMore(0)
                            }else if(skip == count){
                                renderLoadMore(0);
                            }
                            sessionStorage.setItem('skip', skip);
                            sessionStorage.setItem('currentUrl', `&top = 6 &skip = ${skip}`);
                            console.log('URL:', count);
                            loadPost();                        
        }

        // filter and search
                function setupSearchListener() {
            const filterForm = document.getElementById('filter-form');

            if (filterForm) {
                filterForm.addEventListener('submit', function (event) {
                    // Ngăn chặn hành vi gửi form mặc định
                    event.preventDefault();

                    // Hiển thị trạng thái tải (nếu có)
                    // showLoading();

                    // Thu thập dữ liệu từ các trường của form
                    const formData = new FormData(filterForm);
                    const searchParams = {};

                    // Lấy tất cả các checkbox 'sports' đã chọn
                    searchParams.sports = formData.getAll('sports');

                    // Lặp qua các trường còn lại và thêm vào đối tượng searchParams
                    formData.forEach((value, key) => {
                        // Bỏ qua 'sports' vì đã được xử lý và chỉ thêm các trường có giá trị
                        if (key !== 'sports' && value) {
                            searchParams[key] = value;
                        }
                    });

                    // tạo seach cho odata
                    let url = ''; // Mặc định lấy 6 bản ghi đầu tiên

                    if (searchParams.sports && searchParams.sports.length > 0) {
                        const sportsFilter = searchParams.sports.map(sport => `SportType eq '${sport}'`).join(' or ');
                        url += `and ${sportsFilter} `
                    }
                    if (searchParams.play_date) {
                        url += `and PlayDate eq ${searchParams.play_date} `;
                    }
                    if (searchParams.play_time) {
                        url += `and TimePlay eq ${searchParams.play_time} `;
                    }
                    if (searchParams.price_max) {
                        url += `and PricePerPerson le ${searchParams.price_max} `;
                    }
                    if (searchParams.min_players) {
                        url += `and NeededPlayers ge ${searchParams.min_players} `;
                    }
                    if (searchParams.max_players) {
                        url += `and NeededPlayers le ${searchParams.max_players} `;
                    }
                    if (searchParams.location) {
                        url += `and contains(Location, '${searchParams.location} ')`;
                    }

                    url += '&top=6&skip=0';

                    console.log('Đang gửi dữ liệu tìm kiếm đến server:', searchParams);

                    // Gửi yêu cầu AJAX với dữ liệu đã được sửa
                    $.ajax({
                        url: '/FindTeam/GetAllAndSearch',
                        type: 'GET',
                        data: { url: url },

                        success: function(response) {
                            // Ẩn trạng thái tải
                            hideLoading();

                            // Xử lý trường hợp không có kết quả
                            if (response.message === 404 || !response.teamPosts || response.teamPosts.length === 0) {
                                $('#players-grid').html(''); // Xóa kết quả cũ
                                $('#empty-state').show();    // Hiển thị thông báo rỗng
                                renderLoadMore(0);           // Ẩn nút "Xem thêm"
                                $('#post-count').text('0');  // Cập nhật số lượng
                                return;
                            }

                            // Nếu có kết quả, ẩn thông báo rỗng
                            $('#empty-state').hide();

                            // Cập nhật số lượng kết quả
                            $('#post-count').text(response.totalCount || 0);

                            // Hiển thị hoặc ẩn nút "Xem thêm"
                            if (response.totalCount > 6) { // Giả sử mỗi trang có 6 bài
                                renderLoadMore(1);
                            } else {
                                renderLoadMore(0);
                            }

                            // Lưu tổng số lượng vào sessionStorage
                            sessionStorage.setItem('count', response.totalCount || 0);

                            // Vẽ lại danh sách bài đăng
                            renderPosts(response.teamPosts, response.userNames, response.hidden);
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            hideLoading();
                            console.error('Lỗi khi tải bài đăng:', textStatus, errorThrown);
                            // Hiển thị thông báo lỗi cho người dùng tại đây
                            $('#empty-state').show();
                        }
                    });
                });
            }

            // Xử lý nút "Đặt Lại"
            const resetButton = filterForm.querySelector('button[type="reset"]');
            if (resetButton) {
                resetButton.addEventListener('click', function() {
                    console.log('Biểu mẫu đã được đặt lại.');
                    // Tùy chọn: có thể kích hoạt lại một tìm kiếm trống để hiển thị tất cả kết quả
                    // filterForm.submit();
                });
            }
        }

        // xem thanh cuộn đang ở post nào 
        function getCurrentScrollPosition() {
                    const sections = document.querySelectorAll("div[id]");

        window.addEventListener("scroll", () => {
          let currentId = "";

          sections.forEach(section => {
            const rect = section.getBoundingClientRect();
            // Nếu phần tử này chiếm từ trên xuống ít nhất 100px trong viewport thì coi như đang active
            if (rect.top <= 100 && rect.bottom >= 100) {
              currentId = section.id;
            }
          });

          if (currentId) {
            console.log("Đang ở:", currentId);
            // Bạn có thể update menu active ở đây
            // document.querySelector(".menu .active")?.classList.remove("active");
            // document.querySelector(`[href="#${currentId}"]`).classList.add("active");
          }
        });

        }

        //render load more
        function renderLoadMore(status){
            const html = `
                <div class="load-more" id="load-more-section">
                    <button class="btn btn-outline-primary btn-load-more"id="load-more-btn" type="button" aria-label="Tải thêm bài viết">
                        <i class="ri-loader-2-line" aria-hidden="true"></i>
                        Tải Thêm
                    </button>
                </div>
            `;
            if(status === 1){
                            $('#load-more-render').html(html);
            }else if(status === 0){
                            $('#load-more-render').remove();
            }
        }


        function loadPost(){
            let url = sessionStorage.getItem('currentUrl');
            console.log('Load URL:', url);
            if(url == null){
                url = `&top = 6 &skip = 0`;
            }
            $.ajax({
                url: '/FindTeam/GetAllAndSearch',
                type: 'GET',
                data: { url: url },
                success: function(response) {
                    // kiểm tra xem có data không
                    if(response.message === 404){
                        $('#players-grid').html('');
                        $('#empty-state').show();
                        renderLoadMore(0);
                        hideLoading();
                        return;
                    }
                    $('#post-count').text(response.totalCount || 0);
                    if(response.totalCount > 6){
                        console.log("dax");
                        renderLoadMore(1);
                    }
                    // count session
                    sessionStorage.setItem('count', response.totalCount || 0);
                  renderPosts(response.teamPosts, response.userNames, response.hidden);

                    // Update results count
                    hideLoading();
                    // Hide loading state

                },
                error: function() {
                    console.error('Error loading posts');
                }
            });
        }
        // Show loading state
        function showLoading(){
            $('#loading-state').show();
            $('#players-grid').hide();
            $('#empty-state').hide();
  
        }
        // Hide loading state
        function hideLoading(){
            $('#loading-state').hide();
            $('#players-grid').show();
       
        }
        // Render posts dynamically
                 // hiện nút xem thêm khi quá dài
        function setupSeeMoreButtons(id) {
            // Sửa lỗi: Sử dụng backticks (`) cho template string để nội suy biến `id`
            const gameDesc = document.getElementById(`gameDesc-${id}`);
            const seeMore = document.getElementById(`seeMore-${id}`);

            // Kiểm tra xem các element có tồn tại không trước khi thao tác
            if (!gameDesc || !seeMore) {
                return;
            }

            // Check nếu có text bị cắt thì mới hiện "xem thêm"
            if (gameDesc.scrollHeight > gameDesc.clientHeight) {
                seeMore.style.display = "inline";
            }

            seeMore.addEventListener("click", () => {
                gameDesc.style.display = "block"; // bỏ -webkit-box
                gameDesc.style.webkitLineClamp = "unset";
                gameDesc.style.overflow = "visible";
                seeMore.style.display = "none"; // ẩn "xem thêm" sau khi bấm
            });
        }

        function renderPosts(post, profile, hidden) {
            if (!post || post.length === 0) {
                $('#players-grid').html('');
                return;
            }
            console.log(profile);
            console.log(post);
            console.log(post[0].createdBy);
            console.log(hidden);
              // Giả sử các hàm này đã được định nghĩa ở nơi khác trong code của bạn
            const formatDate = (dateStr) => new Date(dateStr).toLocaleDateString('vi-VN');
                     const formatDateTimeWithDay = (dateTime) => {
          const d = new Date(dateTime);

          const day = String(d.getDate()).padStart(2, '0');        // 01–31
          const month = String(d.getMonth() + 1).padStart(2, '0'); // 01–12
          const year = d.getFullYear();

          const hours = String(d.getHours()).padStart(2, '0');     // 00–23
          const minutes = String(d.getMinutes()).padStart(2, '0'); // 00–59

          // Map ngày trong tuần
          const daysOfWeek = [
            "Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư",
            "Thứ Năm", "Thứ Sáu", "Thứ Bảy"
          ];
          const weekday = daysOfWeek[d.getDay()]; // 0=CN, 1=Thứ 2, ...

          return `${day}/${month}/${year} ${hours}:${minutes}-${weekday}`;
        };
            const html = post.map(p => `
                <article class="player-card" id="post-mum-${p.id}">
                     <div class="player-header">
                         <div class="player-avatar">
                             <img src="https://localhost:7136/${profile[p.createdBy].avatarUrl}" alt="${profile[p.createdBy].fullName}">
                             
                         </div>
                         <div class="player-info">
                             <h3 class="player-name">${profile[p.createdBy].fullName}</h3>
                                <span class="created-at">${formatDateTimeWithDay(p.createdAt)}</span>
                         </div>
                         <a href="javascript:void(0)"
                   title="Chat với người đăng"
                   class="chat-icon"
                   data-receiver-id="${p.createdBy}"
                   data-receiver-name="${profile[p.createdBy].fullName}"
                   onclick="toggleChat(this)">
                   <i class="ri-message-2-line"></i>
                </a>
                     </div>
                     <div class="game-details">

                         <div class="detail-item">
                             <i class="ri-basketball-line"></i>
                             <span>${p.sportType}</span>
                         </div>
                         <div class="detail-item">
                             <i class="ri-calendar-line"></i>
                             <span>${formatDate(p.playDate)} - ${formatTimeForDisplay(p.timePlay)}</span>
                         </div>
                         <div class="detail-item">
                             <i class="ri-map-pin-line"></i>
                             <span>${p.location}</span>
                         </div>
                         <div class="player-item">
                             <div class="">
                                <i class="ri-group-line"></i>
                                <span class="ml-4">Cần <span class="needed-players">${p.joinedPlayers}</span> / <span class="max-players">${p.neededPlayers}</span> người chơi</span>
                             </div>
                             <a class="view-member" href="/TeamMember/TeamManage?postId=${p.id}"> Xem thành viên   </a>
                         </div>
                     </div>
                            <div class="game-description" id="gameDesc-${p.id}">${p.description || 'Không có mô tả thêm cho bài đăng này.'}</div>
                        <span class="see-more" id="seeMore-${p.id}">Xem thêm</span>
                        <span class="see-hidden" id="seeHidden-${p.id}">Ẩn bớt</span>
                     <div class="card-footer">
                         <div class="price-info">
                             <span id="perPrice-${p.id}" class="price">${formatVND(p.pricePerPerson)}</span>
                             <span class="price-label">mỗi người</span>
                         </div>
                         ${renderJoinButton(p, hidden)}
                     </div>
                 </article>
             `).join('');

            // Lấy giá trị từ sessionStorage và chuyển sang kiểu số.
            // Nếu không có giá trị, mặc định là 0.
            const skipPage = parseInt(sessionStorage.getItem('skip') || '0', 10);

            if (skipPage === 0) {
                console.log('Trang đầu, thay thế nội dung.');
                $('#players-grid').html(html);
            } else {
                // Từ trang thứ 2 trở đi, nối thêm nội dung.
                console.log('Trang tiếp theo, nối thêm nội dung. skipPage:', skipPage);
                $('#players-grid').append(html);
            }

            // Sửa lỗi: Gọi setupSeeMoreButtons cho MỖI bài đăng sau khi chúng được render
            // Dùng forEach để lặp qua mảng post và gọi hàm cho từng post.id
              requestAnimationFrame(() => {
            post.forEach(p => setupSeeMoreButtons(p.id));
        });
        }

        // nut xem them
           function setupSeeMoreButtons(id) {
            const gameDesc = document.getElementById(`gameDesc-${id}`);
            const seeMore = document.getElementById(`seeMore-${id}`);
            const seeHidden = document.getElementById(`seeHidden-${id}`);

            if (!gameDesc || !seeMore) {
                console.log(`Không tìm thấy phần tử với id gameDesc-${id} hoặc seeMore-${id}`);
                return;
            }

            // Thêm log kiểm tra style đang bị ẩn hay không
            console.log(
                `setupSeeMoreButtons ${id}`,
                'scrollHeight:', gameDesc.scrollHeight,
                'clientHeight:', gameDesc.clientHeight,
                'display:', window.getComputedStyle(gameDesc).display,
                'text:', gameDesc.textContent
            );

            gameDesc.classList.remove("expanded");

            if (gameDesc.scrollHeight > gameDesc.clientHeight) {
                seeMore.style.display = "inline";
            } else {
                seeMore.style.display = "none";
            }

            if (!seeMore.dataset.bound) {
                seeMore.addEventListener("click", () => {
                    gameDesc.classList.add("expanded");
                    seeHidden.style.display = "inline";
                    seeMore.style.display = "none";
                });
                seeMore.dataset.bound = "true";
            }

            // nếu được xem thêm thì mới hiện ẩn bớt
            if (!seeHidden.dataset.bound) {
                seeHidden.addEventListener("click", () => {
                    gameDesc.classList.remove("expanded");
                    seeMore.style.display = "inline";
                    seeHidden.style.display = "none";
                });
                seeHidden.dataset.bound = "true";
            }
        }


        function joindTeam(postId){
 
        
        
                // Gửi yêu cầu AJAX để tham gia bài đăng
                $.ajax({
                    url: '/FindTeam/JoinTeamPost',
                    type: 'POST',
                    data: { postId: postId },
                    success: function(response) {
                        if (response.message === 200) {
                             Swal.fire({
            icon: 'success',
            title: 'Tham gia thành công!',
            text: 'Đang chờ chủ bài đăng chấp nhận',
            showCancelButton: true,
            confirmButtonText: 'Xem chi tiết',
            cancelButtonText: 'Xác nhận',
            confirmButtonColor: '#3b82f6',
            cancelButtonColor: '#aaa'
        }).then((result) => {
            if (result.isConfirmed) {
                // Nút 1: Đi tới chi tiết
                window.location.href = `/FindTeam/JoinedTeam?postId=${postId}`; // Đổi URL theo ý bạn
            } else if (result.isDismissed) {
                // Nút 2: Chỉ xác nhận (đóng popup hoặc làm gì đó)
                // Ví dụ: load lại danh sách hoặc gì đó
                loadPost();
            }
        });
                            // Cập nhật lại danh sách bài đăng sau khi tham gia
                            loadPost();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi!',
                                text: response.message,
                                confirmButtonColor: '#ef4444'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: 'Đã xảy ra lỗi khi tham gia bài đăng. Vui lòng thử lại.',
                            confirmButtonColor: '#ef4444'
                        });
                    }
                });
        }


        // display button
                // Hàm helper đặt bên ngoài vòng lặp .map()
        function renderJoinButton(post, hidden) {
            // Giả sử bạn có biến currentUserId chứa ID người dùng đang đăng nhập
            if (hidden[post.id] === 1 && post.joinedPlayers < post.neededPlayers) {
                return `<a href="/FindTeam/TeamPostManage#post-${post.id}" class="btn btn-secondary btn-post-owner" >Bạn là chủ bài đăng</a>`;
            }

            if (post.joinedPlayers >= post.neededPlayers) {
                return `<button class="btn btn-warning btn-full-member" disabled>Đã đủ người</button>`;
            }
            if (hidden[post.id] === 2) {
                return `<a href="/TeamMember/TeamManage?postId=${post.id}" class="btn btn-warning btn-joined">Đã Tham gia</a>`;
            }
            if (hidden[post.id] === 0 || post.joinedPlayers < post.neededPlayers) {
                return `
                <button onClick="joindTeam(${post.id})" class="btn btn-primary btn-join">
                    <i class="ri-user-add-line"></i>
                    Tham Gia
                </button>
            `;
            }
            
        }


                             function openCreate() {
            $.ajax({
                url: '/FindTeam/GetBookByUserId',
                type: 'GET',
                success: function(reponse) {
                    console.log("booking: ", reponse);
                    let quill;
                    Swal.fire({
                title: `
                    <div class="modal-header">
                        <div class="modal-icon">
                            <i class="ri-add-circle-line"></i>
                        </div>
                        <div class="modal-title-text">Tạo Bài Đăng Tìm Đội</div>
                    </div>
                `,
                html: generateCreateTeamPostModalHTML(reponse),
                showCancelButton: true,
                confirmButtonText: '<i class="ri-save-line mr-1"></i>Tạo Bài Đăng',
                cancelButtonText: '<i class="ri-close-line mr-1"></i>Hủy Bỏ',
                confirmButtonColor: '#3b82f6',
                cancelButtonColor: '#6b7280',
                width: '900px',
                customClass: {
                    confirmButton: 'enhanced-confirm-btn',
                    cancelButton: 'enhanced-cancel-btn',
                    popup: 'enhanced-popup'
                },
                didOpen: () => {
                    // Add time and date preview functionality
                    const timePlayInput = document.getElementById('newTimePlay');
                    const playDateInput = document.getElementById('newPlayDate');
                    const schedulePreview = document.getElementById('schedulePreview');

                    const editorExists = document.querySelector('#editor-container .ql-editor');
            if (editorExists) {
                return;
            }

            // Cấu hình thanh công cụ (bạn có thể tùy chỉnh)
              const toolbarOptions = [
          ['bold', 'italic', 'underline', 'strike'],
          ['blockquote', 'code-block'],
          [{ 'header': 1 }, { 'header': 2 }],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
          [{ 'script': 'sub'}, { 'script': 'super' }],
          [{ 'indent': '-1'}, { 'indent': '+1' }],
          [{ 'direction': 'rtl' }],
          [{ 'size': ['small', false, 'large', 'huge'] }],
          [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
          [{ 'color': [] }, { 'background': [] }],
          [{ 'font': [] }],
          [{ 'align': [] }],
          ['clean'],
          ['emoji']
        ];
         quill = new Quill('#editor-container', {
          modules: {
            toolbar: toolbarOptions,
            'emoji-toolbar': true,
            'emoji-textarea': false,
            'emoji-shortname': true
          },
          theme: 'snow'
        });


            // Lấy thẻ textarea ẩn
            const hiddenTextarea = document.querySelector('#newDescription');

            // Cập nhật giá trị của textarea ẩn mỗi khi nội dung trong Quill thay đổi.
            // Điều này đảm bảo khi bạn gửi form, dữ liệu luôn là mới nhất.
            quill.on('text-change', function() {
                if (hiddenTextarea) {
                    // Chúng ta lưu nội dung HTML để giữ lại định dạng (in đậm, in nghiêng,...)
                    hiddenTextarea.value = quill.root.innerHTML;
                }
            });

                    // Sửa lỗi: Bọc lệnh gọi hàm trong một hàm ẩn danh để nó chỉ được thực thi khi có sự kiện 'change'
                    timePlayInput.addEventListener('change', () => updateSchedulePreview(timePlayInput, playDateInput, schedulePreview));
                    playDateInput.addEventListener('change', () => updateSchedulePreview(timePlayInput, playDateInput, schedulePreview));

                    // Gọi một lần để hiển thị giá trị ban đầu
                    updateSchedulePreview(timePlayInput, playDateInput, schedulePreview);

                    // Update needed players based on max players


                    
                },
                preConfirm: () => {
                    // Clear any existing validation messages
                    Swal.resetValidationMessage();

                    

                    try {
                        const title = document.getElementById('newTitle').value.trim();
                        const location = document.getElementById('newLocation').value.trim();
                        const sport = document.getElementById('newSport').value.trim();
       
                        const neededPlayers = parseInt(document.getElementById('newNeededPlayers').value);
                        const pricePerPerson = parseFloat(document.getElementById('newPricePerPerson').value) || 0;
                        const description = quill.root.innerHTML;
                        const timePlay = document.getElementById('newTimePlay').value;
                        const playDate = document.getElementById('newPlayDate').value;
                        const bookingId = parseInt(document.getElementById('newBookingId').value);
                        const stadiumId = parseInt(document.getElementById('stadiumId').value);

                    

                        // Validation với error handling
                        const validations = [
                            { condition: !title, message: 'Vui lòng nhập tiêu đề bài đăng' },
                            { condition: !location, message: 'Vui lòng nhập địa điểm' },
                            { condition: !sport, message: 'Vui lòng chọn môn thể thao' },
                            { condition: !neededPlayers || neededPlayers < 1, message: 'Số lượng thành viên cần tìm phải ít nhất 1 người' },
                            { condition: !timePlay, message: 'Vui lòng chọn thời gian chơi' },
                            { condition: !playDate, message: 'Vui lòng chọn ngày chơi' },
                            { condition: new Date(playDate) < new Date().setHours(0,0,0,0), message: 'Ngày chơi không thể là ngày trong quá khứ' },
                            { condition: !bookingId || bookingId < 1, message: 'Vui lòng nhập ID đặt sân hợp lệ' }
                        ];
                        console.log("validations: ", validations);

                        for (const validation of validations) {
                            if (validation.condition) {
                                Swal.showValidationMessage(`<i class="ri-error-warning-line mr-1"></i>${validation.message}`);
                                return false;
                            }
                        }

                        // Validation với error handling
                        const formData = new FormData();
                        formData.append('title', title);
                        formData.append('location', location);
                        formData.append('sportType', sport);
                        formData.append('joinedPlayers', 0);
                        formData.append('neededPlayers', neededPlayers);
                        formData.append('pricePerPerson', pricePerPerson);
                        formData.append('description', description);
                        formData.append('timePlay', timePlay);
                        formData.append('playDate', playDate);
                        formData.append('bookingId', bookingId);
                        formData.append('stadiumId', stadiumId)

                        console.log("formData: ", formData);

                        return formData;

                    } catch (error) {
                        console.error('Validation error:', error);
                        Swal.showValidationMessage('<i class="ri-error-warning-line mr-1"></i>Có lỗi xảy ra, vui lòng thử lại');
                        return false;
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    createNewTeamPost(result.value);
                }
            });
                },
                error: function() {
                    console.error('Error fetching bookings');
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Không thể tải thông tin đặt sân. Vui lòng thử lại sau.',
                        confirmButtonColor: '#ef4444'
                    });
                }
            });
        }

                // Update the generateCreateTeamPostModalHTML function
        function generateCreateTeamPostModalHTML(bookings) {
            return `
                <div class="enhanced-modal-content">
                    <form id="newTeamPostForm" class="team-post-form">
                        <!-- Booking Information Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-bookmark-line"></i>
                                <h3>Chọn Booking Đã Đặt</h3>
                            </div>

                            <div class="form-group">
                                <label class="form-label required">
                                    <i class="ri-list-check"></i>
                                    Danh sách booking của bạn
                                </label>
                                <div class="booking-list-container">
                                    ${generateBookingCards(bookings)}
                                </div>
                                <div class="input-helper">Chọn một booking đã đặt để tạo bài đăng tìm đội</div>
                                <input type="hidden" id="selectedBookingId" value="">
                            </div>

                            <!-- Selected Booking Info Display -->
                            <div id="selectedBookingInfo" class="selected-booking-info" style="display: none;">
                                <div class="booking-info-header">
                                    <i class="ri-information-line"></i>
                                    <span>Thông tin booking đã chọn</span>
                                </div>
                                <div id="bookingInfoContent" class="booking-info-content">
                                    <!-- Will be populated when a booking is selected -->
                                </div>
                            </div>
                        </div>

                        <!-- Basic Information Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-information-line"></i>
                                <h3>Thông Tin Cơ Bản</h3>
                            </div>

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-edit-line"></i>
                                        Tiêu đề bài đăng
                                    </label>
                                    <input type="text" id="newTitle" class="form-input"
                                           placeholder="Nhập tiêu đề thu hút cho bài đăng">
                                    <div class="input-helper">Tiêu đề sẽ hiển thị công khai để thu hút thành viên</div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-map-pin-2-line"></i>
                                        Địa điểm
                                    </label>
                                    <input type="text" id="newLocation" class="form-input"
                                           placeholder="Nhập địa điểm chơi" readonly>
                                    <div class="input-helper">Địa điểm sẽ được tự động điền từ booking đã chọn</div>
                                </div>
                            </div>

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-football-line"></i>
                                        Môn thể thao
                                    </label>
                                    <select id="newSport" class="form-input">
                                        <option value="">Chọn môn thể thao</option>
                                        <option value="Bóng đá sân 11">Bóng đá sân 11</option>
                                        <option value="Bóng đá sân 7">Bóng đá sân 7</option>
                                        <option value="Bóng đá sân 5">Bóng đá sân 5</option>
                                        <option value="Bóng rổ">Bóng rổ</option>
                                        <option value="Bóng chuyền">Bóng chuyền</option>
                                        <option value="Cầu lông">Cầu lông</option>
                                        <option value="Tennis">Tennis</option>
                                        <option value="table-tennis">Bóng bàn</option>
                                        <option value="other">Khác</option>
                                    </select>
                                    <div class="input-helper">Chọn môn thể thao sẽ chơi</div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-money-dollar-circle-line"></i>
                                        Giá mỗi người (VNĐ)
                                    </label>
                                    <input type="number" id="newPricePerPerson" class="form-input"
                                           placeholder="0" min="0" step="1000">
                                    <div class="input-helper">Chi phí mỗi người tham gia (để trống nếu miễn phí)</div>
                                </div>
                            </div>

                             <div class="form-group full-width">
                        <label class="form-label">
                            <i class="ri-file-text-line"></i>
                            Mô tả
                        </label>
                        <!-- Vùng chứa cho Quill Editor -->
                        <div id="editor-container"></div>
                        <!-- Textarea gốc được ẩn đi để lưu trữ dữ liệu HTML cho form -->
                        <textarea id="newDescription" name="description" style="display:none;"></textarea>
                        <div class="input-helper">Mô tả chi tiết giúp tìm được thành viên phù hợp</div>
                    </div>
                        </div>

                        <!-- Team Size Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-team-line"></i>
                                <h3>Thông Tin Đội</h3>
                            </div>

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-user-add-line"></i>
                                        Số thành viên cần tìm
                                    </label>
                                    <input type="number" id="newNeededPlayers" class="form-input"
                                           placeholder="5" min="1">
                                    <div class="input-helper">Số lượng thành viên còn thiếu cần tìm thêm</div>
                                </div>
                            </div>
                        </div>

                        <!-- Schedule Section -->
                        <div class="form-section">
                            <div class="section-header">
                                <i class="ri-calendar-event-line"></i>
                                <h3>Lịch Trình</h3>
                            </div>

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-calendar-line"></i>
                                        Ngày chơi
                                    </label>
                                    <input type="date" id="newPlayDate" class="form-input" readonly>
                                    <div class="input-helper">Ngày sẽ được tự động điền từ booking đã chọn</div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="ri-time-line"></i>
                                        Thời gian chơi
                                    </label>
                                        <select id="newTimePlay" class="form-select"></select>                                     
                                        <div class="input-helper">Giờ bắt đầu hoạt động</div>
                                </div>
                            </div>

                            <div class="schedule-preview">
                                <i class="ri-calendar-event-line"></i>
                                <span>Hoạt động sẽ diễn ra vào <strong id="schedulePreview">ngày được chọn</strong></span>
                            </div>
                        </div>
                    </form>
                </div>
            `;
        }




              function getSportType(courts, staidumId){
            return courts?.find(court => court.stadiumId === staidumId)?.sportType || 'Thể thao';
        }


        // New function to generate booking cards
        function generateBookingCards(bookings) {
            if (!bookings || bookings.length === 0) {
                return `
                    <div class="no-bookings">
                        <i class="ri-calendar-line"></i>
                        <p>Bạn chưa có booking nào. Vui lòng đặt sân trước khi tạo bài đăng tìm đội.</p>
                    </div>
                `;
            }

            return bookings.bookings.map(booking => {
                const formattedDate = new Date(booking.date).toLocaleDateString('vi-VN');
                const statusClass = getStatusClass(booking.status);
                const statusText = getStatusText(booking.status);
                const address = bookings.stadiums[booking.stadiumId]?.address || 'Địa chỉ không xác định';
                const name = bookings.stadiums[booking.stadiumId]?.name || 'Sân không xác định';
                const sportType = getSportType(bookings.stadiums[booking.stadiumId]?.courts, bookings.stadiums[booking.stadiumId]?.id) || 'Thể thao';
                const stadium = bookings.stadiums[booking.stadiumId];
                return `
                          <div class="booking-card" data-booking-id="${booking.id}"   data-booking='${JSON.stringify(booking)}'
                                                                                      data-stadium='${JSON.stringify(stadium)}'>
                        <div class="booking-card-header">
                            <div class="booking-id">
                                <i class="ri-hashtag"></i>
                                <span>Booking #${booking.id}</span>
                            </div>
                            <div class="booking-status ${statusClass}">
                                <i class="ri-circle-fill"></i>
                                <span>${statusText}</span>
                            </div>
                        </div>

                        <div class="booking-card-body">
                        <div class="booking-detail">
                                <i class="ri-id-card-line"></i>
                                <span>${name}</span>
                            </div>
                            <div class="booking-detail">
                                <i class="ri-calendar-line"></i>
                                <span>Ngày chơi: ${formattedDate}</span>
                            </div>
                            <div class="booking-detail">
                                <i class="ri-calendar-line"></i>
                                <span>${sportType}</span>
                            </div>
                            <div class="booking-detail-map">
                                <i class="ri-map-pin-line"></i>
                                <span>${address}</span>
                            </div>

                            <div class="booking-detail">
                                <i class="ri-money-dollar-circle-line"></i>
                                <span>${formatPrice(booking.totalPrice)}</span>
                            </div>

                            ${booking.note ? `
                                <div class="booking-detail">
                                    <i class="ri-file-text-line"></i>
                                    <span>${booking.note}</span>
                                </div>
                            ` : ''}
                        </div>

                        <div class="booking-card-footer">
                            <button type="button" class="select-booking-btn" onclick="selectBooking(this)">
                                <i class="ri-check-line"></i>
                                Chọn booking này
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Helper functions
        function getStatusClass(status) {
            switch (status?.toLowerCase()) {
                case 'confirmed': return 'status-confirmed';
                case 'pending': return 'status-pending';
                case 'cancelled': return 'status-cancelled';
                case 'completed': return 'status-completed';
                default: return 'status-unknown';
            }
        }

        function getStatusText(status) {
            switch (status?.toLowerCase()) {
                case 'confirmed': return 'Đã xác nhận';
                case 'pending': return 'Chờ xác nhận';
                case 'cancelled': return 'Đã hủy';
                case 'completed': return 'Hoàn thành';
                default: return 'Không xác định';
            }
        }

        function formatPrice(price) {
            if (!price) return 'Miễn phí';
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(price);
        }

        // Function to handle booking selection
        function selectBooking(button) {
            // Remove selection from all booking cards
            document.querySelectorAll('.booking-card').forEach(card => {
                card.classList.remove('selected');
            });

            // Add selection to clicked booking card
            const bookingCard = button.closest('.booking-card');
            bookingCard.classList.add('selected');

            // Get booking data
            const bookingData = JSON.parse(bookingCard.dataset.booking);
            const stadium = JSON.parse(bookingCard.dataset.stadium);
            console.log("Selected booking data:", bookingData);
            console.log("Selected stadium data:", stadium);
            // Update hidden input with selected booking ID
            document.getElementById('selectedBookingId').value = bookingData.id;

            // Auto-fill form fields based on selected booking
            fillFormFromBooking(bookingData, stadium);

            // Show selected booking info
            showSelectedBookingInfo(bookingData, stadium);

            // Update button text for all cards
            document.querySelectorAll('.select-booking-btn').forEach(btn => {
                btn.innerHTML = '<i class="ri-check-line"></i>Chọn booking này';
                btn.classList.remove('selected');
            });

            // Update selected button
            button.innerHTML = '<i class="ri-check-double-line"></i>Đã chọn';
            button.classList.add('selected');
        }

        // Function to auto-fill form from selected booking
        function fillFormFromBooking(booking, stadium) {
            // Set date
                        const dateForInput = booking.date.substring(0, 10);

        document.getElementById("newPlayDate").value = dateForInput;



            // Set location (you might need to adjust this based on your stadium data structure)
            document.getElementById('newLocation').value = `${stadium.address}`;
            // set sport type
        
            document.getElementById('newSport').value = getSportType(stadium.courts, booking.stadiumId);
            // Set play time
                   // Lấy list giờ từ bookingDetails
        const timeList = booking.bookingDetails.map(detail => {
          // Nếu startTime là ISO thì cắt phần giờ phút
          return new Date(detail.startTime).toISOString().substring(11, 16);
        });

        // Render tất cả giờ vào select
        renderTimeOptions(timeList);


            // Calculate price per person suggestion (total price divided by estimated team size)
            if (booking.totalPrice) {
                const suggestedPricePerPerson = Math.ceil(booking.totalPrice / 10); // Assuming average team of 10
                document.getElementById('newPricePerPerson').value = suggestedPricePerPerson;
            }

            // Update schedule preview
            // updateSchedulePreview(booking.a);
        }
        function updateSchedulePreview(timePlayInput, playDateInput, schedulePreview) {
                        const timePlay = timePlayInput.value || '00:00';
                        const playDate = playDateInput.value || new Date().toISOString().split('T')[0];
                        const formattedDate = new Date(playDate).toLocaleDateString('vi-VN');
                        schedulePreview.textContent = `${formattedDate} lúc ${timePlay}`;
                    }
        function renderTimeOptions(list, selected = null) {
          const select = document.getElementById("newTimePlay");
          select.innerHTML = "";

          list.forEach(time => {
            const option = document.createElement("option");
            option.value = time;
            option.textContent = time;

            if (selected && selected === time) {
              option.selected = true;
            }

            select.appendChild(option);
          });
        }


        // Function to show selected booking info
        function showSelectedBookingInfo(booking, stadium) {
            const infoContainer = document.getElementById('selectedBookingInfo');
            const contentContainer = document.getElementById('bookingInfoContent');

            const formattedDate = new Date(booking.date).toLocaleDateString('vi-VN');
            const formattedTime = new Date(booking.createdAt).toLocaleTimeString('vi-VN');
            const name = stadium.name || 'Sân không xác định';

            contentContainer.innerHTML = `
                <div class="booking-info-grid">
                    <div class="booking-info-item">
                        <span class="label">ID Booking:</span>
                        <input type="hidden" id="newBookingId" name="bookingID" value="${booking.id}" />
                        <input type="hidden" id="stadiumId" name="bookingID" value="${booking.stadiumId}" />
                        <span class="value">#${booking.id}</span>
                    </div>
                    <div class="booking-info-item">
                        <span class="label">Ngày đặt:</span>
                        <span class="value">${formattedDate}</span>
                    </div>
                    <div class="booking-info-item">
                        <span class="label">Sân:</span>
                        <span class="value">Sân ${name}</span>
                    </div>
                    <div class="booking-info-item">
                        <span class="label">Tổng giá:</span>
                        <span class="value">${formatPrice(booking.totalPrice)}</span>
                    </div>
                    <div class="booking-info-item">
                        <span class="label">Trạng thái:</span>
                        <span class="value ${getStatusClass(booking.status)}">${getStatusText(booking.status)}</span>
                    </div>
                    ${booking.note ? `
                        <div class="booking-info-item full-width">
                            <span class="label">Ghi chú:</span>
                            <span class="value">${booking.note}</span>
                        </div>
                    ` : ''}
                </div>
            `;

            infoContainer.style.display = 'block';
        }

        // Update the validation in preConfirm to check for selected booking
        // Add this to the validations array in the preConfirm function:
        // { condition: !document.getElementById('selectedBookingId').value, message: 'Vui lòng chọn một booking đã đặt' },

        // Helper function to get current user ID (implement based on your authentication system)
        function getCurrentUserId() {
            // This should return the current logged-in user's ID
            // You'll need to implement this based on your authentication system
            return 1; // Placeholder - replace with actual implementation
        }

        // Function to handle creating the team post
        function createNewTeamPost(teamPostData) {
            // Show loading state
            Swal.fire({
                title: 'Đang tạo bài đăng...',
                html: 'Vui lòng đợi trong giây lát',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Make API call to create team post
                    $.ajax({
            url: '/FindTeam/CreateNewPost',
            type: 'POST',
            processData: false,
                contentType: false,
            data: teamPostData,
            success: function (data) {
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công!',
                    text: 'Bài đăng tìm đội đã được tạo thành công',
                    confirmButtonColor: '#3b82f6'
                }).then(() => {
                    loadPost(); // Reload posts to show the new one
                });
            },
            error: function (xhr, status, error) {
                console.error('Error creating team post:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Có lỗi xảy ra khi tạo bài đăng. Vui lòng thử lại.',
                    confirmButtonColor: '#ef4444'
                });
            }
        });

        }

                function formatVND(amount) {
          // 1. Kiểm tra các trường hợp đầu vào không hợp lệ (null, undefined, không phải số)
          // isNaN(parseFloat(amount)) sẽ xử lý đúng cho cả số và chuỗi số.
          if (amount === null || amount === undefined || isNaN(parseFloat(amount))) {
            return ''; // Trả về chuỗi rỗng để tránh hiển thị lỗi trên UI
          }

          // Chuyển đổi đầu vào thành kiểu số để xử lý
          const numericAmount = parseFloat(amount);

          // 2. Xử lý trường hợp đặc biệt: miễn phí
          if (numericAmount === 0) {
            return 'Miễn phí';
          }

          // 3. Sử dụng Intl.NumberFormat để định dạng số theo chuẩn Việt Nam
          //    Đây là cách làm hiện đại và đáng tin cậy nhất.
          //    'vi-VN' là mã ngôn ngữ cho tiếng Việt tại Việt Nam.
          const formatter = new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
            // Tùy chọn này giúp loại bỏ ký hiệu "₫" mặc định nếu bạn chỉ muốn "VND" ở cuối
            currencyDisplay: 'code'
          });

          // Dùng formatter để định dạng lại số
          // Kết quả sẽ là "50.000 VND" thay vì "50.000 ₫"
          return formatter.format(numericAmount);
        }

        // Hàm định dạng ngày tháng
                function formatDate(dateString) {
            const date = new Date(dateString);

            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');

            return `${day}/${month}/${year}`;
        }

        // Sử dụng
        const originalDate = "2025-08-18T11:08:41.513+07:00";
        console.log(formatDate(originalDate)); // 18/08/2025 11:08
         function formatTimeForDisplay(time) {
            if (!time) return '--:--';

            try {
                if (typeof time === 'string') {
                    if (time.startsWith('PT')) {
                        const hoursMatch = time.match(/PT(\d+)H/);
                        if (hoursMatch && hoursMatch[1]) {
                            const hours = parseInt(hoursMatch[1]).toString().padStart(2, '0');
                            return `${hours}:00`;
                        }
                    } else if (time.includes(':')) {
                        const parts = time.split(':');
                        if (parts.length >= 2) {
                            const hours = parseInt(parts[0]).toString().padStart(2, '0');
                            const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                            return `${hours}:${minutes}`;
                        }
                    }
                }

                if (time instanceof Date) {
                    const hours = time.getHours().toString().padStart(2, '0');
                    const minutes = time.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                }

                return '--:--';
            } catch (error) {
                console.warn('Error formatting time for display:', error);
                return '--:--';
            }
        }


                      function formatTimeForInput(dateObject) {
          // 1. Kiểm tra xem đầu vào có phải Date hợp lệ không
          if (!(dateObject instanceof Date) || isNaN(dateObject.getTime())) {
            console.error("Đầu vào không phải là một đối tượng Date hợp lệ.");
            return '';
          }

          // 2. Lấy giờ và phút
          let hours = dateObject.getHours().toString().padStart(2, '0');
          let minutes = dateObject.getMinutes().toString().padStart(2, '0');

          // 3. Trả về chuỗi dạng "HH:mm"
          return `${hours}:${minutes}`;
        }

    </script>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-app.js";
        import { getDatabase, ref, set } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-database.js";

        // Cấu hình Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyCg6rxISbUgZKNqqLlkBrYS_sQtkYRaByo",
            authDomain: "chatbox-993b2.firebaseapp.com",
            databaseURL: "https://chatbox-993b2-default-rtdb.firebaseio.com",
            projectId: "chatbox-993b2",
            storageBucket: "chatbox-993b2.firebasestorage.app",
            messagingSenderId: "168483987205",
            appId: "1:168483987205:web:c9ef776901ec2882bb616c"
        };

        // Khởi tạo Firebase
        const app = initializeApp(firebaseConfig);
        const db = getDatabase(app);

        // Hàm mở chat
                       // Hàm mở chat
        function toggleChat(el) {
            const senderId = document.getElementById("senderId")?.value;
            const senderName = document.getElementById("senderName")?.value;

            const receiverId = el.getAttribute("data-receiver-id");
            const receiverName = el.getAttribute("data-receiver-name");

            if (!senderId || !receiverId) {
                alert("⚠️ Thiếu thông tin user");
                return;
            }
            if (senderId === receiverId) {
                alert("😅 Bạn không thể chat với chính mình");
                return;
            }

            // truyền luôn receiverName vào
            createChatRoomAndRedirect(senderId, senderName, receiverId, receiverName);
        }

        // Tạo phòng chat
        function createChatRoomAndRedirect(senderId, senderName, receiverId, receiverName) {
            const timestamp = Date.now();

            const updates = {};
            updates[`userChats/${senderId}/${receiverId}`] = {
                name: receiverName || "Người dùng",  // 👈 hiển thị đúng tên người nhận
                timestamp,
                lastMessage: ""
            };
            updates[`userChats/${receiverId}/${senderId}`] = {
                name: senderName || "Người dùng",   // 👈 hiển thị tên người gửi
                timestamp,
                lastMessage: ""
            };

            Promise.all(
                Object.keys(updates).map(path => set(ref(db, path), updates[path]))
            ).then(() => {
                console.log("✅ Chat room created successfully");
                redirectToChat(senderId, senderName, receiverId, receiverName);
            }).catch((error) => {
                console.error("❌ Error creating chat room:", error);
                redirectToChat(senderId, senderName, receiverId, receiverName);
            });
        }

        // Redirect sang trang Chat.cshtml
        function redirectToChat(senderId, senderName, receiverId, receiverName) {
            const params = new URLSearchParams({
                senderId,
                senderName: senderName || "",
                receiverId,
                receiverName: receiverName || receiverId
            });

            // Gọi đến action ChatController.Chat
            window.location.href = `/Chat/Chat?${params.toString()}`;
        }

        // Gắn sự kiện click cho button
        document.addEventListener("DOMContentLoaded", () => {
            const floatingChatBtn = document.getElementById("floating-chat-btn");
            if (floatingChatBtn) {
                floatingChatBtn.addEventListener("click", toggleChat);
            }
        });

        // Cho phép gọi trực tiếp onclick từ HTML
        window.toggleChat = toggleChat;
    </script>

    <!-- Filter Overlay for Mobile -->
    <div class="filter-overlay" id="filter-overlay" aria-hidden="true"></div>

    <!-- Toast Notifications Container -->
    <div class="toast-container" id="toast-container" aria-live="polite" aria-atomic="true"></div>

    <!-- Scripts -->
    <script src="~/js/FindTeam/FindTeam.js"></script>


    <!-- Service Worker for offline support (optional) -->

</body>
</html>