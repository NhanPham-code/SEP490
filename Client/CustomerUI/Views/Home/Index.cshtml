<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stadium Booking Platform</title>
    <script src="https://cdn.tailwindcss.com/3.4.16">

    </script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="~/css/Home/home.css" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="js/Home/Home.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
    <style>
        .circle{
            border-radius: 50%;
            max-height: 40px;
        }
        /* Custom checkbox style */
        input[type="checkbox"] {
            accent-color: #2563eb; /* Blue-600 */
            cursor: pointer;
        }
        /* Thêm vào file CSS hiện tại của bạn */

        @@keyframes pulse {
            0%, 100%

        {
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
        }

        50% {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.5);
        }

        }

        @@keyframes heartBeat {
            0%, 100%

        {
            transform: scale(1);
        }

        25% {
            transform: scale(1.3);
        }

        50% {
            transform: scale(1.1);
        }

        75% {
            transform: scale(1.2);
        }

        }

        @@keyframes floatUp {
            0%

        {
            opacity: 1;
            transform: translateY(0) scale(1);
        }

        100% {
            opacity: 0;
            transform: translateY(-40px) scale(0.3);
        }

        }

        .pulse-animation {
            animation: pulse 2s infinite;
        }

        .heart-beat {
            animation: heartBeat 0.6s ease-in-out;
        }

        .floating-heart {
            position: fixed;
            pointer-events: none;
            animation: floatUp 1.5s ease-out forwards;
            z-index: 9999;
            font-size: 16px;
        }

        .favorite-btn {
            position: relative;
            z-index: 20;
        }

            .favorite-btn.favorited {
                background: rgba(254, 242, 242, 0.95) !important;
                border-color: rgb(252, 165, 165) !important;
                color: rgb(220, 38, 38) !important;
                transform: scale(1.1) !important;
            }

                .favorite-btn.favorited .heart-icon {
                    color: rgb(220, 38, 38) !important;
                }

        /* Đảm bảo backdrop blur hoạt động */
        .favorite-btn {
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(8px);
        }
        /* Custom time slot styles */
        .time-slot {
            transition: all 0.3s ease;
        }

            .time-slot.selected {
                background-color: #2563eb;
                color: white;
                border-color: #2563eb;
            }

            .time-slot.unavailable {
                background-color: #f3f4f6;
                color: #6b7280;
                cursor: not-allowed;
            }

        .radius-control {
            background: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-weight: 500;
        }

            .radius-control select {
                padding: 4px 6px;
                border-radius: 4px;
                border: 1px solid #ccc;
                font-size: 14px;
                cursor: pointer;
                margin-left: 5px;
            }

        .weather-card {
            background: linear-gradient(to top, #74ebd5, #ACB6E5);
            color: white;
            padding: 20px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            width: 100%;
            display: flex; /* sắp xếp ngang */
            align-items: center; /* căn giữa theo chiều dọc */
            justify-content: center; /* căn giữa toàn hàng */
            gap: 15px; /* khoảng cách giữa các phần tử */
            animation: fadeIn 0.5s ease-in-out;
            box-sizing: border-box;
            margin-bottom: 10px;
        }

        .icon {
            width: 60px;
            height: 60px;
        }

        .temp {
            font-size: 2rem;
            font-weight: bold;
        }

        .location {
            font-size: 1.2rem;
        }

        .card-content {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .time-slot {
            cursor: pointer;
        }

            .time-slot.selected {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }

            .time-slot.unavailable {
                background-color: #f0f0f0;
                color: #999;
                cursor: not-allowed;
            }

        #grid-view, #map-view, #compare-view {
            transition: all 0.3s ease;
        }

            #grid-view.bg-primary, #map-view.bg-primary, #compare-view.bg-primary {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }
            /* Container cho các nút */
        /* Container cho các nút */
        .flex.items-center.gap-3.mb-6 {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 24px;
        }

        /* Style chung cho các nút */
        button[id$="-view"] {
            padding: 8px;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            background-color: #ffffff;
            color: #4b5563;
            transition: all 0.2s ease-in-out;
            cursor: pointer;
        }

            /* Hover state */
            button[id$="-view"]:hover {
                border-color: #3b82f6;
                color: #3b82f6;
                background-color: #f0f7ff;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            /* Active state (khi nhấn hoặc được chọn) */
            button[id$="-view"].active-btn {
                border-color: #164e63; /* Màu xanh đậm hơn */
                color: #ffffff; /* Chữ trắng để tương phản */
                background-color: #164e63; /* Nền xanh đậm */
                box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2); /* Hiệu ứng lún */
            }

            /* Icon bên trong */
            button[id$="-view"] i {
                font-size: 1.25rem;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            /* Focus state cho accessibility */
            button[id$="-view"]:focus {
                outline: none;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
            }

            /* Disabled state */
            button[id$="-view"]:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
    </style>

</head>


<body class="bg-gray-50" data-new-gr-c-s-check-loaded="14.1116.0" data-gr-ext-installed="">

    <section class="relative h-80 bg-cover bg-center" style="background-image: url('https://readdy.ai/api/search-image?query=Modern%20sports%20stadium%20complex%20aerial%20view%20with%20multiple%20fields%2C%20green%20grass%2C%20stadium%20lights%2C%20parking%20areas%2C%20clear%20blue%20sky%20background%2C%20professional%20sports%20facilities%2C%20vibrant%20and%20energetic%20atmosphere%2C%20high-quality%20architectural%20photography%2C%20clean%20and%20inspiring%20sports%20venue%20complex&amp;width=1200&amp;height=320&amp;seq=hero002&amp;orientation=landscape')">
        <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center">
            <div class="w-full text-center text-white">
                <h1 class="text-4xl font-bold mb-4">Discover Premium Stadiums</h1>
                <p class="text-lg mb-6 max-w-2xl mx-auto">Browse our extensive collection of world-class sports facilities. Find the perfect venue for your next game, training session, or event.</p>
                <div class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto">
                    <button class="bg-primary text-white px-6 py-3 !rounded-button font-semibold hover:bg-blue-600 transition-colors whitespace-nowrap">
                        Explore Stadiums
                    </button>
                    <button class="bg-white text-gray-900 px-6 py-3 !rounded-button font-semibold hover:bg-gray-100 transition-colors whitespace-nowrap">
                        How It Works
                    </button>
                </div>
            </div>
        </div>
    </section>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="weather-card">
            <h1>Thời tiết hiện tại</h1>
            <p id="status" class="location">Đang lấy vị trí...</p>
            <img id="icon" class="icon" src="" alt="">
            <p id="weather" class="temp"></p>
            <p id="condition" class="condition"></p>
        </div>

        <div class="flex flex-col lg:flex-row gap-8">

            <div class="w-full lg:w-80 bg-white rounded-lg shadow-sm p-6 h-fit">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-lg font-semibold">Filter Results</h3>
                    <button class="text-sm text-primary hover:text-blue-600">Clear All</button>
                </div>

                <form id="sportFilterForm">
                    <!-- Sport Type -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Sport Type</h4>
                        <div class="space-y-2">
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Bóng đá" class="custom-checkbox">
                                <span class="text-sm">Bóng đá</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Bóng rổ" class="custom-checkbox">
                                <span class="text-sm">Bóng rổ</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Tennis" class="custom-checkbox">
                                <span class="text-sm">Tennis</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Bóng chuyền" class="custom-checkbox">
                                <span class="text-sm">Bóng chuyền</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Cầu lông" class="custom-checkbox">
                                <span class="text-sm">Cầu lông</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Multi-Sport" class="custom-checkbox">
                                <span class="text-sm">Multi-Sport</span>
                            </label>
                        </div>
                    </div>

                    <!-- Select Date -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Select Date</h4>
                        <input type="date" name="date" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none text-sm">
                    </div>

                    <!-- Available Time -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Available Time</h4>
                        <div class="grid grid-cols-2 sm:grid-cols-4 gap-2">
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="06:00" class="hidden">
                                06:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="08:00" class="hidden">
                                08:00
                            </label>
                            <label class="time-slot selected p-2 text-sm border border-gray-300 rounded text-center">
                                <input type="radio" name="time" value="10:00" class="hidden" checked>
                                10:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="12:00" class="hidden">
                                12:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="14:00" class="hidden">
                                14:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="16:00" class="hidden">
                                16:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="18:00" class="hidden">
                                18:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="20:00" class="hidden">
                                20:00
                            </label>
                        </div>
                    </div>

                    <!-- Price Range -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Price Range</h4>
                        <div class="flex">
                            <input type="number" id="priceInput" min="0" max="10000000" value="100000" class="w-24 border p-1 rounded-md text-end">
                            <div class="flex items-center gap-2">
                                <span class="font-medium">đ/giờ</span>
                            </div>
                        </div>
                        <div class="px-2">
                            <input type="range" name="price" min="0" max="10000000" value="100000" class="w-full mb-2">
                            <div class="flex justify-between items-center text-sm text-gray-600">
                                <span>0đ</span>
                                
                                <span>10.000.000đ</span>
                            </div>
                        </div>
                    </div>



                    <!-- Location -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Location</h4>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <div class="w-4 h-4 flex items-center justify-center">
                                    <i class="ri-map-pin-line text-gray-400"></i>
                                </div>
                            </div>
                            <input type="text" name="location" placeholder="Enter location" class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none text-sm">
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="w-full bg-primary text-white py-3 !rounded-button font-semibold hover:bg-blue-600 transition-colors whitespace-nowrap">
                        Apply Filters
                    </button>
                </form>

            </div>
            <div class="flex-1">
                <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6">
                    <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                        <span class="text-gray-600 whitespace-nowrap" id="count"></span>
                        <div class="flex items-center gap-2">
                            <span class="text-sm text-gray-600">Sort by:</span>
                            <button class="flex items-center space-x-1 px-3 py-2 border border-gray-300 rounded-lg text-sm hover:border-primary transition-colors">
                                <span>Popularity</span>
                                <div class="w-4 h-4 flex items-center justify-center">
                                    <i class="ri-arrow-down-s-line"></i>
                                </div>
                            </button>
                        </div>
                    </div>
                    <div class="flex items-center gap-4 mb-6">
                        <!-- Grid View Card -->
                        <div class="group perspective-1000">
                            <button type="button" id="grid-view"
                                    class="relative w-32 h-24 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-2xl shadow-xl transform transition-all duration-300 hover:scale-105 hover:rotate-y-12 active-btn">
                                <div class="absolute inset-0 bg-white/20 rounded-2xl backdrop-blur-sm"></div>
                                <div class="relative z-10 flex flex-col items-center justify-center h-full text-white">
                                    <i class="ri-grid-line text-3xl mb-1"></i>
                                    <span class="text-xs font-bold">DANH SÁCH</span>
                                </div>
                                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-2xl"></div>
                            </button>
                        </div>

                        <!-- Map View Card -->
                        <div class="group perspective-1000">
                            <button type="button" id="map-view"
                                    class="relative w-32 h-24 bg-gradient-to-br from-blue-400 to-blue-600 rounded-2xl shadow-lg transform transition-all duration-300 hover:scale-105 hover:rotate-y-12 opacity-70 hover:opacity-100">
                                <div class="absolute inset-0 bg-white/20 rounded-2xl backdrop-blur-sm"></div>
                                <div class="relative z-10 flex flex-col items-center justify-center h-full text-white">
                                    <i class="ri-map-line text-3xl mb-1"></i>
                                    <span class="text-xs font-bold">BẢN ĐỒ</span>
                                </div>
                                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-2xl"></div>
                            </button>
                        </div>

                        <!-- Favorites Card -->
                        <div class="group perspective-1000">
                            <button type="button" id="compare-view"
                                    class="relative w-32 h-24 bg-gradient-to-br from-pink-400 to-pink-600 rounded-2xl shadow-lg transform transition-all duration-300 hover:scale-105 hover:rotate-y-12 opacity-70 hover:opacity-100">
                                <div class="absolute inset-0 bg-white/20 rounded-2xl backdrop-blur-sm"></div>
                                <div class="relative z-10 flex flex-col items-center justify-center h-full text-white">
                                    <i class="ri-heart-line text-3xl mb-1"></i>
                                    <span class="text-xs font-bold">YÊU THÍCH</span>
                                </div>
                                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-2xl"></div>
                            </button>
                        </div>
                    </div>

                </div>
                <div id="stadium-grid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                    <script>

                                                document.addEventListener('DOMContentLoaded', function () {
                          // Lấy tất cả các nút
                          const buttons = document.querySelectorAll('button[id$="-view"]');

                          // Thêm sự kiện click cho từng nút
                          buttons.forEach(button => {
                            button.addEventListener('click', function () {
                              // Xóa class active-btn khỏi tất cả các nút
                              buttons.forEach(btn => btn.classList.remove('active-btn'));
                              // Thêm class active-btn cho nút được nhấn
                              this.classList.add('active-btn');
                            });
                          });
                        });

                        
                                                // Get the form element
                                                                                            $(document).ready(function() {
                                                                                                sessionStorage.setItem('searchTerm', "")
                                                                                                let skip = 0;
                        const top = 9; // Number of items per page
                                                                                                 $('#stadium-grid').empty().hide(); // Clear previous results
                                          displayList("", top, skip);
                            const form = $('#sportFilterForm'); // or $('#myForm') if using an ID
                            form.on('submit', function(e) {
                                e.preventDefault();


                                                let filters = [];

                        // Location
                        let location = this.querySelector('input[name="location"]').value.trim();
                        if (location) {
                            filters.push(`contains(Address,'${location}')`);
                        }

                        // Sport type (có thể nhiều cái => or)
                        let sportTypes = [...this.querySelectorAll('input[name="sport_type[]"]:checked')]
                            .map(cb => `Courts/any(c: c/SportType eq '${cb.value}')`);
                        if (sportTypes.length > 0) {
                            filters.push("(" + sportTypes.join(" or ") + ")");
                        }

                        // Price
                        let price = this.querySelector('input[name="price"]').value;
                        if (price) {
                            filters.push(`Courts/any(c: c/PricePerHour le ${price})`);
                        }

                        // Time (convert sang duration)
                        let time = this.querySelector('input[name="time"]:checked')?.value;
                        if (time) {
                            let [hh, mm] = time.split(":");
                                                    let duration;
                        if (mm && parseInt(mm) > 0) {
                            duration = `duration'PT${parseInt(hh)}H${parseInt(mm)}M'`;
                        } else {
                            duration = `duration'PT${parseInt(hh)}H'`;
                        }

                        }

                        // Nối filter
                        let filterString = filters.join(" and ");
                        let finalUrl = "&$filter=" + encodeURIComponent(filterString);
                        skip = 0;
                        console.log(finalUrl);
                        sessionStorage.setItem('searchTerm', finalUrl); // Lưu search term vào sessionStorage
                        displayList(finalUrl, top, skip);
                        });
                                   $('#loadMoreBtn').on("click", function () {
                            console.log('Button clicked!');


                            var count = sessionStorage.getItem('stadiumCount') || 0;
                            var url = sessionStorage.getItem('searchTerm') || "";
                            var minTop = 0;
                            skip += 9;
                            
                            if (skip + 9 > count ){
                                minTop = skip - count; // Giảm skip nếu vượt quá số lượng
                                $('#loadMoreBtn').hide(); // Ẩn nút nếu không còn dữ liệu
                            }else if(skip == count){
                                $('#loadMoreBtn').hide();
                            }
                            
                            console.log('URL:', count);
                            displayList(url, top - minTop, skip);
                        });
                        });

                            // You can now use formData object to process or send the data




                        // danh sach san pham truoc va sau khi search
                        function displayList(searchTerm, top, skip){
                            var searchUrl = searchTerm + `&$top=${top}&$skip=${skip}`;
                            console.log(searchUrl);

                                                                           $.ajax({
                            url: '/Home/Stadiums', // Endpoint for POST request
                            type: 'POST',
                            data: {searchTerm: searchUrl},
                            success: function (data) {
                                let count = data["@@odata.count"];
                                sessionStorage.setItem('stadiumCount', count); // Lưu số lượng sân vào sessionStorage
                                $("#count").text(`Đã tìm thấy ${count}`);
                                console.log(skip);
                                if (skip + 9 >= count){
                                    $('#loadMoreBtn').hide();
                                }else{
                                     $('#loadMoreBtn').show();
                                }
                                let html = '';
                                if (data.value && data.value.length > 0) {
                                    data.value.forEach(function (item) {
                                        let imageUrl = item.StadiumImages.length > 0 ? item.StadiumImages[0].ImageUrl : 'default.jpg';
                                        let price = item.Courts.length > 0 ? item.Courts[0].PricePerHour : 0;
                                        // Removed console.log(item.val) as 'val' is not defined in the data structure
                                        console.log(item);

                                        // Format tiền Việt Nam
                                        let formattedPrice = new Intl.NumberFormat('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND'
                                        }).format(price);
                                        let address = item.Address ?? '';

                                                                // Thay thế đoạn code HTML của bạn bằng đoạn này:
                        html += `<div class="card-content bg-white rounded-2xl shadow-sm overflow-hidden hover:shadow-lg transition-shadow duration-300">
                            <div class="relative h-48">
                                <img src="https://localhost:7280/${imageUrl}" alt="Stadium" class="w-full h-full object-cover">

                                <!-- Hot badge - Fixed positioning -->
                                <div class="absolute top-3 right-3 bg-gradient-to-r from-red-500 to-red-600 text-white px-2 py-1 rounded-full text-xs font-bold z-10 pulse-animation shadow-lg">
                                    🔥 Hot
                                </div>

                                <!-- Favorite Button - Positioned correctly -->
                                <div class="absolute top-3 left-3 z-20">
                                    <button class="favorite-btn bg-white/90 backdrop-blur-sm hover:bg-white border border-white/20 text-gray-600 hover:text-red-500 p-2.5 circle transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-110"
                                            data-stadium-id="${item.Id}"
                                            data-stadium-name="${item.Name}">
                                        <i class="heart-icon far fa-heart text-lg"></i>
                                    </button>
                                </div>

                                <!-- Sport type badge -->
                                <div class="absolute bottom-3 left-3 bg-white/90 backdrop-blur-sm px-3 py-1.5 rounded-full text-sm font-medium text-gray-800">
                                    ${item.Courts[0].SportType}
                                </div>
                            </div>

                            <div class="p-4">
                                <h3 class="font-bold text-lg text-gray-900 mb-1">${item.Name}</h3>

                                <div class="flex items-center text-gray-500 text-sm mb-2">
                                    <i class="ri-map-pin-line text-gray-400 mr-1"></i>
                                    <span>${address}</span>
                                </div>

                                <div class="flex items-center text-sm mb-3">
                                    <i class="ri-star-fill text-yellow-400 mr-1"></i>
                                    <span class="font-semibold text-gray-800">4.7</span>
                                    <span class="text-gray-500 ml-1">(124 đánh giá)</span>
                                </div>

                                <!-- Available time slots -->
                                <div class="mb-4">
                                    <div class="flex items-center text-sm text-gray-600 mb-2">
                                        <i class="ri-time-line mr-1"></i>
                                        <span>Khung giờ trống hôm nay:</span>
                                    </div>
                                    <div class="grid grid-cols-3 gap-1">
                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium time">${formatTimeForDisplay(item.OpenTime)}</span>
                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium time"><i class="ri-arrow-right-line" style="transform: scaleX(1.3);"></i></span>
                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium time">${formatTimeForDisplay(item.CloseTime)}</span>
                                        
                                    </div>
                                </div>

                                <div class="items-center justify-end">
                                    <div class="text-2xl font-bold text-blue-600">
                                        ${formattedPrice}<span class="text-sm font-normal text-gray-500">₫/giờ</span>
                                    </div>
                                    <button class="w-full mt-2 bg-blue-600 text-white px-6 py-2 rounded-lg text-sm font-semibold hover:bg-blue-700 transition-colors"
                                            onclick="redirectToBooking('${item.Id}')">
                                        Đặt ngay
                                    </button>
                                </div>
                            </div>
                        </div>`;
                        });
                                            if (skip === 0) {
                            $('#stadium-grid').html(html).show();
                        } else {
                            $('#stadium-grid').append(html);
                        }
                                } else {
                                    $('#stadium-grid').empty().hide();
                                }
                            },
                            error: function () {
                                $('#stadium-grid').empty().hide();
                                console.log('Error fetching suggestions');
                            }
                        });
                        }
                                        function formatTimeForDisplay(time) {
                            if (!time) return '--:--';

                            try {
                                if (typeof time === 'string') {
                                    if (time.startsWith('PT')) {
                                        const hoursMatch = time.match(/PT(\d+)H/);
                                        if (hoursMatch && hoursMatch[1]) {
                                            const hours = parseInt(hoursMatch[1]).toString().padStart(2, '0');
                                            return `${hours}:00`;
                                        }
                                    } else if (time.includes(':')) {
                                        const parts = time.split(':');
                                        if (parts.length >= 2) {
                                            const hours = parseInt(parts[0]).toString().padStart(2, '0');
                                            const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                                            return `${hours}:${minutes}`;
                                        }
                                    }
                                }

                                if (time instanceof Date) {
                                    const hours = time.getHours().toString().padStart(2, '0');
                                    const minutes = time.getMinutes().toString().padStart(2, '0');
                                    return `${hours}:${minutes}`;
                                }

                                return '--:--';
                            } catch (error) {
                                console.warn('Error formatting time for display:', error);
                                return '--:--';
                            }
                        }



                    </script>


                </div>
                <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
                <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />

                <div id="map-container" class="hidden bg-white rounded-lg shadow-sm overflow-hidden relative map-container" style="height: 650px; width: 100%;">
                    <div id="leaflet-map" style="height: 100%; width: 100%;"></div>
                </div>
                <div id="favorite-container" class="hidden bg-white rounded-lg shadow-sm overflow-hidden relative map-container">
                    <div id="favorite-list"  class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"></div>
                </div>

                <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
                <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"></script>

                <!-- Firebase SDK -->
                <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
                <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-database-compat.js"></script>

                <div class="text-center mt-8">
                    <button id="loadMoreBtn" class="bg-white text-primary border-2 border-primary px-8 py-3 !rounded-button font-semibold hover:bg-primary hover:text-white transition-colors whitespace-nowrap">
                        Load More Stadiums
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/static/surveys.js?v=1.259.0"></script>
    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/array/phc_t9tkQZJiyi2ps9zUYm8TDsL6qXo4YmZx0Ot5rBlAlEd/config.js"></script>
    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/static/dead-clicks-autocapture.js?v=1.259.0"></script>
    <script id="filter-functionality">
             // yêu thích


                        // Lấy các phần tử DOM
        const priceRange = document.querySelector('input[name="price"]');
        const priceInput = document.getElementById('priceInput');

        // Hàm định dạng số tiền theo chuẩn Việt Nam
        function formatPrice(value) {
          return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        }


        // Lắng nghe sự kiện thay đổi trên thanh trượt
        priceRange.addEventListener('input', function () {
          const value = this.value;
          priceInput.value = value; // Đồng bộ với ô input

        });

        // Lắng nghe sự kiện thay đổi trên ô input
        priceInput.addEventListener('input', function () {
          let value = parseInt(this.value) || 0; // Chuyển thành số, mặc định 0 nếu không hợp lệ
          // Giới hạn giá trị trong khoảng min/max
          if (value < 0) value = 0;
          if (value > 10000000) value = 10000000;
          priceRange.value = value; // Đồng bộ với thanh trượt
    
        });



        document.addEventListener('DOMContentLoaded', function() {
        const checkboxes = document.querySelectorAll('.custom-checkbox');
        checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
        console.log('Filter changed:', this.nextElementSibling.textContent, this.checked);
        });
        });
        const priceRange = document.querySelector('input[type="range"]');
        const priceDisplay = document.querySelector('.font-medium');
        priceRange.addEventListener('input', function() {
        priceDisplay.textContent = `$${this.value}/hour`;
        });
        });
    </script>
    <script id="time-slot-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const timeSlots = document.querySelectorAll('.time-slot');
        timeSlots.forEach(slot => {
        slot.addEventListener('click', function() {
        if (!this.classList.contains('unavailable')) {
        timeSlots.forEach(s => s.classList.remove('selected'));
        this.classList.add('selected');
        }
        });
        });
        });
    </script>
    <script id="view-toggle-functionality">
        document.addEventListener('DOMContentLoaded', function () {
            const gridViewBtn = document.getElementById('grid-view');
            const mapViewBtn = document.getElementById('map-view');
            const favoriteViewBtn = document.getElementById('compare-view'); // Nút Yêu thích

            const stadiumGridContainer = document.getElementById('stadium-grid');
            const mapContainer = document.getElementById('map-container');
            const favoriteContainer = document.getElementById('favorite-container');
            const loadMoreBtn = document.getElementById('loadMoreBtn');

            // Mảng chứa các nút và container tương ứng để dễ quản lý
            const views = [
                { btn: gridViewBtn, container: stadiumGridContainer },
                { btn: mapViewBtn, container: mapContainer },
                { btn: favoriteViewBtn, container: favoriteContainer }
            ];

            function setActiveView(activeView) {
                // Lặp qua tất cả các view
                views.forEach(view => {
                    // Nếu là view đang được kích hoạt
                    if (view === activeView) {
                        view.container.classList.remove('hidden');
                        view.btn.classList.add('active-btn'); // Sử dụng class 'active-btn' bạn đã định nghĩa
                    } else { // Nếu là các view khác
                        view.container.classList.add('hidden');
                        view.btn.classList.remove('active-btn');
                    }
                });

                // Xử lý riêng cho nút "Load More"
                // Chỉ hiển thị nút này khi ở chế độ xem danh sách (grid view)
                if (activeView.container === stadiumGridContainer) {
                    loadMoreBtn.classList.remove('hidden');
                } else {
                    loadMoreBtn.classList.add('hidden');
                }

                // Xử lý riêng cho bản đồ Leaflet
                if (activeView.container === mapContainer) {
                    // Cần gọi invalidateSize để bản đồ render đúng kích thước sau khi được hiển thị
                    setTimeout(() => {
                        if (window.leafletMap) {
                            window.leafletMap.invalidateSize();
                        }
                    }, 10);
                }
            }

            // Gán sự kiện click cho các nút
            gridViewBtn.addEventListener('click', () => setActiveView(views[0]));
            mapViewBtn.addEventListener('click', () => setActiveView(views[1]));
            favoriteViewBtn.addEventListener('click', () => {
                setActiveView(views[2]);
                // Luôn làm mới danh sách yêu thích khi người dùng bấm vào
                if (window.displayMyFavorites) {
                    window.displayMyFavorites();
                }
            });

            // Thiết lập trạng thái ban đầu khi tải trang
            setActiveView(views[0]);
        });
    </script>

    <script id="comparison-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const compareCheckboxes = document.querySelectorAll('.compare-checkbox');
        let selectedStadiums = [];
        compareCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
        const stadiumCard = this.closest('.bg-white');
        const stadiumName = stadiumCard.querySelector('h3').textContent;
        if (this.checked) {
        if (selectedStadiums.length < 3) {
        selectedStadiums.push(stadiumName);
        } else {
        this.checked = false;
        alert('You can compare up to 3 stadiums at a time.');
        }
        } else {
        selectedStadiums = selectedStadiums.filter(name => name !== stadiumName);
        }
        });
        });
        document.getElementById('clear-comparison').addEventListener('click', function() {
        compareCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
        });
        selectedStadiums = [];
        });
        });
    </script>
    <script id="booking-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const bookButtons = document.querySelectorAll('button');
        bookButtons.forEach(button => {
        if (button.textContent.includes('Book Now')) {
        button.addEventListener('click', function() {
        const card = this.closest('.bg-white');
        const stadiumName = card.querySelector('h3').textContent;
        alert(`Booking ${stadiumName}...`);
        });
        }
        });
        });
    </script>
    <script>
        !function (t, e) { var o, n, p, r; e.__SV || (window.posthog = e, e._i = [], e.init = function (i, s, a) { function g(t, e) { var o = e.split("."); 2 == o.length && (t = t[o[0]], e = o[1]), t[e] = function () { t.push([e].concat(Array.prototype.slice.call(arguments, 0))) } } (p = t.createElement("script")).type = "text/javascript", p.crossOrigin = "anonymous", p.async = !0, p.src = s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js", (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r); var u = e; for (void 0 !== a ? u = e[a] = [] : a = "posthog", u.people = u.people || [], u.toString = function (t) { var e = "posthog"; return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e }, u.people.toString = function () { return u.toString(1) + ".people (stub)" }, o = "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "), n = 0; n < o.length; n++)g(u, o[n]); e._i.push([i, s, a]) }, e.__SV = 1) }(document, window.posthog || []);
        posthog.init('phc_t9tkQZJiyi2ps9zUYm8TDsL6qXo4YmZx0Ot5rBlAlEd', {
            api_host: 'https://us.i.posthog.com',
            autocapture: false,
            capture_pageview: false,
            capture_pageleave: false,
            capture_performance: {
                web_vitals: false,
            },
            rageclick: false,
        })
        window.shareKey = 'gmUdOLhI0Qeo-104cpo0jg';
        window.host = 'readdy.ai';
    </script>
    <script>
        let leafletMap = null;
        let userLat, userLng;
        let routingControl = null;
        let radiusCircle = null;
        let radius = 5000;

        const firebaseConfig = {
          apiKey: "AIzaSyCg6rxISbUgZKNqqLlkBrYS_sQtkYRaByo",
          authDomain: "chatbox-993b2.firebaseapp.com",
          databaseURL: "https://chatbox-993b2-default-rtdb.firebaseio.com/",
          projectId: "chatbox-993b2",
          storageBucket: "chatbox-993b2.firebasestorage.app",
          messagingSenderId: "168483987205",
          appId: "1:168483987205:web:c9ef776901ec2882bb616c"
        };
        firebase.initializeApp(firebaseConfig);
        const db = firebase.database();

        const searchTags = [
          '[sport=badminton]',
          '[sport=football]',
          '[sport=tennis]',
          '[sport=basketball]',
          '[sport=swimming]',
          '[sport=volleyball]'
        ];

        let courtMarkers = [];

        function initMap() {
            if (leafletMap) return;

            leafletMap = L.map('leaflet-map').setView([0, 0], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
              attribution: '© OpenStreetMap contributors'
            }).addTo(leafletMap);

            const radiusControl = L.control({ position: 'topright' });
            radiusControl.onAdd = function () {
                let div = L.DomUtil.create('div', 'radius-control');
                div.innerHTML = `
                    <label>Bán kính:
                        <select id="radiusSelect">
                            <option value="5000" selected>5 km</option>
                            <option value="10000">10 km</option>
                            <option value="15000">15 km</option>
                        </select>
                    </label>
                `;
                div.querySelector('#radiusSelect').addEventListener('change', function () {
                    updateRadius(Number(this.value));
                });
                return div;
            };
            radiusControl.addTo(leafletMap);

            getUserLocation();
        }

        function getUserLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(pos => {
                    userLat = pos.coords.latitude;
                    userLng = pos.coords.longitude;
                    leafletMap.setView([userLat, userLng], 13);

                    L.marker([userLat, userLng], {
                        icon: L.icon({
                            iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',
                            iconSize: [32, 32]
                        })
                    }).addTo(leafletMap).bindPopup("Vị trí của bạn");

                    radiusCircle = L.circle([userLat, userLng], {
                        color: "#2980b9",
                        fillColor: "#2980b9",
                        fillOpacity: 0.15,
                        radius: radius
                    }).addTo(leafletMap);

                    loadBadmintonCourts();
                }, () => {
                    alert("Không lấy được vị trí của bạn.");
                });
            } else {
                alert("Trình duyệt không hỗ trợ định vị.");
            }
        }

        function addMarker(lat, lon, name, icon) {
            let marker = L.marker([lat, lon]).addTo(leafletMap).bindPopup(`${icon} ${name}`);
            courtMarkers.push(marker);
            marker.on('click', () => {
                if (routingControl) {
                    leafletMap.removeControl(routingControl);
                    routingControl = null;
                } else {
                    routingControl = L.Routing.control({
                        waypoints: [
                            L.latLng(userLat, userLng),
                            L.latLng(lat, lon)
                        ],
                        lineOptions: { styles: [{ color: 'red', weight: 4 }] },
                        routeWhileDragging: false,
                        createMarker: function() { return null; }
                    }).addTo(leafletMap);
                }
            });
        }

        function clearCourtMarkers() {
            courtMarkers.forEach(marker => leafletMap.removeLayer(marker));
            courtMarkers = [];
        }

        function distanceInMeters(lat1, lon1, lat2, lon2) {
            const R = 6371000;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a =
                Math.sin(dLat / 2) ** 2 +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) ** 2;
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function loadBadmintonCourts() {
            if (!userLat || !userLng) {
                console.warn("Vị trí người dùng chưa có, không thể load sân.");
                return;
            }

            clearCourtMarkers();

            searchTags.forEach(tag => {
                const query = `
                [out:json];
                (
                    node(around:${radius},${userLat},${userLng})${tag};
                    way(around:${radius},${userLat},${userLng})${tag};
                    relation(around:${radius},${userLat},${userLng})${tag};
                );
                out center;`;

                fetch('https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query))
                .then(res => res.json())
                .then(data => {
                    if (!data.elements) return;

                    data.elements.forEach(place => {
                        let lat, lon;
                        if (place.type === 'node') {
                            lat = place.lat;
                            lon = place.lon;
                        } else if ((place.type === 'way' || place.type === 'relation') && place.center) {
                            lat = place.center.lat;
                            lon = place.center.lon;
                        } else {
                            return; // Không có tọa độ
                        }

                        let dist = distanceInMeters(userLat, userLng, lat, lon);
                        if (dist <= radius) {
                                   let name = 'Sân thể thao';

        if (place.tags) {
            if (place.tags.name) {
                name = place.tags.name;
            } else if (place.tags.ref) {
                name = place.tags.ref;
            } else if (place.tags.description) {
                name = place.tags.description;
            } else if (place.tags.operator) {
                name = place.tags.operator;
            }
        }

                            let icon = '🏸'; // mặc định icon

                            if (tag.includes('Bóng đá')) icon = '⚽';
                            else if (tag.includes('Tennis')) icon = '🎾';
                            else if (tag.includes('Bóng rổ')) icon = '🏀';
                            else if (tag.includes('Bơi lội')) icon = '🏊‍♂️';
                            else if (tag.includes('Bóng chuyền')) icon = '🏐';

                            addMarker(lat, lon, name, icon);
                        }
                    });
                })
                .catch(e => console.error("Lỗi khi lấy dữ liệu Overpass:", e));
            });

            // Load custom places Firebase
            db.ref("customPlaces").once("value")
                .then(snapshot => {
                    let places = snapshot.val();
                    if (!places) return;

                    Object.values(places).forEach(place => {
                        if (place.lat && place.lng) {
                            let dist = distanceInMeters(userLat, userLng, place.lat, place.lng);
                            if (dist <= radius) {
                                addMarker(place.lat, place.lng, place.name, "📍");
                            }
                        }
                    });
                })
                .catch(e => console.error("Lỗi khi lấy dữ liệu Firebase:", e));
        }

        function updateRadius(newRadius) {
            radius = newRadius;

            if (radiusCircle) {
                radiusCircle.setRadius(radius);
            }

            clearCourtMarkers();

            loadBadmintonCourts();
        }

        document.addEventListener('DOMContentLoaded', function() {
            const mapView = document.getElementById('map-view');

            mapView.addEventListener('click', function() {
                document.getElementById('stadium-grid').classList.add('hidden');
                document.getElementById('map-container').classList.remove('hidden');

                setTimeout(() => {
                    initMap();
                    if (leafletMap) {
                        leafletMap.invalidateSize();
                    }
                }, 100);
            });
        });
    </script>


    <script>
        const apiKey = "cb2f4e21d59a4539b2681658251008";

        function getWeather(lat, lon) {
            fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&lang=vi`)
                .then(res => res.json())
                .then(data => {
                    if (data.location) {
                        document.getElementById("status").innerText = `${data.location.name}, ${data.location.region}`;
                        document.getElementById("weather").innerText = `${data.current.temp_c}°C`;
                        document.getElementById("condition").innerText = data.current.condition.text;
                        document.getElementById("icon").src = "https:" + data.current.condition.icon;
                    } else {
                        document.getElementById("status").innerText = "Lỗi khi lấy dữ liệu!";
                    }
                })
                .catch(() => {
                    document.getElementById("status").innerText = "Không thể kết nối API!";
                });
        }

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                pos => {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;
                    getWeather(lat, lon);
                },
                () => {
                    document.getElementById("status").innerText = "Không thể lấy vị trí!";
                }
            );
        } else {
            document.getElementById("status").innerText = "Trình duyệt không hỗ trợ GPS!";
        }



        function setBackgroundByWeather(condition) {
            let bgColor = "#007bff"; // mặc định xanh dương

            if (condition.includes("Mưa")) bgColor = "#4a90e2";
            else if (condition.includes("Nắng")) bgColor = "#f39c12";
            else if (condition.includes("Tuyết")) bgColor = "#b3e5fc";
            else if (condition.includes("Mây")) bgColor = "#95a5a6";

            document.body.style.background = bgColor;
        }

        function redirectToBooking(stadiumId) {
            if (stadiumId) {
                window.location.href = `/Stadium/StadiumDetail?stadiumId=${stadiumId}`;
            }
        }
    </script>

</body>
</html>