<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stadium Booking Platform</title>
    <script src="https://cdn.tailwindcss.com/3.4.16">

    </script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="js/app.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
    <style>
        
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f0f4f8;
            color: #333;
            display: flex;
            flex-direction: column;
        }

   
        #map {
            flex-grow: 1;
            min-height: 650px;
        }

      
        input[type="checkbox"] {
            accent-color: #2563eb; /* Blue-600 */
            cursor: pointer;
        }

       
        .time-slot {
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .time-slot.selected {
                background-color: #2563eb;
                color: white;
                border-color: #2563eb;
            }

            .time-slot.unavailable {
                background-color: #f3f4f6;
                color: #6b7280;
                cursor: not-allowed;
            }

        
        .radius-control {
            background: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 16px;
            box-shadow: 0 3px 8px rgba(0,0,0,0.15);
            user-select: none;
            width: 140px;
            font-weight: 600;
            color: #2c3e50;
        }

            .radius-control label {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .radius-control select {
                padding: 5px 8px;
                border-radius: 6px;
                border: 1px solid #ccc;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: border-color 0.3s ease;
                margin-left: 5px;
            }

                .radius-control select:hover,
                .radius-control select:focus {
                    border-color: #2980b9;
                    outline: none;
                }

        .weather-card {
            background: linear-gradient(to top, #74ebd5, #ACB6E5);
            color: white;
            padding: 20px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            animation: fadeIn 0.5s ease-in-out;
            box-sizing: border-box;
            margin-bottom: 10px;
        }

        .icon {
            width: 60px;
            height: 60px;
        }

        .temp {
            font-size: 2rem;
            font-weight: bold;
        }

        .location {
            font-size: 1.2rem;
        }

        .card-content {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

       
        .leaflet-popup-content-wrapper {
            font-size: 16px;
            font-weight: 600;
        }

        .marker-label {
            background: white;
            padding: 2px 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            font-weight: 600;
            font-size: 14px;
            white-space: nowrap;
        }

       
        #search-box {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1000;
            background: white;
            padding: 8px;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            display: flex;
            gap: 5px;
            align-items: center;
        }

        #addressInput {
            width: 200px;
            padding: 5px 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }

       
        .btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: #2980b9;
            color: white;
        }

            .btn-primary:hover {
                background-color: #21618c;
            }

        .btn-secondary {
            background-color: #27ae60;
            color: white;
        }

            .btn-secondary:hover {
                background-color: #1e8449;
            }

       
        #grid-view, #map-view, #compare-view {
            transition: all 0.3s ease;
        }

            #grid-view.bg-primary, #map-view.bg-primary, #compare-view.bg-primary {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }
    </style>


</head>
    

<body class="bg-gray-50" data-new-gr-c-s-check-loaded="14.1116.0" data-gr-ext-installed="">

    <section class="relative h-80 bg-cover bg-center" style="background-image: url('https://readdy.ai/api/search-image?query=Modern%20sports%20stadium%20complex%20aerial%20view%20with%20multiple%20fields%2C%20green%20grass%2C%20stadium%20lights%2C%20parking%20areas%2C%20clear%20blue%20sky%20background%2C%20professional%20sports%20facilities%2C%20vibrant%20and%20energetic%20atmosphere%2C%20high-quality%20architectural%20photography%2C%20clean%20and%20inspiring%20sports%20venue%20complex&amp;width=1200&amp;height=320&amp;seq=hero002&amp;orientation=landscape')">
        <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center">
            <div class="w-full text-center text-white">
                <h1 class="text-4xl font-bold mb-4">Discover Premium Stadiums</h1>
                <p class="text-lg mb-6 max-w-2xl mx-auto">Browse our extensive collection of world-class sports facilities. Find the perfect venue for your next game, training session, or event.</p>
                <div class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto">
                    <button class="bg-primary text-white px-6 py-3 !rounded-button font-semibold hover:bg-blue-600 transition-colors whitespace-nowrap">
                        Explore Stadiums
                    </button>
                    <button class="bg-white text-gray-900 px-6 py-3 !rounded-button font-semibold hover:bg-gray-100 transition-colors whitespace-nowrap">
                        How It Works
                    </button>
                </div>
            </div>
        </div>
    </section>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="weather-card">
            <h1>Thời tiết hiện tại</h1>
            <p id="status" class="location">Đang lấy vị trí...</p>
            <img id="icon" class="icon" src="" alt="">
            <p id="weather" class="temp"></p>
            <p id="condition" class="condition"></p>
        </div>

        <div class="flex flex-col lg:flex-row gap-8">
            
            <div class="w-full lg:w-80 bg-white rounded-lg shadow-sm p-6 h-fit">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-lg font-semibold">Filter Results</h3>
                    <button class="text-sm text-primary hover:text-blue-600">Clear All</button>
                </div>

                <form id="sportFilterForm">
                    <!-- Sport Type -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Sport Type</h4>
                        <div class="space-y-2">
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Bóng đá" class="custom-checkbox">
                                <span class="text-sm">Bóng đá</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Bóng rổ" class="custom-checkbox">
                                <span class="text-sm">Bóng rổ</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Tennis" class="custom-checkbox">
                                <span class="text-sm">Tennis</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Bóng chuyền" class="custom-checkbox">
                                <span class="text-sm">Bóng chuyền</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Cầu lông" class="custom-checkbox">
                                <span class="text-sm">Cầu lông</span>
                            </label>
                            <label class="flex items-center space-x-3 cursor-pointer">
                                <input type="checkbox" name="sport_type[]" value="Multi-Sport" class="custom-checkbox">
                                <span class="text-sm">Multi-Sport</span>
                            </label>
                        </div>
                    </div>

                    <!-- Select Date -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Select Date</h4>
                        <input type="date" name="date" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none text-sm">
                    </div>

                    <!-- Available Time -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Available Time</h4>
                        <div class="grid grid-cols-2 sm:grid-cols-4 gap-2">
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="06:00" class="hidden">
                                06:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="08:00" class="hidden">
                                08:00
                            </label>
                            <label class="time-slot selected p-2 text-sm border border-gray-300 rounded text-center">
                                <input type="radio" name="time" value="10:00" class="hidden" checked>
                                10:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="12:00" class="hidden">
                                12:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="14:00" class="hidden">
                                14:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="16:00" class="hidden" >
                                16:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="18:00" class="hidden">
                                18:00
                            </label>
                            <label class="time-slot p-2 text-sm border border-gray-300 rounded text-center hover:border-primary">
                                <input type="radio" name="time" value="20:00" class="hidden">
                                20:00
                            </label>
                        </div>
                    </div>

                    <!-- Price Range -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Price Range</h4>
                        <div class="px-2">
                            <input type="range" name="price" min="0" max="10000000" value="250" class="w-full mb-2">
                            <div class="flex justify-between text-sm text-gray-600">
                                <span>$0</span>
                                <span class="font-medium">$<span id="priceValue">250</span>/hour</span>
                                <span>$10000000</span>
                            </div>
                        </div>
                    </div>

                    

                    <!-- Location -->
                    <div class="mb-6">
                        <h4 class="font-medium mb-3">Location</h4>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <div class="w-4 h-4 flex items-center justify-center">
                                    <i class="ri-map-pin-line text-gray-400"></i>
                                </div>
                            </div>
                            <input type="text" name="location" placeholder="Enter location" class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none text-sm">
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="w-full bg-primary text-white py-3 !rounded-button font-semibold hover:bg-blue-600 transition-colors whitespace-nowrap">
                        Apply Filters
                    </button>
                </form>

            </div>
            <div class="flex-1">
                <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6">
                    <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                        <span class="text-gray-600 whitespace-nowrap">124 stadiums found</span>
                        <div class="flex items-center gap-2">
                            <span class="text-sm text-gray-600">Sort by:</span>
                            <button class="flex items-center space-x-1 px-3 py-2 border border-gray-300 rounded-lg text-sm hover:border-primary transition-colors">
                                <span>Popularity</span>
                                <div class="w-4 h-4 flex items-center justify-center">
                                    <i class="ri-arrow-down-s-line"></i>
                                </div>
                            </button>
                        </div>
                    </div>
                    <div class="flex items-center space-x-2 mb-6">
                        <button type="button" id="grid-view" class="p-2 border border-gray-300 rounded-lg hover:border-primary transition-colors bg-primary text-white">
                            <div class="w-5 h-5 flex items-center justify-center">
                                <i class="ri-grid-line"></i>
                            </div>
                        </button>
                        <button type="button" id="map-view" class="p-2 border border-gray-300 rounded-lg hover:border-primary transition-colors">
                            <div class="w-5 h-5 flex items-center justify-center">
                                <i class="ri-map-line"></i>
                            </div>
                        </button>
                        <button type="button" id="compare-view" class="p-2 border border-gray-300 rounded-lg hover:border-primary transition-colors">
                            <div class="w-5 h-5 flex items-center justify-center">
                                <i class="ri-scales-line"></i>
                            </div>
                        </button>
                    </div>
                </div>
                <div id="stadium-grid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                    <script>
                        $(document).ready(function() {
                                //get all by ajax
                                                      
                        });
                                                // Get the form element
                                                                                            $(document).ready(function() {
                                                                                                let skip = 0;
                        const top = 9; // Number of items per page
                                                                                                 $('#stadium-grid').empty().hide(); // Clear previous results
                                          displayList("", top, skip);
                            const form = $('#sportFilterForm'); // or $('#myForm') if using an ID
                            form.on('submit', function(e) {
                                e.preventDefault();


                                                let filters = [];

                        // Location
                        let location = this.querySelector('input[name="location"]').value.trim();
                        if (location) {
                            filters.push(`contains(Address,'${location}')`);
                        }

                        // Sport type (có thể nhiều cái => or)
                        let sportTypes = [...this.querySelectorAll('input[name="sport_type[]"]:checked')]
                            .map(cb => `Courts/any(c: c/SportType eq '${cb.value}')`);
                        if (sportTypes.length > 0) {
                            filters.push("(" + sportTypes.join(" or ") + ")");
                        }

                        // Price
                        let price = this.querySelector('input[name="price"]').value;
                        if (price) {
                            filters.push(`Courts/any(c: c/PricePerHour le ${price})`);
                        }

                        // Time (convert sang duration)
                        let time = this.querySelector('input[name="time"]:checked')?.value;
                        if (time) {
                            let [hh, mm] = time.split(":");
                                                    let duration;
                        if (mm && parseInt(mm) > 0) {
                            duration = `duration'PT${parseInt(hh)}H${parseInt(mm)}M'`;
                        } else {
                            duration = `duration'PT${parseInt(hh)}H'`;
                        }

                        }

                        // Nối filter
                        let filterString = filters.join(" and ");
                        let finalUrl = "&$filter=" + encodeURIComponent(filterString);
                        console.log(finalUrl);
                        sessionStorage.setItem('searchTerm', finalUrl); // Lưu search term vào sessionStorage
                        displayList(finalUrl, top, skip);
                        });
                                   $('#loadMoreBtn').on("click", function () {
                            console.log('Button clicked!');
                            

                            var count = sessionStorage.getItem('stadiumCount') || 0;
                            var url = sessionStorage.getItem('searchTerm') || "";

                            skip += 9;
                            if (skip + 9 >= count ){
                                skip -= (skip + 9) - count; // Giảm skip nếu vượt quá số lượng
                                $('#loadMoreBtn').hide(); // Ẩn nút nếu không còn dữ liệu
                            }
                            skip = 0;
                            console.log('URL:', url);
                            displayList(url, top, skip);
                        });
                        });
                                            
                            // You can now use formData object to process or send the data

                        
                        

                        // danh sach san pham truoc va sau khi search
                        function displayList(searchTerm, top, skip){
                            var searchUrl = searchTerm + `&$top=${top}&$skip=${skip}`;
                            console.log(searchUrl);
     
                                                                           $.ajax({
                            url: '/Home/Stadiums', // Endpoint for POST request
                            type: 'POST',
                            data: {searchTerm: searchUrl},
                            success: function (data) {
                                const count = data["@@odata.count"];
                                sessionStorage.setItem('stadiumCount', count); // Lưu số lượng sân vào sessionStorage
                                let html = '';
                                if (data.value && data.value.length > 0) {
                                    data.value.forEach(function (item) {
                                        let imageUrl = item.StadiumImages.length > 0 ? item.StadiumImages[0].ImageUrl : 'default.jpg';
                                        let price = item.Courts.length > 0 ? item.Courts[0].PricePerHour : 0;
                                        // Removed console.log(item.val) as 'val' is not defined in the data structure

                                        // Format tiền Việt Nam
                                        let formattedPrice = new Intl.NumberFormat('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND'
                                        }).format(price);
                                        let address = item.Address ?? '';

                                        html += `<div class="card-content bg-white rounded-2xl shadow-sm overflow-hidden hover:shadow-lg transition-shadow duration-300">
                                            <div class="relative h-48">
                                                <img src="https://localhost:7280/${imageUrl}" alt="Stadium" class="w-full h-full object-cover">

                                                <!-- Hot badge -->
                                                <div class="absolute top-3 right-3 bg-red-500 text-white px-2 py-1 rounded-md text-xs font-semibold">
                                                    Hot
                                                </div>

                                                <!-- Sport type badge -->
                                                <div class="absolute bottom-3 left-3 bg-white/90 backdrop-blur-sm px-3 py-1.5 rounded-full text-sm font-medium text-gray-800">
                                                    ${item.Courts[0].SportType}
                                                </div>
                                            </div>

                                            <div class="p-4">
                                                <h3 class="font-bold text-lg text-gray-900 mb-1">${item.Name}</h3>

                                                <div class="flex items-center text-gray-500 text-sm mb-2">
                                                    <i class="ri-map-pin-line text-gray-400 mr-1"></i>
                                                    <span>${address}</span>
                                                </div>

                                                <div class="flex items-center text-sm mb-3">
                                                    <i class="ri-star-fill text-yellow-400 mr-1"></i>
                                                    <span class="font-semibold text-gray-800">4.7</span>
                                                    <span class="text-gray-500 ml-1">(124 đánh giá)</span>
                                                </div>

                                                <!-- Available time slots -->
                                                <div class="mb-4">
                                                    <div class="flex items-center text-sm text-gray-600 mb-2">
                                                        <i class="ri-time-line mr-1"></i>
                                                        <span>Khung giờ trống hôm nay:</span>
                                                    </div>
                                                    <div class="grid grid-cols-4 gap-1">
                                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium">09:00</span>
                                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium">11:00</span>
                                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium">14:00</span>
                                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium">17:00</span>
                                                    </div>
                                                </div>

                                                <div class=" items-center justify-end">
                                                    <div class="text-2xl font-bold text-blue-600">
                                                        ${formattedPrice}<span class="text-sm font-normal text-gray-500">₫/giờ</span>
                                                    </div>
                                                    <button class="w-full mt-2 bg-blue-600 text-white px-6 py-2 rounded-lg text-sm font-semibold hover:bg-blue-700 transition-colors">
                                                        Đặt ngay
                                                    </button>
                                                </div>
                                            </div>
                                        </div>`;
                                    });
                                            if (skip === 0) {
                            $('#stadium-grid').html(html).show();
                        } else {
                            $('#stadium-grid').append(html);
                        }
                                } else {
                                    $('#stadium-grid').empty().hide();
                                }
                            },
                            error: function () {
                                $('#stadium-grid').empty().hide();
                                console.log('Error fetching suggestions');
                            }
                        });
                        }



                                                                              
                    </script>
                    
                   
                </div>
                <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
                <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />

                <div id="map-container" class="hidden bg-white rounded-lg shadow-sm overflow-hidden relative map-container" style="height: 650px; width: 100%;">
                    <div id="map"></div>

                    <div id="search-box">
                        <input type="text" id="addressInput" placeholder="Nhập địa chỉ..." />
                        <button class="btn btn-primary" onclick="searchAddress()">Tìm</button>
                        <button class="btn btn-secondary" onclick="getCurrentLocation()" title="Quay lại vị trí hiện tại">📍 Vị trí hiện tại</button>
                    </div>
                </div>

                <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
                <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"></script>

                <!-- Firebase SDK -->
                <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
                <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-database-compat.js"></script>

                <div class="text-center mt-8" >
                    <button id="loadMoreBtn" class="bg-white text-primary border-2 border-primary px-8 py-3 !rounded-button font-semibold hover:bg-primary hover:text-white transition-colors whitespace-nowrap">
                        Load More Stadiums
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/static/surveys.js?v=1.259.0"></script>
    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/array/phc_t9tkQZJiyi2ps9zUYm8TDsL6qXo4YmZx0Ot5rBlAlEd/config.js"></script>
    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/static/dead-clicks-autocapture.js?v=1.259.0"></script>
    <script id="filter-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const checkboxes = document.querySelectorAll('.custom-checkbox');
        checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
        console.log('Filter changed:', this.nextElementSibling.textContent, this.checked);
        });
        });
        const priceRange = document.querySelector('input[type="range"]');
        const priceDisplay = document.querySelector('.font-medium');
        priceRange.addEventListener('input', function() {
        priceDisplay.textContent = `$${this.value}/hour`;
        });
        });
    </script>
    <script id="time-slot-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const timeSlots = document.querySelectorAll('.time-slot');
        timeSlots.forEach(slot => {
        slot.addEventListener('click', function() {
        if (!this.classList.contains('unavailable')) {
        timeSlots.forEach(s => s.classList.remove('selected'));
        this.classList.add('selected');
        }
        });
        });
        });
    </script>
    <script id="view-toggle-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const gridView = document.getElementById('grid-view');
        const mapView = document.getElementById('map-view');
        const compareView = document.getElementById('compare-view');
        const stadiumGrid = document.getElementById('stadium-grid');
        const mapContainer = document.getElementById('map-container');
        const comparisonTable = document.getElementById('comparison-table');
        gridView.addEventListener('click', function() {
        stadiumGrid.classList.remove('hidden');
        mapContainer.classList.add('hidden');
        comparisonTable.classList.remove('active');
        gridView.classList.add('bg-primary', 'text-white');
        mapView.classList.remove('bg-primary', 'text-white');
        compareView.classList.remove('bg-primary', 'text-white');
        });
        mapView.addEventListener('click', function() {
        stadiumGrid.classList.add('hidden');
        mapContainer.classList.remove('hidden');
        comparisonTable.classList.remove('active');
        mapView.classList.add('bg-primary', 'text-white');
        gridView.classList.remove('bg-primary', 'text-white');
        compareView.classList.remove('bg-primary', 'text-white');
        });
        compareView.addEventListener('click', function() {
        stadiumGrid.classList.add('hidden');
        mapContainer.classList.add('hidden');
        comparisonTable.classList.add('active');
        compareView.classList.add('bg-primary', 'text-white');
        gridView.classList.remove('bg-primary', 'text-white');
        mapView.classList.remove('bg-primary', 'text-white');
        });
        });
    </script>
    <script id="wishlist-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const heartButtons = document.querySelectorAll('[class*="ri-heart"]');
        heartButtons.forEach(button => {
        button.addEventListener('click', function() {
        if (this.classList.contains('ri-heart-line')) {
        this.classList.remove('ri-heart-line');
        this.classList.add('ri-heart-fill', 'text-red-500');
        } else {
        this.classList.remove('ri-heart-fill', 'text-red-500');
        this.classList.add('ri-heart-line');
        }
        });
        });
        });
    </script>
    <script id="comparison-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const compareCheckboxes = document.querySelectorAll('.compare-checkbox');
        let selectedStadiums = [];
        compareCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
        const stadiumCard = this.closest('.bg-white');
        const stadiumName = stadiumCard.querySelector('h3').textContent;
        if (this.checked) {
        if (selectedStadiums.length < 3) {
        selectedStadiums.push(stadiumName);
        } else {
        this.checked = false;
        alert('You can compare up to 3 stadiums at a time.');
        }
        } else {
        selectedStadiums = selectedStadiums.filter(name => name !== stadiumName);
        }
        });
        });
        document.getElementById('clear-comparison').addEventListener('click', function() {
        compareCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
        });
        selectedStadiums = [];
        });
        });
    </script>
    <script id="booking-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const bookButtons = document.querySelectorAll('button');
        bookButtons.forEach(button => {
        if (button.textContent.includes('Book Now')) {
        button.addEventListener('click', function() {
        const card = this.closest('.bg-white');
        const stadiumName = card.querySelector('h3').textContent;
        alert(`Booking ${stadiumName}...`);
        });
        }
        });
        });
    </script>
    <script>
        !function (t, e) { var o, n, p, r; e.__SV || (window.posthog = e, e._i = [], e.init = function (i, s, a) { function g(t, e) { var o = e.split("."); 2 == o.length && (t = t[o[0]], e = o[1]), t[e] = function () { t.push([e].concat(Array.prototype.slice.call(arguments, 0))) } } (p = t.createElement("script")).type = "text/javascript", p.crossOrigin = "anonymous", p.async = !0, p.src = s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js", (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r); var u = e; for (void 0 !== a ? u = e[a] = [] : a = "posthog", u.people = u.people || [], u.toString = function (t) { var e = "posthog"; return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e }, u.people.toString = function () { return u.toString(1) + ".people (stub)" }, o = "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "), n = 0; n < o.length; n++)g(u, o[n]); e._i.push([i, s, a]) }, e.__SV = 1) }(document, window.posthog || []);
        posthog.init('phc_t9tkQZJiyi2ps9zUYm8TDsL6qXo4YmZx0Ot5rBlAlEd', {
            api_host: 'https://us.i.posthog.com',
            autocapture: false,
            capture_pageview: false,
            capture_pageleave: false,
            capture_performance: {
                web_vitals: false,
            },
            rageclick: false,
        })
        window.shareKey = 'gmUdOLhI0Qeo-104cpo0jg';
        window.host = 'readdy.ai';
    </script>
    <script>
        // Firebase config
        const firebaseConfig = {
          apiKey: "AIzaSyCg6rxISbUgZKNqqLlkBrYS_sQtkYRaByo",
          authDomain: "chatbox-993b2.firebaseapp.com",
          databaseURL: "https://chatbox-993b2-default-rtdb.firebaseio.com/",
          projectId: "chatbox-993b2",
          storageBucket: "chatbox-993b2.firebasestorage.app",
          messagingSenderId: "168483987205",
          appId: "1:168483987205:web:c9ef776901ec2882bb616c"
        };
        firebase.initializeApp(firebaseConfig);
        const db = firebase.database();

        let radius = 5000; // 5km default
        let userLat, userLng;
        let currentLat, currentLng; // Lưu vị trí hiện tại ban đầu
        let routingControl = null;
        let radiusCircle = null;
        const map = L.map('map').setView([0, 0], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        function clearRoute() {
          if (routingControl) {
            map.removeControl(routingControl);
            routingControl = null;
          }
        }

        function addMarker(lat, lon, name, icon) {
          let marker = L.marker([lat, lon]).addTo(map);
          marker.bindTooltip(`${icon} ${name}`, {
            permanent: true,
            direction: 'top',
            offset: [0, -10],
            className: 'marker-label'
          }).openTooltip();

          marker.on('click', () => {
            if (routingControl) {
              clearRoute();
            } else {
              routingControl = L.Routing.control({
                waypoints: [
                  L.latLng(userLat, userLng),
                  L.latLng(lat, lon)
                ],
                lineOptions: { styles: [{ color: 'red', weight: 4 }] },
                routeWhileDragging: false,
                createMarker: () => null
              }).addTo(map);
            }
          });
        }

        function distanceInMeters(lat1, lon1, lat2, lon2) {
          const R = 6371000;
          const dLat = (lat2 - lat1) * Math.PI / 180;
          const dLon = (lon2 - lon1) * Math.PI / 180;
          const a = Math.sin(dLat/2)**2 +
                    Math.cos(lat1*Math.PI/180)*Math.cos(lat2*Math.PI/180)*Math.sin(dLon/2)**2;
          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
          return R * c;
        }

        const searchTags = ['[sport=badminton]', '[name~"cầu lông",i]'];
        const searchLabel = 'Sân cầu lông';
        const searchIcon = '🏸';

        function loadOverpassData() {
          searchTags.forEach(tag => {
            const query = `
              [out:json];
              (
                node(around:${radius},${userLat},${userLng})${tag};
                way(around:${radius},${userLat},${userLng})${tag};
                relation(around:${radius},${userLat},${userLng})${tag};
              );
              out center;
            `;
            fetch('https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query))
              .then(res => res.json())
              .then(data => {
                data.elements.forEach(place => {
                  let lat, lon;
                  if (place.type === 'node') {
                    lat = place.lat;
                    lon = place.lon;
                  } else if ((place.type === 'way' || place.type === 'relation') && place.center) {
                    lat = place.center.lat;
                    lon = place.center.lon;
                  } else {
                    return;
                  }

                  let dist = distanceInMeters(userLat, userLng, lat, lon);
                  if (dist <= radius) {
                    let name = searchLabel;
                    if (place.tags) {
                      if (place.tags.name) name = place.tags.name;
                      else if (place.tags.ref) name = place.tags.ref;
                      else if (place.tags.description) name = place.tags.description;
                      else if (place.tags.operator) name = place.tags.operator;
                      else if (place.tags.sport === 'badminton') name = 'Cầu Lông';
                    }
                    addMarker(lat, lon, name, searchIcon);
                  }
                });
              })
              .catch(e => console.error('Lỗi Overpass:', e));
          });
        }

        function loadFirebaseData() {
          db.ref("customPlaces").once("value")
            .then(snapshot => {
              let places = snapshot.val();
              if (!places) return;

              Object.values(places).forEach(place => {
                if (place.lat && place.lng) {
                  let dist = distanceInMeters(userLat, userLng, place.lat, place.lng);
                  if (dist <= radius) {
                    addMarker(place.lat, place.lng, place.name, "📍");
                  }
                }
              });
            })
            .catch(e => console.error('Lỗi Firebase:', e));
        }

        

        function updateRadius(newRadius) {
          radius = newRadius;
          if (radiusCircle) {
            radiusCircle.setRadius(radius);
          }

          // Xoá marker cũ ngoại trừ vị trí user
          map.eachLayer(layer => {
            if (layer instanceof L.Marker &&
                !(layer.getLatLng().lat === userLat && layer.getLatLng().lng === userLng)) {
              map.removeLayer(layer);
            }
          });

          loadOverpassData();
          loadFirebaseData();
          loadGooglePlacesData();
        }

        function init(lat, lng, label="📍 Vị trí của bạn") {
          userLat = lat;
          userLng = lng;
          map.setView([userLat, userLng], 13);

          // ❌ Xóa tất cả marker cũ trừ circle
          map.eachLayer(layer => {
            if (layer instanceof L.Marker || layer instanceof L.Circle) {
              map.removeLayer(layer);
            }
          });

          // ✅ Thêm lại marker user
          L.marker([userLat, userLng], {
            icon: L.icon({
              iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',
              iconSize: [32, 32]
            })
          }).addTo(map).bindTooltip(label, {permanent:true, direction:'top', className:'marker-label'});

          // ✅ Thêm lại circle mới
          radiusCircle = L.circle([userLat, userLng], {
            color: "#2980b9",
            fillColor: "#2980b9",
            fillOpacity: 0.15,
            radius: radius
          }).addTo(map);

          // ✅ Load lại dữ liệu theo vị trí mới
          loadOverpassData();
          loadFirebaseData();
          loadGooglePlacesData();
        }

        // Tìm theo địa chỉ nhập
        function searchAddress() {
          let address = document.getElementById("addressInput").value;
          if (!address) return;

          fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
            .then(res => res.json())
            .then(data => {
              if (data && data.length > 0) {
                const lat = parseFloat(data[0].lat);
                const lng = parseFloat(data[0].lon);
                init(lat, lng, "📍 " + data[0].display_name.substring(0, 30) + "...");
              } else {
                alert("Không tìm thấy địa chỉ!");
              }
            })
            .catch(e => console.error("Lỗi tìm địa chỉ:", e));
        }

        // Hàm quay lại vị trí hiện tại
        function getCurrentLocation() {
          if (currentLat && currentLng) {
            init(currentLat, currentLng, "📍 Vị trí hiện tại của bạn");
            document.getElementById("addressInput").value = ""; // Clear search box
          } else {
            // Nếu chưa có vị trí hiện tại, thử lấy lại
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(pos => {
                currentLat = pos.coords.latitude;
                currentLng = pos.coords.longitude;
                init(currentLat, currentLng, "📍 Vị trí hiện tại của bạn");
                document.getElementById("addressInput").value = "";
              }, () => {
                alert("Không thể lấy vị trí hiện tại của bạn!");
              });
            } else {
              alert("Trình duyệt không hỗ trợ định vị!");
            }
          }
        }

        map.on('click', clearRoute);

        // Control chọn bán kính
        const radiusControl = L.control({ position: 'topright' });
        radiusControl.onAdd = function() {
          let div = L.DomUtil.create('div', 'radius-control');
          div.innerHTML = `
            <label>Bán kính:
              <select id="radiusSelect" aria-label="Chọn bán kính tìm kiếm">
                <option value="5000" selected>5 km</option>
                <option value="10000">10 km</option>
                <option value="15000">15 km</option>
                <option value="20000">20 km</option>
              </select>
            </label>
          `;
          div.querySelector('#radiusSelect').addEventListener('change', function() {
            updateRadius(Number(this.value));
          });
          return div;
        };
        radiusControl.addTo(map);

        // Nếu có geolocation thì lấy ban đầu
                // Nếu có geolocation thì lấy ban đầu
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(pos => {
            currentLat = pos.coords.latitude; // Lưu vị trí hiện tại
            currentLng = pos.coords.longitude;
            init(currentLat, currentLng, "📍 Vị trí hiện tại của bạn"); // Tự động load
          }, () => {
            alert("Không lấy được vị trí của bạn.");
          });
        }
    </script>


    <script>
        const apiKey = "cb2f4e21d59a4539b2681658251008";

        function getWeather(lat, lon) {
            fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&lang=vi`)
                .then(res => res.json())
                .then(data => {
                    if (data.location) {
                        document.getElementById("status").innerText = `${data.location.name}, ${data.location.region}`;
                        document.getElementById("weather").innerText = `${data.current.temp_c}°C`;
                        document.getElementById("condition").innerText = data.current.condition.text;
                        document.getElementById("icon").src = "https:" + data.current.condition.icon;
                    } else {
                        document.getElementById("status").innerText = "Lỗi khi lấy dữ liệu!";
                    }
                })
                .catch(() => {
                    document.getElementById("status").innerText = "Không thể kết nối API!";
                });
        }

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                pos => {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;
                    getWeather(lat, lon);
                },
                () => {
                    document.getElementById("status").innerText = "Không thể lấy vị trí!";
                }
            );
        } else {
            document.getElementById("status").innerText = "Trình duyệt không hỗ trợ GPS!";
        }



                function setBackgroundByWeather(condition) {
            let bgColor = "#007bff"; // mặc định xanh dương

            if (condition.includes("Mưa")) bgColor = "#4a90e2";
            else if (condition.includes("Nắng")) bgColor = "#f39c12";
            else if (condition.includes("Tuyết")) bgColor = "#b3e5fc";
            else if (condition.includes("Mây")) bgColor = "#95a5a6";

            document.body.style.background = bgColor;
        }

    </script>
    

</body>
</html>