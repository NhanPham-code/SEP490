<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stadium Booking Platform</title>
    <script src="https://cdn.tailwindcss.com/3.4.16">

    </script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="~/css/Home/home.css" rel="stylesheet" />
    <link href="~/css/background/background.css" rel="stylesheet" />
    <link href="~/css/FindTeam/FindTeam.css" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/quill-emoji/dist/quill-emoji.css">
    <script src="https://cdn.jsdelivr.net/npm/quill-emoji/dist/quill-emoji.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/intro.js/minified/introjs.min.css">
    <script src="https://unpkg.com/intro.js/minified/intro.min.js"></script>
    <script src="js/Home/Home.js"></script>

    <style>
        .circle{
            border-radius: 50%;
 
        }
        /* Custom checkbox style */
        input[type="checkbox"] {
            accent-color: #2563eb; /* Blue-600 */
            cursor: pointer;
        }
        /* Thêm vào file CSS hiện tại của bạn */

        @@keyframes pulse {
            0%, 100%

        {
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
        }

        50% {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.5);
        }

        }

        @@keyframes heartBeat {
            0%, 100%

        {
            transform: scale(1);
        }

        25% {
            transform: scale(1.3);
        }

        50% {
            transform: scale(1.1);
        }

        75% {
            transform: scale(1.2);
        }

        }

        @@keyframes floatUp {
            0%

        {
            opacity: 1;
            transform: translateY(0) scale(1);
        }

        100% {
            opacity: 0;
            transform: translateY(-40px) scale(0.3);
        }

        }

        .pulse-animation {
            animation: pulse 2s infinite;
        }

        .heart-beat {
            animation: heartBeat 0.6s ease-in-out;
        }

        .floating-heart {
            position: fixed;
            pointer-events: none;
            animation: floatUp 1.5s ease-out forwards;
            z-index: 1000;
            font-size: 16px;
        }

        .favorite-btn {
            position: relative;
            font-size: 1rem;
            z-index: 10;
        }

            .favorite-btn.favorited {
                background: rgba(254, 242, 242, 0.95) !important;
                border-color: rgb(252, 165, 165) !important;
                color: rgb(220, 38, 38) !important;
                transform: scale(1.1) !important;
            }

                .favorite-btn.favorited .heart-icon {
                    color: rgb(220, 38, 38) !important;
                    
                    z-index: 11;
                }

        /* Đảm bảo backdrop blur hoạt động */
        .favorite-btn {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
            
            -webkit-backdrop-filter: blur(8px);
        }
        /* Custom time slot styles */
        .time-slot {
            transition: all 0.3s ease;
        }

            .time-slot.selected {
                background-color: #2563eb;
                color: white;
                border-color: #2563eb;
            }

            .time-slot.unavailable {
                background-color: #f3f4f6;
                color: #6b7280;
                cursor: not-allowed;
            }

        .radius-control {
            background: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-weight: 500;
        }

            .radius-control select {
                padding: 4px 6px;
                border-radius: 4px;
                border: 1px solid #ccc;
                font-size: 14px;
                cursor: pointer;
                margin-left: 5px;
            }

        .weather-card {
            background: linear-gradient(to top, #74ebd5, #ACB6E5);
            color: white;
            padding: 20px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            width: 100%;
            display: flex; /* sắp xếp ngang */
            align-items: center; /* căn giữa theo chiều dọc */
            justify-content: center; /* căn giữa toàn hàng */
            gap: 15px; /* khoảng cách giữa các phần tử */
            animation: fadeIn 0.5s ease-in-out;
            box-sizing: border-box;
            margin-bottom: 10px;
        }

        .icon {
            width: 60px;
            height: 60px;
        }

        .temp {
            font-size: 2rem;
            font-weight: bold;
        }

        .location {
            font-size: 1.2rem;
        }

        .card-content {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .time-slot {
            cursor: pointer;
        }

            .time-slot.selected {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }

            .time-slot.unavailable {
                background-color: #f0f0f0;
                color: #999;
                cursor: not-allowed;
            }

        #grid-view, #map-view, #compare-view {
            transition: all 0.3s ease;
        }

            #grid-view.bg-primary, #map-view.bg-primary, #compare-view.bg-primary {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }
            /* Container cho các nút */
        /* Container cho các nút */
        .flex.items-center.gap-3.mb-6 {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 24px;
        }

        /* Style chung cho các nút */
        button[id$="-view"] {
            padding: 8px;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            background-color: #ffffff;
            color: #4b5563;
            transition: all 0.2s ease-in-out;
            cursor: pointer;
        }

            /* Hover state */
            button[id$="-view"]:hover {
                border-color: #3b82f6;
                color: #3b82f6;
                background-color: #f0f7ff;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            /* Active state (khi nhấn hoặc được chọn) */
            button[id$="-view"].active-btn {
                border-color: #b2b0ffe1; /* Màu xanh đậm hơn */
                color: #ffffff; /* Chữ trắng để tương phản */
                background-color: #b2b0ffe1; /* Nền xanh đậm */
                box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2); /* Hiệu ứng lún */
            }

            /* Icon bên trong */
            button[id$="-view"] i {
                font-size: 1.25rem;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            /* Focus state cho accessibility */
            button[id$="-view"]:focus {
                outline: none;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
            }

            /* Disabled state */
            button[id$="-view"]:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
    </style>

</head>


<body  data-new-gr-c-s-check-loaded="14.1116.0" data-gr-ext-installed="">
    <div class="bg"></div>
    <div class="bg bg2"></div>
    <div class="bg bg3"></div>
    <section class="relative h-80 bg-cover bg-center" style="background-image: url('https://readdy.ai/api/search-image?query=Modern%20sports%20stadium%20complex%20aerial%20view%20with%20multiple%20fields%2C%20green%20grass%2C%20stadium%20lights%2C%20parking%20areas%2C%20clear%20blue%20sky%20background%2C%20professional%20sports%20facilities%2C%20vibrant%20and%20energetic%20atmosphere%2C%20high-quality%20architectural%20photography%2C%20clean%20and%20inspiring%20sports%20venue%20complex&amp;width=1200&amp;height=320&amp;seq=hero002&amp;orientation=landscape')">
        <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center">
            <div class="w-full text-center text-white">
                <h1 class="text-4xl font-bold mb-4">Discover Premium Stadiums</h1>
                <p class="text-lg mb-6 max-w-2xl mx-auto">Browse our extensive collection of world-class sports facilities. Find the perfect venue for your next game, training session, or event.</p>
                <div class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto">
                    <button class="bg-primary text-white px-6 py-3 !rounded-button font-semibold hover:bg-blue-600 transition-colors whitespace-nowrap">
                        Explore Stadiums
                    </button>
                    <button class="bg-white text-gray-900 px-6 py-3 !rounded-button font-semibold hover:bg-gray-100 transition-colors whitespace-nowrap">
                        How It Works
                    </button>
                </div>
            </div>
        </div>
    </section>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 content-bg">
        <div class="weather-card">
            <h1>Thời tiết hiện tại</h1>
            <p id="status" class="location">Đang lấy vị trí...</p>
            <img id="icon" class="icon" src="" alt="">
            <p id="weather" class="temp"></p>
            <p id="condition" class="condition"></p>
        </div>

        <div class="flex flex-col lg:flex-row gap-8">
            <div class="mt-2 search">
                <!-- From Uiverse.io by mahiatlinux -->
                <div class="mt-3 relative w-[350px] bg-gray-100 rounded-2xl shadow-md p-1.5 transition-all duration-150 ease-in-out hover:scale-105 hover:shadow-lg">
                    <div class="absolute inset-y-0 left-0 pl-2.5 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400"
                             xmlns="http://www.w3.org/2000/svg"
                             viewBox="0 0 20 20"
                             fill="currentColor">
                            <path fill-rule="evenodd"
                                  d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                  clip-rule="evenodd"></path>
                        </svg>
                    </div>
                    <input type="text" id="search-text"
                           class="w-full pl-8 pr-24 py-3 text-base text-gray-700 bg-transparent rounded-lg focus:outline-none"
                           placeholder="Tìm kiếm bằng tên" />
                    <button type="submit" id="search-btn" class="absolute right-1 top-1 bottom-1 px-6 bg-[#5044e4] text-white font-medium rounded-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#5044e4]">
                        Search
                    </button>
                </div>


                <form id="filter-form" data-intro="Bạn sẽ sử dụng bộ lọc ở đây" data-step="5">
                    <aside class="sidebar" id="filter-sidebar" role="complementary" aria-label="Bộ lọc tìm kiếm">
                        <div class="sidebar-header">
                            <h3 class="sidebar-title">
                                <i class="ri-filter-3-line" aria-hidden="true"></i>
                                Bộ Lọc
                            </h3>
                            <div class="sidebar-actions">
                                <button class="clear-filters" type="button" aria-label="Xóa tất cả bộ lọc">
                                    <i class="ri-refresh-line" aria-hidden="true"></i>
                                    Xóa Tất Cả
                                </button>
                                <button class="close-filter" id="close-filter" type="button" aria-label="Đóng bộ lọc">
                                    <i class="ri-close-line " id="close-icon" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Loại Thể Thao -->
                        <div class="filter-section" data-intro="Bạn có thể chọn loại thể thao bạn muốn chơi" data-step="6">
                            <button class="filter-header"
                                    data-target="sport-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="sport-filter">
                                <h4 class="filter-title">Loại Thể Thao</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="sport-filter" role="group" aria-labelledby="sport-filter-title">
                                <div class="filter-options">
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Bóng đá sân 5">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng đá sân 5</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Bóng đá sân 7">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng đá sân 7</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Bóng đá sân 11">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng đá sân 11</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Bóng rổ">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng Rổ</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Tennis">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Tennis</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Cầu lông">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Cầu Lông</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Bóng Chuyền">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Bóng Chuyền</span>
                                    </label>
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="sport_type[]" class="custom-checkbox sport-filter" value="Đa Môn">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span class="label-text">Đa Môn</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Chọn Ngày -->
                        <div class="filter-section" data-intro="Bạn có thể chọn ngày bạn muốn chơi" data-step="7">
                            <button class="filter-header"
                                    data-target="date-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="date-filter">
                                <h4 class="filter-title">Chọn Ngày</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="date-filter">
                                <div class="date-input-wrapper">
                                    <i class="ri-calendar-line" aria-hidden="true"></i>
                                    <input type="date"
                                           name="date"
                                           class="date-input"
                                           id="play-date-filter"
                                           aria-label="Chọn ngày chơi">
                                </div>
                                <div class="quick-date-options">
                                    <button type="button" class="quick-date-btn" data-days="0">Hôm nay</button>
                                    <button type="button" class="quick-date-btn" data-days="1">Mai</button>
                                    <button type="button" class="quick-date-btn" data-days="7">Tuần sau</button>
                                    <button type="button" class="quick-date-btn" data-days="30">Tháng sau</button>
                                </div>
                            </div>
                        </div>

                        <!-- Thời Gian -->
                        <div class="filter-section" data-intro="Chọn thời gian bạn muốn chơi" data-step="8">
                            <button class="filter-header"
                                    data-target="time-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="time-filter">
                                <h4 class="filter-title">Thời Gian Chơi</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="time-filter" role="group" aria-label="Chọn giờ chơi">
                                <div class="time-grid">
                                    <label for="startTime" class="range-label">Từ:</label>
                                    <input type="time" class="time-slot" name="startTime" id="startTime" value="" />
                                    <label for="endTime" class="range-label">Đến:</label>
                                    <input type="time" class="time-slot" name="endTime" id="endTime" value="" />
                                </div>
                            </div>
                        </div>

                        <!-- Khoảng Giá -->
                        <div class="filter-section">
                            <button class="filter-header"
                                    data-target="price-filter"
                                    type="button"
                                    aria-expanded="true"
                                    aria-controls="price-filter">
                                <h4 class="filter-title">Khoảng Giá</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content active" id="price-filter">
                                <div class="price-range">
                                    <input type="range"
                                           name="price"
                                           min="0"
                                           max="500000"
                                           value="250000"
                                           step="10000"
                                           class="range-slider"
                                           id="price-range-slider"
                                           aria-label="Khoảng giá từ 0 đến 500.000 VNĐ">
                                    <div class="price-labels">
                                        <span>0đ</span>
                                        <span class="current-price" id="current-price">250.000đ/giờ</span>
                                        <span>500.000đ</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Địa Điểm -->
                        <div class="filter-section">
                            <button class="filter-header"
                                    data-target="location-filter"
                                    type="button"
                                    aria-expanded="false"
                                    aria-controls="location-filter">
                                <h4 class="filter-title">Địa Điểm</h4>
                                <i class="ri-arrow-down-s-line toggle-icon" aria-hidden="true"></i>
                            </button>
                            <div class="filter-content" id="location-filter">
                                <div class="location-input-wrapper">
                                    <i class="ri-map-pin-line" aria-hidden="true"></i>
                                    <input type="text"
                                           name="location"
                                           placeholder="Nhập địa điểm"
                                           class="location-input"
                                           id="location-search"
                                           aria-label="Tìm kiếm địa điểm"
                                           autocomplete="off">
                                    <button type="button" class="location-clear" aria-label="Xóa địa điểm">
                                        <i class="ri-close-line" aria-hidden="true"></i>
                                    </button>
                                </div>
                                <div class="popular-locations">
                                    <h5 class="popular-title">Địa điểm phổ biến:</h5>
                                    <div class="location-tags">
                                        <button type="button" class="location-tag" data-location="Quận 1">Quận 1</button>
                                        <button type="button" class="location-tag" data-location="Quận 3">Quận 3</button>
                                        <button type="button" class="location-tag" data-location="Quận 7">Quận 7</button>
                                        <button type="button" class="location-tag" data-location="Thủ Đức">Thủ Đức</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Nút hành động của Form -->
                        <div class="filter-actions">
                            <button class="btn btn-primary btn-full" type="submit">
                                <i class="ri-check-line" aria-hidden="true"></i>
                                Áp Dụng Bộ Lọc
                            </button>
                            <button class="btn btn-secondary btn-outline btn-full" type="reset">
                                <i class="ri-refresh-line" aria-hidden="true"></i>
                                Đặt Lại
                            </button>
                        </div>
                    </aside>
                </form>
            </div>

           
            <div class="flex-1">
                <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6">

                    <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                        <span class="text-gray-600 whitespace-nowrap" id="count"></span>
                        <div class="flex items-center gap-2">
                            <span class="text-sm text-gray-600">Sort by:</span>
                            <button class="flex items-center space-x-1 px-3 py-2 border border-gray-300 rounded-lg text-sm hover:border-primary transition-colors">
                                <span>Popularity</span>
                                <div class="w-4 h-4 flex items-center justify-center">
                                    <i class="ri-arrow-down-s-line"></i>
                                </div>
                            </button>
                        </div>
                    </div>
                    <div class="flex items-center gap-4 mb-6">
                        <!-- From Uiverse.io by 0x3ther -->
                        <div class="flex items-center gap-2 mt-5">
                            
                            <button id="grid-view" class="cursor-pointer bg-white relative inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-[#F5F5F5] hover:text-[#60A5FA] h-9 rounded-md px-3">
                                <svg class="lucide lucide-newspaper text-blue-400 dark:text-blue-600"
                                     stroke-linejoin="round"
                                     stroke-linecap="round"
                                     stroke-width="2"
                                     stroke="#60A5FA"
                                     fill="none"
                                     viewBox="0 0 24 24"
                                     height="22"
                                     width="22"  
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M21 3C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H21ZM11 13H4V19H11V13ZM20 13H13V19H20V13ZM11 5H4V11H11V5ZM20 5H13V11H20V5Z"></path>
                                </svg>
                                DANH SÁCH
                            </button>
                            <button id="map-view" class="cursor-pointer bg-white relative inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-[#F5F5F5] hover:text-[#FACC14] h-9 rounded-md px-3">
                                <svg stroke-linejoin="round"
                                     stroke-linecap="round"
                                     stroke-width="2"
                                     stroke="#7aae00"
                                     fill="none"
                                     viewBox="0 0 24 24"
                                     height="22"
                                     width="22" 
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M4 6.14286V18.9669L9.06476 16.7963L15.0648 19.7963L20 17.6812V4.85714L21.303 4.2987C21.5569 4.18992 21.8508 4.30749 21.9596 4.56131C21.9862 4.62355 22 4.69056 22 4.75827V19L15 22L9 19L2.69696 21.7013C2.44314 21.8101 2.14921 21.6925 2.04043 21.4387C2.01375 21.3765 2 21.3094 2 21.2417V7L4 6.14286ZM16.2426 11.2426L12 15.4853L7.75736 11.2426C5.41421 8.89949 5.41421 5.10051 7.75736 2.75736C10.1005 0.414214 13.8995 0.414214 16.2426 2.75736C18.5858 5.10051 18.5858 8.89949 16.2426 11.2426ZM12 12.6569L14.8284 9.82843C16.3905 8.26633 16.3905 5.73367 14.8284 4.17157C13.2663 2.60948 10.7337 2.60948 9.17157 4.17157C7.60948 5.73367 7.60948 8.26633 9.17157 9.82843L12 12.6569Z"></path>
                                </svg>
                                BẢN ĐỒ
                            </button>
                            
                            <button id="compare-view" class="cursor-pointer bg-white relative inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-[#F5F5F5] hover:text-[#FB923C] h-9 rounded-md px-3">
                                <svg class="lucide lucide-heart text-orange-400 dark:text-orange-600"
                                     stroke-linejoin="round"
                                     stroke-linecap="round"
                                     stroke-width="2"
                                     stroke="#f20"
                                     fill="#f20"
                                     viewBox="0 0 24 24"
                                     height="22"
                                     width="22"  
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12.001 4.52853C14.35 2.42 17.98 2.49 20.2426 4.75736C22.5053 7.02472 22.583 10.637 20.4786 12.993L11.9999 21.485L3.52138 12.993C1.41705 10.637 1.49571 7.01901 3.75736 4.75736C6.02157 2.49315 9.64519 2.41687 12.001 4.52853ZM18.827 6.1701C17.3279 4.66794 14.9076 4.60701 13.337 6.01687L12.0019 7.21524L10.6661 6.01781C9.09098 4.60597 6.67506 4.66808 5.17157 6.17157C3.68183 7.66131 3.60704 10.0473 4.97993 11.6232L11.9999 18.6543L19.0201 11.6232C20.3935 10.0467 20.319 7.66525 18.827 6.1701Z"></path>
                                </svg>
                                YÊU THÍCH
                            </button>
                        </div>

                        <!-- Grid View Card -->
                       
                    </div>

                </div>
                <button class="btn btn-secondary" id="mobile-filter-btn" type="button" aria-label="Mở bộ lọc" data-intro="Bạn sẽ sử dụng bộ lọc ở đây" data-step="5">
                    <i class="ri-filter-3-line" aria-hidden="true"></i>
                    Bộ Lọc
                </button>
                
                <div id="stadium-grid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-2 gap-6">
                    
                    <script>
                                               function showLoading(){
                            $('#loading-state').show();
                            $('#stadium-grid').hide();
                            // $('#empty-state').hide();
                            $('#loadMoreBtn').hide();

                        }
                        // Hide loading state
                        function hideLoading(){
                            $('#loading-state').hide();
                            $('#stadium-grid').show();
                        }
                        //loading load more 
                        function showLoadMore(){
                            $('#loading-state').show();
                        }

                        // event search
                        function performSearch() {
                             $('#search-btn').on('click', function() {
                            var url = sessionStorage.getItem('searchTerm') || "";
                            var searchTerm = $('#search-text').val().trim();
                            if (url.length <=0 || url === null) {
                                showLoading();
                                let searchString = `&$filter=contains(Name,'${removeVietnameseTones(searchTerm)}')`;
                                displayList(searchString, 10, 0);
                            }else{
                                displayList(`contains(Name,'${removeVietnameseTones(searchTerm)}')` + url, 10, 0);
                            }
                        });
                        }
                        

                                                document.addEventListener('DOMContentLoaded', function () {
                          // Lấy tất cả các nút
                          const buttons = document.querySelectorAll('button[id$="-view"]');

                          // Thêm sự kiện click cho từng nút
                          buttons.forEach(button => {
                            button.addEventListener('click', function () {
                              // Xóa class active-btn khỏi tất cả các nút
                              buttons.forEach(btn => btn.classList.remove('active-btn'));
                              // Thêm class active-btn cho nút được nhấn
                              this.classList.add('active-btn');
                            });
                          });
                        });

                                                function removeVietnameseTones(str) {
                          return str
                            .normalize('NFD')
                            .replace(/[\u0300-\u036f]/g, '')
                            .replace(/đ/g, 'd').replace(/Đ/g, 'D');
                        }
                                                // Get the form element
                                                                      $(document).ready(function() {
                            //load stadium gird 
                            showLoading();

                            //search
                            performSearch();

                                                 $('#mobile-filter-btn').on('click', function() {
                            $('#filter-sidebar').addClass('active');
                        });

                        // Đóng sidebar với nút close
                        $('#close-filter').on('click', function() {
                            $('#filter-sidebar').removeClass('active');
                        });
                            sessionStorage.setItem('searchTerm', "");
                            let skip = 0;
                            const top = 10; // Number of items per page
                            $('#stadium-grid').empty().hide(); // Clear previous results
                            displayList("", top, skip);

                            const form = $('#filter-form');
                            form.on('submit', function(e) {
                                e.preventDefault();

                                let filters = [];

                                // Location (Stadium.Address)
                                let location = this.querySelector('input[name="location"]').value.trim();
                                if (location) {
                                    filters.push(`contains(AddressUnsigned,'${removeVietnameseTones(location)}')`);
                                }

                                // Sport type (Court.SportType, nhiều => or)
                                let sportTypes = [...this.querySelectorAll('input[name="sport_type[]"]:checked')]
                                    .map(cb => `c/SportType eq '${cb.value}'`);
                                let sportTypeFilter = "";
                                if (sportTypes.length > 0) {
                                    sportTypeFilter = `(${sportTypes.join(" or ")})`;
                                }

                                // Price (Court.PricePerHour)
                                let price = this.querySelector('input[name="price"]').value;
                                let priceFilter = "";
                                if (price) {
                                    priceFilter = `c/PricePerHour le ${price}`;
                                }

                                // Date (Court.AvailableDates)
                                let date = this.querySelector('input[name="date"]').value;
                                let dateFilter = "";
                                if (date) {
                                    dateFilter = `c/AvailableDates/any(d: d eq '${date}')`;
                                }

                                // Gom tất cả điều kiện Courts vào 1 any (KHÔNG filter OpenTime/CloseTime ở đây!)
                                let courtsConditions = [sportTypeFilter, priceFilter, dateFilter].filter(Boolean);
                                if (courtsConditions.length > 0) {
                                    filters.push(`Courts/any(c: ${courtsConditions.join(" and ")})`);
                                }

                                // Thời gian filter theo Stadium.OpenTime/CloseTime
                                let startTime = this.querySelector('input[name="startTime"]').value;
                                let endTime = this.querySelector('input[name="endTime"]').value;
                                if (startTime && endTime) {
                                    let [sh, sm] = startTime.split(":").map(Number);
                                    let [eh, em] = endTime.split(":").map(Number);
                                    let startDuration = `duration'PT${sh}H${sm || 0}M'`;
                                    let endDuration = `duration'PT${eh}H${em || 0}M'`;
                                    filters.push(`OpenTime le ${startDuration} and CloseTime ge ${endDuration}`);
                                }

                                // Nối filter
                                let filterString = filters.join(" and ");
                                let finalUrl = filterString ? "&$filter=" + encodeURIComponent(filterString) : "";
                                skip = 0;
                                console.log(finalUrl);
                                sessionStorage.setItem('searchTerm', finalUrl); // Lưu search term vào sessionStorage
                                displayList(finalUrl, top, skip);

                            });

                            $('#loadMoreBtn').on("click", function () {
                                showLoadMore();
                                var count = sessionStorage.getItem('stadiumCount') || 0;
                                var url = sessionStorage.getItem('searchTerm') || "";
                                var minTop = 0;
                                skip += 10;

                                if (skip + 10 > count ){
                                    minTop = skip - count; // Giảm top nếu vượt quá số lượng
                                    $('#loadMoreBtn').hide();
                                }else if(skip === count){
                                    $('#loadMoreBtn').hide();
                                }

                                displayList(url, top - minTop, skip);
                            });
                        });

                            // You can now use formData object to process or send the data




                        // danh sach san pham truoc va sau khi search
                        function displayList(searchTerm, top, skip){
                            let url;
                            if(searchTerm <= 0 || searchTerm === null){
                               url = searchTerm += "&$filter=IsApproved eq true and IsLocked eq false ";
                            }
                            else{
                               url = searchTerm += " and IsApproved eq true and IsLocked eq false ";
                            }
                            var searchUrl = url + `&$top=${top}&$skip=${skip}`;
                            console.log(searchUrl);

                                                                           $.ajax({
                            url: '/Home/Stadiums', // Endpoint for POST request
                            type: 'POST',
                            data: {searchTerm: searchUrl},
                            success: function (data) {
                                let count = data["@@odata.count"];
                                sessionStorage.setItem('stadiumCount', count); // Lưu số lượng sân vào sessionStorage
                                $("#count").text(`Đã tìm thấy ${count}`);
                                console.log(skip);
                                if(count < 10){
                                    $('#loadMoreBtn').hide();
                                }
                                if (skip + 10 >= count){
                                    $('#loadMoreBtn').hide();
                                }else{
                                     $('#loadMoreBtn').show();
                                }
                                let html = '';
                                if (data.value && data.value.length > 0) {
                                    data.value.forEach(function (item) {
                                        let imageUrl = item.StadiumImages.length > 0 ? item.StadiumImages[0].ImageUrl : 'default.jpg';
                                        let price = item.Courts.length > 0 ? item.Courts[0].PricePerHour : 0;
                                        // Removed console.log(item.val) as 'val' is not defined in the data structure
                                        console.log(item);

                                        // Format tiền Việt Nam
                                        let formattedPrice = new Intl.NumberFormat('vi-VN', {
                                            style: 'currency',
                                            currency: 'VND'
                                        }).format(price);
                                        let address = item.Address ?? '';

                                                                // Thay thế đoạn code HTML của bạn bằng đoạn này:
                        html += `<div class="card-content bg-white rounded-2xl shadow-sm overflow-hidden hover:shadow-lg transition-shadow duration-300">
                            <div class="relative h-48">
                                <img src="https://localhost:7280/${imageUrl}" alt="Stadium" class="w-full h-full object-cover">

                                <!-- Hot badge - Fixed positioning -->
                                <div class="absolute top-3 right-3 bg-gradient-to-r from-red-500 to-red-600 text-white px-2 py-1 rounded-full text-xs font-bold z-10 pulse-animation shadow-lg">
                                    🔥 Hot
                                </div>

                                <!-- Favorite Button - Positioned correctly -->
                                <div class="absolute top-3 left-3 z-20">
                                    <button class="favorite-btn bg-white/90 backdrop-blur-sm hover:bg-white border border-white/20 text-gray-600 hover:text-red-500 p-2.5 circle transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-110"
                                            data-stadium-id="${item.Id}"
                                            data-stadium-name="${item.Name}">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32" fill="currentColor"><path d="M16.5 3C19.5376 3 22 5.5 22 9C22 16 14.5 20 12 21.5C9.5 20 2 16 2 9C2 5.5 4.5 3 7.5 3C9.35997 3 11 4 12 5C13 4 14.64 3 16.5 3ZM12.9339 18.6038C13.8155 18.0485 14.61 17.4955 15.3549 16.9029C18.3337 14.533 20 11.9435 20 9C20 6.64076 18.463 5 16.5 5C15.4241 5 14.2593 5.56911 13.4142 6.41421L12 7.82843L10.5858 6.41421C9.74068 5.56911 8.5759 5 7.5 5C5.55906 5 4 6.6565 4 9C4 11.9435 5.66627 14.533 8.64514 16.9029C9.39 17.4955 10.1845 18.0485 11.0661 18.6038C11.3646 18.7919 11.6611 18.9729 12 19.1752C12.3389 18.9729 12.6354 18.7919 12.9339 18.6038Z"></path></svg>
                                                            </button>
                                </div>

                                <!-- Sport type badge -->
                                <div class="absolute bottom-3 left-3 bg-white/90 backdrop-blur-sm px-3 py-1.5 rounded-full text-sm font-medium text-gray-800">
                                    ${item.Courts[0].SportType}
                                </div>
                            </div>

                            <div class="p-4">
                                <h3 class="font-bold text-lg text-gray-900 mb-1">${item.Name}</h3>

                                <div class="flex items-center text-gray-500 text-sm mb-2">
                                    <i class="ri-map-pin-line text-gray-400 mr-1"></i>
                                    <span>${address}</span>
                                </div>

                                <div class="flex items-center text-sm mb-3">
                                    <i class="ri-star-fill text-yellow-400 mr-1"></i>
                                    <span class="font-semibold text-gray-800">4.7</span>
                                    <span class="text-gray-500 ml-1">(124 đánh giá)</span>
                                </div>

                                <!-- Available time slots -->
                                <div class="mb-4">
                                    <div class="flex items-center text-sm text-gray-600 mb-2">
                                        <i class="ri-time-line mr-1"></i>
                                        <span>Khung giờ hoạt động:</span>
                                    </div>
                                    <div class="grid grid-cols-3 gap-1">
                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium time">${formatTimeForDisplay(item.OpenTime)}</span>
                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium time"><i class="ri-arrow-right-line" style="transform: scaleX(1.3);"></i></span>
                                        <span class="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-md font-medium time">${formatTimeForDisplay(item.CloseTime)}</span>
                                        
                                    </div>
                                </div>

                                <div class="items-center justify-end">
                                    <div class="text-2xl font-bold text-blue-600">
                                        ${formattedPrice}<span class="text-sm font-normal text-gray-500">₫/giờ</span>
                                    </div>
                                    <button class="w-full mt-2 bg-blue-600 text-white px-6 py-2 rounded-lg text-sm font-semibold hover:bg-blue-700 transition-colors"
                                            onclick="redirectToBooking('${item.Id}')">
                                        Đặt ngay
                                    </button>
                                </div>
                            </div>
                        </div>`;
                        });
                        hideLoading();
                                            if (skip === 0) {
                            $('#stadium-grid').html(html).show();
                        } else {
                            $('#stadium-grid').append(html);
                        }
                                } else {
                                    $('#stadium-grid').empty().hide();
                                }
                            },
                            error: function () {
                                $('#stadium-grid').empty().hide();
                                console.log('Error fetching suggestions');
                            }
                        });
                        }
                                        function formatTimeForDisplay(time) {
                            if (!time) return '--:--';

                            try {
                                if (typeof time === 'string') {
                                    if (time.startsWith('PT')) {
                                        const hoursMatch = time.match(/PT(\d+)H/);
                                        if (hoursMatch && hoursMatch[1]) {
                                            const hours = parseInt(hoursMatch[1]).toString().padStart(2, '0');
                                            return `${hours}:00`;
                                        }
                                    } else if (time.includes(':')) {
                                        const parts = time.split(':');
                                        if (parts.length >= 2) {
                                            const hours = parseInt(parts[0]).toString().padStart(2, '0');
                                            const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                                            return `${hours}:${minutes}`;
                                        }
                                    }
                                }

                                if (time instanceof Date) {
                                    const hours = time.getHours().toString().padStart(2, '0');
                                    const minutes = time.getMinutes().toString().padStart(2, '0');
                                    return `${hours}:${minutes}`;
                                }

                                return '--:--';
                            } catch (error) {
                                console.warn('Error formatting time for display:', error);
                                return '--:--';
                            }
                        }



                    </script>


                </div>
                <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
                <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
                <div class="load" id="loading-state" style="display: none;" aria-live="polite">
                    <div class="loader"></div>
                </div>
                <div id="map-container" class="hidden bg-white rounded-lg shadow-sm overflow-hidden relative map-container" style="height: 650px; width: 100%;">
                    <div id="leaflet-map" style="height: 100%; width: 100%;"></div>
                </div>
                <div id="favorite-container" class="hidden bg-white rounded-lg shadow-sm overflow-hidden relative map-container">
                    <div id="favorite-list"  class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"></div>
                </div>

                <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
                <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"></script>

                <!-- Firebase SDK -->
                <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
                <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-database-compat.js"></script>

                <div class="text-center mt-8">
                    <button id="loadMoreBtn" class="bg-white text-primary border-2 border-primary px-8 py-3 !rounded-button font-semibold hover:bg-primary hover:text-white transition-colors whitespace-nowrap">
                        Load More Stadiums
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/static/surveys.js?v=1.259.0"></script>
    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/array/phc_t9tkQZJiyi2ps9zUYm8TDsL6qXo4YmZx0Ot5rBlAlEd/config.js"></script>
    <script type="text/javascript" crossorigin="anonymous" src="https://us-assets.i.posthog.com/static/dead-clicks-autocapture.js?v=1.259.0"></script>
    <script id="filter-functionality">
             // yêu thích


                        // Lấy các phần tử DOM
        const priceRange = document.querySelector('input[name="price"]');
        const priceInput = document.getElementById('priceInput');

        // Hàm định dạng số tiền theo chuẩn Việt Nam
        function formatPrice(value) {
          return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        }


        // Lắng nghe sự kiện thay đổi trên thanh trượt
        priceRange.addEventListener('input', function () {
          const value = this.value;
          priceInput.value = value; // Đồng bộ với ô input

        });

        // Lắng nghe sự kiện thay đổi trên ô input
        priceInput.addEventListener('input', function () {
          let value = parseInt(this.value) || 0; // Chuyển thành số, mặc định 0 nếu không hợp lệ
          // Giới hạn giá trị trong khoảng min/max
          if (value < 0) value = 0;
          if (value > 10000000) value = 10000000;
          priceRange.value = value; // Đồng bộ với thanh trượt
    
        });



        document.addEventListener('DOMContentLoaded', function() {
        const checkboxes = document.querySelectorAll('.custom-checkbox');
        checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
        console.log('Filter changed:', this.nextElementSibling.textContent, this.checked);
        });
        });
        const priceRange = document.querySelector('input[type="range"]');
        const priceDisplay = document.querySelector('.font-medium');
        priceRange.addEventListener('input', function() {
        priceDisplay.textContent = `$${this.value}/hour`;
        });
        });
    </script>
    <script id="time-slot-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const timeSlots = document.querySelectorAll('.time-slot');
        timeSlots.forEach(slot => {
        slot.addEventListener('click', function() {
        if (!this.classList.contains('unavailable')) {
        timeSlots.forEach(s => s.classList.remove('selected'));
        this.classList.add('selected');
        }
        });
        });
        });
    </script>
    <script id="view-toggle-functionality">
        document.addEventListener('DOMContentLoaded', function () {
            const gridViewBtn = document.getElementById('grid-view');
            const mapViewBtn = document.getElementById('map-view');
            const favoriteViewBtn = document.getElementById('compare-view'); // Nút Yêu thích

            const stadiumGridContainer = document.getElementById('stadium-grid');
            const mapContainer = document.getElementById('map-container');
            const favoriteContainer = document.getElementById('favorite-container');
            const loadMoreBtn = document.getElementById('loadMoreBtn');

            // Mảng chứa các nút và container tương ứng để dễ quản lý
            const views = [
                { btn: gridViewBtn, container: stadiumGridContainer },
                { btn: mapViewBtn, container: mapContainer },
                { btn: favoriteViewBtn, container: favoriteContainer }
            ];

            function setActiveView(activeView) {
                // Lặp qua tất cả các view
                views.forEach(view => {
                    // Nếu là view đang được kích hoạt
                    if (view === activeView) {
                        view.container.classList.remove('hidden');
                        view.btn.classList.add('active-btn'); // Sử dụng class 'active-btn' bạn đã định nghĩa
                    } else { // Nếu là các view khác
                        view.container.classList.add('hidden');
                        view.btn.classList.remove('active-btn');
                    }
                });

                // Xử lý riêng cho nút "Load More"
                // Chỉ hiển thị nút này khi ở chế độ xem danh sách (grid view)
                if (activeView.container === stadiumGridContainer) {
                    loadMoreBtn.classList.remove('hidden');
                } else {
                    loadMoreBtn.classList.add('hidden');
                }

                // Xử lý riêng cho bản đồ Leaflet
                if (activeView.container === mapContainer) {
                    // Cần gọi invalidateSize để bản đồ render đúng kích thước sau khi được hiển thị
                    setTimeout(() => {
                        if (window.leafletMap) {
                            window.leafletMap.invalidateSize();
                        }
                    }, 10);
                }
            }

            // Gán sự kiện click cho các nút
            gridViewBtn.addEventListener('click', () => setActiveView(views[0]));
            mapViewBtn.addEventListener('click', () => setActiveView(views[1]));
            favoriteViewBtn.addEventListener('click', () => {
                setActiveView(views[2]);
                // Luôn làm mới danh sách yêu thích khi người dùng bấm vào
                if (window.displayMyFavorites) {
                    window.displayMyFavorites();
                }
            });

            // Thiết lập trạng thái ban đầu khi tải trang
            setActiveView(views[0]);
        });
    </script>

    <script id="comparison-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const compareCheckboxes = document.querySelectorAll('.compare-checkbox');
        let selectedStadiums = [];
        compareCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
        const stadiumCard = this.closest('.bg-white');
        const stadiumName = stadiumCard.querySelector('h3').textContent;
        if (this.checked) {
        if (selectedStadiums.length < 3) {
        selectedStadiums.push(stadiumName);
        } else {
        this.checked = false;
        alert('You can compare up to 3 stadiums at a time.');
        }
        } else {
        selectedStadiums = selectedStadiums.filter(name => name !== stadiumName);
        }
        });
        });
        document.getElementById('clear-comparison').addEventListener('click', function() {
        compareCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
        });
        selectedStadiums = [];
        });
        });
    </script>
    <script id="booking-functionality">
        document.addEventListener('DOMContentLoaded', function() {
        const bookButtons = document.querySelectorAll('button');
        bookButtons.forEach(button => {
        if (button.textContent.includes('Book Now')) {
        button.addEventListener('click', function() {
        const card = this.closest('.bg-white');
        const stadiumName = card.querySelector('h3').textContent;
        alert(`Booking ${stadiumName}...`);
        });
        }
        });
        });
    </script>
    <script>
        !function (t, e) { var o, n, p, r; e.__SV || (window.posthog = e, e._i = [], e.init = function (i, s, a) { function g(t, e) { var o = e.split("."); 2 == o.length && (t = t[o[0]], e = o[1]), t[e] = function () { t.push([e].concat(Array.prototype.slice.call(arguments, 0))) } } (p = t.createElement("script")).type = "text/javascript", p.crossOrigin = "anonymous", p.async = !0, p.src = s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js", (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r); var u = e; for (void 0 !== a ? u = e[a] = [] : a = "posthog", u.people = u.people || [], u.toString = function (t) { var e = "posthog"; return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e }, u.people.toString = function () { return u.toString(1) + ".people (stub)" }, o = "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "), n = 0; n < o.length; n++)g(u, o[n]); e._i.push([i, s, a]) }, e.__SV = 1) }(document, window.posthog || []);
        posthog.init('phc_t9tkQZJiyi2ps9zUYm8TDsL6qXo4YmZx0Ot5rBlAlEd', {
            api_host: 'https://us.i.posthog.com',
            autocapture: false,
            capture_pageview: false,
            capture_pageleave: false,
            capture_performance: {
                web_vitals: false,
            },
            rageclick: false,
        })
        window.shareKey = 'gmUdOLhI0Qeo-104cpo0jg';
        window.host = 'readdy.ai';
    </script>
    <script>
        let leafletMap = null;
        let userLat, userLng;
        let routingControl = null;
        let radiusCircle = null;
        let radius = 5000;

        const firebaseConfig = {
          apiKey: "AIzaSyCg6rxISbUgZKNqqLlkBrYS_sQtkYRaByo",
          authDomain: "chatbox-993b2.firebaseapp.com",
          databaseURL: "https://chatbox-993b2-default-rtdb.firebaseio.com/",
          projectId: "chatbox-993b2",
          storageBucket: "chatbox-993b2.firebasestorage.app",
          messagingSenderId: "168483987205",
          appId: "1:168483987205:web:c9ef776901ec2882bb616c"
        };
        firebase.initializeApp(firebaseConfig);
        const db = firebase.database();

        const searchTags = [
          '[sport=badminton]',
          '[sport=football]',
          '[sport=tennis]',
          '[sport=basketball]',
          '[sport=swimming]',
          '[sport=volleyball]'
        ];

        let courtMarkers = [];

        function initMap() {
            if (leafletMap) return;

            leafletMap = L.map('leaflet-map').setView([0, 0], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
              attribution: '© OpenStreetMap contributors'
            }).addTo(leafletMap);

            const radiusControl = L.control({ position: 'topright' });
            radiusControl.onAdd = function () {
                let div = L.DomUtil.create('div', 'radius-control');
                div.innerHTML = `
                    <label>Bán kính:
                        <select id="radiusSelect">
                            <option value="5000" selected>5 km</option>
                            <option value="10000">10 km</option>
                            <option value="15000">15 km</option>
                        </select>
                    </label>
                `;
                div.querySelector('#radiusSelect').addEventListener('change', function () {
                    updateRadius(Number(this.value));
                });
                return div;
            };
            radiusControl.addTo(leafletMap);

            getUserLocation();
        }

        function getUserLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(pos => {
                    userLat = pos.coords.latitude;
                    userLng = pos.coords.longitude;
                    leafletMap.setView([userLat, userLng], 13);

                    L.marker([userLat, userLng], {
                        icon: L.icon({
                            iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',
                            iconSize: [32, 32]
                        })
                    }).addTo(leafletMap).bindPopup("Vị trí của bạn");

                    radiusCircle = L.circle([userLat, userLng], {
                        color: "#2980b9",
                        fillColor: "#2980b9",
                        fillOpacity: 0.15,
                        radius: radius
                    }).addTo(leafletMap);

                    loadBadmintonCourts();
                }, () => {
                    alert("Không lấy được vị trí của bạn.");
                });
            } else {
                alert("Trình duyệt không hỗ trợ định vị.");
            }
        }

        function addMarker(lat, lon, name, icon) {
            let marker = L.marker([lat, lon]).addTo(leafletMap).bindPopup(`${icon} ${name}`);
            courtMarkers.push(marker);
            marker.on('click', () => {
                if (routingControl) {
                    leafletMap.removeControl(routingControl);
                    routingControl = null;
                } else {
                    routingControl = L.Routing.control({
                        waypoints: [
                            L.latLng(userLat, userLng),
                            L.latLng(lat, lon)
                        ],
                        lineOptions: { styles: [{ color: 'red', weight: 4 }] },
                        routeWhileDragging: false,
                        createMarker: function() { return null; }
                    }).addTo(leafletMap);
                }
            });
        }

        function clearCourtMarkers() {
            courtMarkers.forEach(marker => leafletMap.removeLayer(marker));
            courtMarkers = [];
        }

        function distanceInMeters(lat1, lon1, lat2, lon2) {
            const R = 6371000;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a =
                Math.sin(dLat / 2) ** 2 +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) ** 2;
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function loadBadmintonCourts() {
            if (!userLat || !userLng) {
                console.warn("Vị trí người dùng chưa có, không thể load sân.");
                return;
            }

            clearCourtMarkers();

            searchTags.forEach(tag => {
                const query = `
                [out:json];
                (
                    node(around:${radius},${userLat},${userLng})${tag};
                    way(around:${radius},${userLat},${userLng})${tag};
                    relation(around:${radius},${userLat},${userLng})${tag};
                );
                out center;`;

                fetch('https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query))
                .then(res => res.json())
                .then(data => {
                    if (!data.elements) return;

                    data.elements.forEach(place => {
                        let lat, lon;
                        if (place.type === 'node') {
                            lat = place.lat;
                            lon = place.lon;
                        } else if ((place.type === 'way' || place.type === 'relation') && place.center) {
                            lat = place.center.lat;
                            lon = place.center.lon;
                        } else {
                            return; // Không có tọa độ
                        }

                        let dist = distanceInMeters(userLat, userLng, lat, lon);
                        if (dist <= radius) {
                                   let name = 'Sân thể thao';

        if (place.tags) {
            if (place.tags.name) {
                name = place.tags.name;
            } else if (place.tags.ref) {
                name = place.tags.ref;
            } else if (place.tags.description) {
                name = place.tags.description;
            } else if (place.tags.operator) {
                name = place.tags.operator;
            }
        }

                            let icon = '🏸'; // mặc định icon

                            if (tag.includes('Bóng đá')) icon = '⚽';
                            else if (tag.includes('Tennis')) icon = '🎾';
                            else if (tag.includes('Bóng rổ')) icon = '🏀';
                            else if (tag.includes('Bơi lội')) icon = '🏊‍♂️';
                            else if (tag.includes('Bóng chuyền')) icon = '🏐';

                            addMarker(lat, lon, name, icon);
                        }
                    });
                })
                .catch(e => console.error("Lỗi khi lấy dữ liệu Overpass:", e));
            });

            // Load custom places Firebase
            db.ref("customPlaces").once("value")
                .then(snapshot => {
                    let places = snapshot.val();
                    if (!places) return;

                    Object.values(places).forEach(place => {
                        if (place.lat && place.lng) {
                            let dist = distanceInMeters(userLat, userLng, place.lat, place.lng);
                            if (dist <= radius) {
                                addMarker(place.lat, place.lng, place.name, "📍");
                            }
                        }
                    });
                })
                .catch(e => console.error("Lỗi khi lấy dữ liệu Firebase:", e));
        }

        function updateRadius(newRadius) {
            radius = newRadius;

            if (radiusCircle) {
                radiusCircle.setRadius(radius);
            }

            clearCourtMarkers();

            loadBadmintonCourts();
        }

        document.addEventListener('DOMContentLoaded', function() {
            const mapView = document.getElementById('map-view');

            mapView.addEventListener('click', function() {
                document.getElementById('stadium-grid').classList.add('hidden');
                document.getElementById('map-container').classList.remove('hidden');

                setTimeout(() => {
                    initMap();
                    if (leafletMap) {
                        leafletMap.invalidateSize();
                    }
                }, 100);
            });
        });
    </script>


    <script>
        const apiKey = "cb2f4e21d59a4539b2681658251008";

        function getWeather(lat, lon) {
            fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&lang=vi`)
                .then(res => res.json())
                .then(data => {
                    if (data.location) {
                        document.getElementById("status").innerText = `${data.location.name}, ${data.location.region}`;
                        document.getElementById("weather").innerText = `${data.current.temp_c}°C`;
                        document.getElementById("condition").innerText = data.current.condition.text;
                        document.getElementById("icon").src = "https:" + data.current.condition.icon;
                    } else {
                        document.getElementById("status").innerText = "Lỗi khi lấy dữ liệu!";
                    }
                })
                .catch(() => {
                    document.getElementById("status").innerText = "Không thể kết nối API!";
                });
        }

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                pos => {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;
                    getWeather(lat, lon);
                },
                () => {
                    document.getElementById("status").innerText = "Không thể lấy vị trí!";
                }
            );
        } else {
            document.getElementById("status").innerText = "Trình duyệt không hỗ trợ GPS!";
        }



        function setBackgroundByWeather(condition) {
            let bgColor = "#007bff"; // mặc định xanh dương

            if (condition.includes("Mưa")) bgColor = "#4a90e2";
            else if (condition.includes("Nắng")) bgColor = "#f39c12";
            else if (condition.includes("Tuyết")) bgColor = "#b3e5fc";
            else if (condition.includes("Mây")) bgColor = "#95a5a6";

            document.body.style.background = bgColor;
        }

        function redirectToBooking(stadiumId) {
            if (stadiumId) {
                window.location.href = `/Stadium/StadiumDetail?stadiumId=${stadiumId}`;
            }
        }
    </script>

</body>
</html>