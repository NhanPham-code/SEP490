@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Booking Court</title>
    <link rel="stylesheet" href="~/css/Booking/Booking.css" asp-append-version="true" />
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">
                🏟️ Court Selection
            </h1>
            <p class="subtitle">Select courts for booking</p>
        </div>

        <h2 class="section-title">Choose Courts</h2>
        
        <div class="courts-grid" id="courtsGrid">
            <!-- Courts will be generated by JavaScript -->
        </div>

        <div class="legend">
            <div class="legend-item">
                <div class="legend-color available"></div>
                <span>Available</span>
            </div>
            <div class="legend-item">
                <div class="legend-color your-choice"></div>
                <span>Your Choice</span>
            </div>
            <div class="legend-item">
                <div class="legend-color pending"></div>
                <span>Pending</span>
            </div>
            <div class="legend-item">
                <div class="legend-color booked"></div>
                <span>Booked</span>
            </div>
            <div class="legend-item">
                <div class="legend-color blocked"></div>
                <span>Blocked</span>
            </div>
        </div>

        <div class="selected-section">
            <div class="selected-title">Selected Courts</div>
            <div class="selected-courts" id="selectedCourts">No court selected</div>
        </div>

        <button class="booking-button" id="bookingButton" onclick="handleBooking()">
            Next Step →
        </button>
    </div>

    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-icon" id="modalIcon"></div>
            <div class="modal-title" id="modalTitle"></div>
            <div class="modal-message" id="modalMessage"></div>
            <div class="modal-buttons">
                <button class="modal-button primary" id="modalPrimary" onclick="closeModal()">OK</button>
                <button class="modal-button secondary" id="modalSecondary" onclick="closeModal()" style="display: none;">Hủy</button>
            </div>
        </div>
    </div>

    <script>
        // Dữ liệu mẫu cho các sân
        const courts = [
            { id: 1, name: 'Court 1', status: 'available' },
            { id: 2, name: 'Court 2', status: 'your-choice' },
            { id: 3, name: 'Court 3', status: 'available' },
            { id: 4, name: 'Court 4', status: 'pending' },
            { id: 5, name: 'Court 5', status: 'booked' },
            { id: 6, name: 'Court 6', status: 'available' },
            { id: 7, name: 'Court 7', status: 'blocked' },
            { id: 8, name: 'Court 8', status: 'available' },
            { id: 9, name: 'Court 9', status: 'pending' },
            { id: 10, name: 'Court 10', status: 'available' },
            { id: 11, name: 'Court 11', status: 'booked' },
            { id: 12, name: 'Court 12', status: 'available' }
        ];

        // Create football field SVG with original status colors
        function createFootballFieldSVG(courtNumber, originalStatus) {
            const strokeColor = originalStatus === 'available' || originalStatus === 'your-choice' ? '#22c55e' : 'white';
            
            return `
                <svg class="field-icon" viewBox="0 0 120 80" xmlns="http://www.w3.org/2000/svg">
                    <!-- Football field outline -->
                    <rect x="0" y="0" width="120" height="80"
                          fill="none"
                          stroke="${strokeColor}"
                          stroke-width="3"
                          rx="6" />
                    
                    <!-- Center line top -->
                    <line x1="60" y1="0" x2="60" y2="16" 
                          stroke="${strokeColor}" 
                          stroke-width="2" 
                          stroke-linecap="round" />
                    
                    <!-- Center circle (larger) -->
                    <circle cx="60" cy="40" r="24" 
                            fill="none"
                            stroke="${strokeColor}"
                            stroke-width="2" />
                    
                    <!-- Center line bottom -->
                    <line x1="60" y1="64" x2="60" y2="80" 
                          stroke="${strokeColor}" 
                          stroke-width="2" 
                          stroke-linecap="round" />
                    
                    <!-- Background for better text visibility -->
                    <circle cx="60" cy="40" r="24" class="field-bg" />
                    
                    <!-- Court number in center circle -->
                    <text x="60" y="40" class="field-number">${courtNumber}</text>
                </svg>
            `;
        }

        let selectedCourts = [];

        // Initialize
        function init() {
            renderCourts();
            updateSelectedDisplay();
        }

        // Render courts (SVG keeps original color, only background changes)
        function renderCourts() {
            const grid = document.getElementById('courtsGrid');
            grid.innerHTML = '';

            courts.forEach(court => {
                const courtCard = document.createElement('div');
                courtCard.className = `court-card`;
                courtCard.onclick = () => selectCourt(court.id);

                // Get original status for SVG color (available courts keep green SVG even when selected)
                const originalStatus = court.originalStatus || court.status;
                if (!court.originalStatus) {
                    court.originalStatus = court.status;
                }

                courtCard.innerHTML = `
                    <div class="icon-container ${court.status}">
                        ${createFootballFieldSVG(court.id, originalStatus)}
                    </div>
                `;

                grid.appendChild(courtCard);
            });
        }

        // Select court
        function selectCourt(courtId) {
            const court = courts.find(c => c.id === courtId);
            
            if (court.status === 'booked') {
                showModal('error', 'Cannot Book Court', 'This court has already been booked. Please select another court.');
                return;
            }
            
            if (court.status === 'blocked') {
                showModal('error', 'Court Blocked', 'This court is currently unavailable for booking. Please select another court.');
                return;
            }
            
            if (court.status === 'pending') {
                showModal('warning', 'Court Pending', 'This court already has a pending booking. Do you want to proceed with selecting this court?', true, () => {
                    proceedWithSelection(courtId);
                });
                return;
            }

            proceedWithSelection(courtId);
        }

        // Proceed with selection (preserve original status for SVG color)
        function proceedWithSelection(courtId) {
            const court = courts.find(c => c.id === courtId);
            
            if (court.status === 'your-choice') {
                // Deselect - return to original status
                court.status = court.originalStatus;
                selectedCourts = selectedCourts.filter(id => id !== courtId);
            } else {
                // Select court - change only background, keep SVG color
                court.status = 'your-choice';
                if (!selectedCourts.includes(courtId)) {
                    selectedCourts.push(courtId);
                }
            }
            
            renderCourts();
            updateSelectedDisplay();
        }

        // Update selected display
        function updateSelectedDisplay() {
            const selectedElement = document.getElementById('selectedCourts');
            const bookingButton = document.getElementById('bookingButton');
            
            if (selectedCourts.length === 0) {
                selectedElement.textContent = 'No court selected';
                bookingButton.disabled = true;
            } else {
                const selectedNames = selectedCourts.map(id => {
                    const court = courts.find(c => c.id === id);
                    return court.name;
                }).join(', ');
                selectedElement.textContent = selectedNames;
                bookingButton.disabled = false;
            }
        }

        // Handle booking
        function handleBooking() {
            if (selectedCourts.length === 0) {
                showModal('warning', 'No Court Selected', 'Please select at least one court before proceeding.');
                return;
            }

            showModal('success', 'Booking Successful!', `You have selected ${selectedCourts.length} court(s). Proceed to complete your booking.`);
        }

        // Show modal
        function showModal(type, title, message, hasSecondary = false, onConfirm = null) {
            const modal = document.getElementById('modal');
            const icon = document.getElementById('modalIcon');
            const titleEl = document.getElementById('modalTitle');
            const messageEl = document.getElementById('modalMessage');
            const primaryBtn = document.getElementById('modalPrimary');
            const secondaryBtn = document.getElementById('modalSecondary');

            const config = {
                success: { icon: '✅', color: '#16a34a' },
                error: { icon: '❌', color: '#dc2626' },
                warning: { icon: '⚠️', color: '#d97706' }
            };

            icon.textContent = config[type].icon;
            icon.style.color = config[type].color;
            titleEl.textContent = title;
            titleEl.style.color = config[type].color;
            messageEl.textContent = message;

            if (hasSecondary) {
                primaryBtn.textContent = 'Continue';
                secondaryBtn.textContent = 'Cancel';
                secondaryBtn.style.display = 'block';
                primaryBtn.onclick = () => {
                    if (onConfirm) onConfirm();
                    closeModal();
                };
            } else {
                primaryBtn.textContent = 'OK';
                secondaryBtn.style.display = 'none';
                primaryBtn.onclick = closeModal;
            }

            modal.style.display = 'block';
        }

        // Close modal
        function closeModal() {
            document.getElementById('modal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('modal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Initialize page
        init();
    </script>
</body>
</html>