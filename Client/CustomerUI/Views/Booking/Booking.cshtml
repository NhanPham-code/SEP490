<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Đặt Sân Thể Thao</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="~/css/Booking/Booking.css" />
</head>

<body class="min-h-screen bg-gray-50">

    <!-- Enhanced Modal -->
    <div id="custom-modal" class="modal fixed inset-0 z-50 flex items-center justify-center">
        <div class="modal-content glass-effect rounded-2xl p-6 shadow-2xl max-w-md w-full mx-4">
            <div class="text-center">
                <div
                    class="w-12 h-12 mx-auto mb-4 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                    <span class="text-white text-xl">✓</span>
                </div>
                <h3 id="modal-title" class="text-xl font-bold text-gray-800 mb-2"></h3>
                <p id="modal-message" class="text-gray-600 mb-4 leading-relaxed"></p>
                <button id="modal-close-btn"
                    class="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-2 px-4 rounded-lg transition-all duration-300">
                    Đóng
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content container mx-auto px-4 py-6 max-w-7xl">

        <!-- Header Section -->
        <div class="mb-6 text-center">
            <h1 class="text-3xl md:text-4xl font-bold gradient-text mb-2">⏰ Đặt Sân Thể Thao</h1>
            <p class="text-gray-600">Chọn thời gian và sân phù hợp với bạn</p>
        </div>

        <!-- Date and Court Type Selection -->
        <div class="mb-6 p-6 bg-white rounded-2xl shadow-lg">
            <div class="grid md:grid-cols-2 gap-6">
                <div class="space-y-2">
                    <label for="date-picker" class="flex items-center text-sm font-semibold text-gray-700 mb-2">
                        📅 <span class="ml-2">Chọn ngày</span>
                    </label>
                    <div class="relative">
                        <input type="date" id="date-picker"
                            class="interactive-input w-full bg-white border-2 border-gray-200 hover:border-blue-400 focus:border-blue-500 px-4 py-3 rounded-xl shadow-sm text-gray-700 font-medium" />
                    </div>
                </div>
                <div class="space-y-2">
                    <label for="court-type-select" class="flex items-center text-sm font-semibold text-gray-700 mb-2">
                        🏟️ <span class="ml-2">Chọn loại sân</span>
                    </label>
                    <div class="relative">
                        <select id="court-type-select"
                            class="interactive-input w-full bg-white border-2 border-gray-200 hover:border-blue-400 focus:border-blue-500 px-4 py-3 pr-10 rounded-xl shadow-sm text-gray-700 font-medium appearance-none">
                        </select>
                        <div
                            class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path
                                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                            </svg>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Booking Grid -->
        <div class="grid lg:grid-cols-5 gap-6 mb-6">

            <!-- Time Selection Section (40% width) -->
            <div class="lg:col-span-2 bg-white rounded-2xl shadow-lg p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                    ⏰ <span class="ml-2">Chọn khung giờ</span>
                </h3>
                <div id="time-buttons-container" class="grid grid-cols-3 gap-2">
                    <!-- Time buttons will be rendered here -->
                </div>
            </div>

            <!-- Court Selection Section (60% width) -->
            <div class="lg:col-span-3 bg-white rounded-2xl shadow-lg p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                    🏆 <span class="ml-2">Chọn sân</span>
                </h3>
                <div id="courts-container" class="max-h-96 overflow-y-auto">
                    <!-- Courts will be rendered here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Floating Info Card -->
    <div id="floating-info" class="floating-info">
        <div class="bg-white rounded-2xl shadow-xl p-4 border border-gray-200">
            <h4 class="font-bold text-gray-800 mb-2">Thông tin đặt sân</h4>
            <div id="booking-summary" class="text-sm text-gray-600 space-y-1">
                <p>Chưa có thông tin</p>
            </div>
        </div>
    </div>

    <!-- Sticky Footer -->
    <div class="sticky-footer">
        <div class="container mx-auto px-4 py-4">
            <!-- Time Display (Center) -->
            <div id="time-display" class="text-center mb-4 text-gray-700 font-medium"></div>

            <div class="flex flex-col md:flex-row items-center justify-between gap-4">
                <!-- Stadium Info (Left) -->
                <div class="hidden md:flex items-center space-x-4 text-sm">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                        <span class="text-gray-600">Giờ mở cửa: <span id="footer-hours" class="font-semibold">06:00 -
                                22:00</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-gray-600">Giá thuê: <span id="footer-price" class="font-semibold">200.000 -
                                300.000 VNĐ/giờ</span></span>
                    </div>
                </div>

                <!-- Continue Button (Right) -->
                <button id="continue-button" disabled
                    class="bg-gray-400 cursor-not-allowed px-8 py-3 rounded-xl font-bold text-white transition-all duration-300 shadow-lg">
                    <span class="flex items-center">
                        🚀 <span class="ml-2">Tiếp tục đặt sân</span>
                    </span>
                </button>
            </div>
        </div>
    </div>

    <!-- Hidden Form -->
    <form id="bookingForm" method="post" action="/Booking/CheckoutTimeZone">
        <input type="hidden" name="Date" />
        <input type="hidden" name="StartTime" />
        <input type="hidden" name="EndTime" />
        <input type="hidden" name="TotalPrice" />
        <input type="hidden" name="CourtId" />
        <input type="hidden" name="StadiumId" />
    </form>

    <!-- Các phần HTML và CSS giữ nguyên -->
    <script>
        $(document).ready(function () {
            // --- CÁC BIẾN VÀ HÀM CŨ ---
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            // Cập nhật slots để bao gồm start/end hour, giúp cho việc map dữ liệu
            const slots = [
                { id: 1, name: "Slot 1 (7:00 - 9:00)", startHour: 7, endHour: 9 },
                { id: 2, name: "Slot 2 (9:00 - 11:00)", startHour: 9, endHour: 11 },
                { id: 3, name: "Slot 3 (13:00 - 15:00)", startHour: 13, endHour: 15 },
                { id: 4, name: "Slot 4 (15:00 - 17:00)", startHour: 15, endHour: 17 },
                { id: 5, name: "Slot 5 (17:00 - 19:00)", startHour: 17, endHour: 19 },
                { id: 6, name: "Slot 6 (19:00 - 21:00)", startHour: 19, endHour: 21 }
            ];

            function populateYears() {
                const $yearSelect = $('#year');
                for (let year = currentYear - 5; year <= currentYear + 5; year++) {
                    $yearSelect.append($('<option>', { value: year, text: year, selected: year === currentYear }));
                }
            }

            function getWeeksInYear(year) {
                const weeks = [];
                const firstDayOfYear = new Date(year, 0, 1);
                let firstMonday = new Date(firstDayOfYear);
                const dayOfWeek = firstMonday.getDay() || 7;
                if (dayOfWeek !== 1) {
                    firstMonday.setDate(firstMonday.getDate() + (8 - dayOfWeek) % 7);
                }
                let currentMonday = new Date(firstMonday);
                let weekNum = 1;
                while (currentMonday.getFullYear() === year || (currentMonday.getFullYear() === year + 1 && currentMonday.getMonth() === 0 && currentMonday.getDate() <= 7)) {
                    const endOfWeek = new Date(currentMonday);
                    endOfWeek.setDate(currentMonday.getDate() + 6);
                    weeks.push({
                        weekNum: weekNum,
                        startDate: new Date(currentMonday),
                        endDate: new Date(endOfWeek),
                        label: `${formatDate(currentMonday)} đến ${formatDate(endOfWeek)}`
                    });
                    currentMonday.setDate(currentMonday.getDate() + 7);
                    weekNum++;
                }
                return weeks;
            }

            function formatDate(date) {
                return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}`;
            }

            function populateWeeks(year) {
                const weeks = getWeeksInYear(year);
                const $weekSelect = $('#week');
                $weekSelect.empty();
                weeks.forEach((week, index) => {
                    $weekSelect.append($('<option>', {
                        value: index,
                        text: `Tuần ${week.weekNum}: ${week.label}`,
                        'data-start': week.startDate.toISOString(),
                        'data-end': week.endDate.toISOString()
                    }));
                });
                const currentWeekIndex = findCurrentWeekIndex(weeks);
                if (currentWeekIndex >= 0) {
                    $weekSelect.val(currentWeekIndex);
                }
                // Trigger change để load dữ liệu lần đầu
                $weekSelect.trigger('change');
            }

            function findCurrentWeekIndex(weeks) {
                const today = new Date();
                for (let i = 0; i < weeks.length; i++) {
                    if (today >= weeks[i].startDate && today <= weeks[i].endDate) return i;
                }
                return 0;
            }

            // --- CÁC HÀM MỚI VÀ HÀM ĐƯỢC CẬP NHẬT ---

            // 1. Cập nhật hàm generateTableRows để tạo ID cho từng ô
            function generateTableRows() {
                const $tbody = $('#booking-table tbody');
                $tbody.empty();
                slots.forEach(slot => {
                    const $row = $('<tr>');
                    $row.append($('<td>').text(slot.name).addClass('slot-cell'));
                    for (let i = 0; i < 7; i++) {
                        const dayIndex = (i + 1) % 7; // Thứ 2=1, ... CN=0
                        // Tạo ID duy nhất cho mỗi ô: slotId-dayIndex (e.g., "1-1" for Slot 1, Monday)
                        const cellId = `cell-${slot.id}-${dayIndex}`;
                        $row.append($('<td>').attr('id', cellId).addClass('booking-cell').text('-'));
                    }
                    $tbody.append($row);
                });
            }

            // 2. Hàm mới để gọi AJAX và lấy dữ liệu
            function fetchAndDisplayBookings(startDate, endDate) {
                console.log(`Đang tải dữ liệu từ ${startDate} đến ${endDate}`);
                $('#no-data-message').hide(); // Ẩn thông báo cũ
                $('.booking-cell').html('<div class="loader"></div>'); // Hiển thị loader

                $.ajax({
                    url: '@Url.Action("GetBookingsForWeek", "Booking")',
                    type: 'GET',
                    data: {
                        startDate: startDate.toISOString(),
                        endDate: endDate.toISOString()
                    },
                    success: function (bookings) {
                        console.log("Dữ liệu nhận được:", bookings);
                        displayBookingsOnTable(bookings);
                    },
                    error: function (xhr) {
                        console.error("Lỗi khi tải dữ liệu:", xhr.responseText);
                        $('.booking-cell').text('-').removeClass('booked');
                        $('#no-data-message').show();
                    }
                });
            }

            // 3. Hàm mới để hiển thị dữ liệu lên bảng
            function displayBookingsOnTable(bookings) {
                // Reset bảng về trạng thái ban đầu
                $('.booking-cell').text('-').removeClass('booked');

                if (!bookings || bookings.length === 0) {
                    $('#no-data-message').show();
                    return;
                }

                bookings.forEach(booking => {
                    const bookingDate = new Date(booking.date);
                    const dayOfWeek = bookingDate.getDay(); // CN=0, T2=1, ..., T7=6

                    if (booking.bookingDetails && booking.bookingDetails.length > 0) {
                        booking.bookingDetails.forEach(detail => {
                            const startHour = detail.startTime.hour;
                            const endHour = detail.endTime.hour;

                            // Tìm slot tương ứng
                            const slot = slots.find(s => s.startHour === startHour && s.endHour === endHour);
                            if (slot) {
                                const cellId = `#cell-${slot.id}-${dayOfWeek}`;
                                const $cell = $(cellId);

                                if ($cell.length) {
                                    // Nếu ô vẫn là '-' thì cập nhật, ngược lại thì thêm vào
                                    if ($cell.text() === '-') {
                                        $cell.html(''); // Xóa dấu '-'
                                    }
                                    // Thêm thông tin sân đã đặt
                                    $cell.append(`<div class="court-chip">Sân ${detail.courtId}</div>`);
                                    $cell.addClass('booked');
                                }
                            }
                        });
                    }
                });
                // Xóa loader khỏi các ô không có booking
                $('.booking-cell:not(.booked)').text('-');
            }

            // 4. Cập nhật hàm này để gọi fetchAndDisplayBookings
            function updateTableDates() {
                const selectedOption = $('#week option:selected');
                if (selectedOption.length === 0) return;

                const startDate = new Date(selectedOption.data('start'));
                const endDate = new Date(selectedOption.data('end'));

                // Cập nhật header ngày
                $('.day-header').each(function () {
                    const dayIndex = parseInt($(this).data('day'));
                    const date = new Date(startDate);
                    date.setDate(date.getDate() + (dayIndex - 1 + 7) % 7);
                    $(this).find('.date-display').text(formatDate(date));
                });

                // Gọi hàm lấy dữ liệu
                fetchAndDisplayBookings(startDate, endDate);
            }

            // --- EVENT HANDLERS ---
            $('#year').on('change', function () {
                const selectedYear = parseInt($(this).val());
                populateWeeks(selectedYear);
            });

            $('#week').on('change', function () {
                updateTableDates();
            });

            // --- KHỞI TẠO ---
            generateTableRows();
            populateYears();
            populateWeeks(currentYear); // Hàm này sẽ tự động trigger 'change' và load dữ liệu
        });
    </script>
</body>

</html>