<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/Booking/BookingSchedule.css">
</head>

<body>
    <div class="container">
        <h1>Lịch Đặt Sân Cầu Lông</h1>

        <div class="filters">
            <div class="filter-group">
                <label for="year"><i class="fas fa-calendar-alt"></i> Năm:</label>
                <select id="year" class="select-control">
                    <!-- Populated by JavaScript -->
                </select>
            </div>
            <div class="filter-group">
                <label for="week"><i class="fas fa-calendar-week"></i> Tuần:</label>
                <select id="week" class="select-control">
                    <!-- Populated by JavaScript -->
                </select>
            </div>
        </div>

        <div class="table-container">
            <table id="booking-table" class="booking-table">
                <thead>
                    <tr>
                        <th class="day-header" data-day="1">THỨ 2<div class="date-display"></div>
                        </th>
                        <th class="day-header" data-day="2">THỨ 3<div class="date-display"></div>
                        </th>
                        <th class="day-header" data-day="3">THỨ 4<div class="date-display"></div>
                        </th>
                        <th class="day-header" data-day="4">THỨ 5<div class="date-display"></div>
                        </th>
                        <th class="day-header" data-day="5">THỨ 6<div class="date-display"></div>
                        </th>
                        <th class="day-header" data-day="6">THỨ 7<div class="date-display"></div>
                        </th>
                        <th class="day-header" data-day="0">CHỦ NHẬT<div class="date-display"></div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td id="day-1" class="day-cell" data-day="1"></td>
                        <td id="day-2" class="day-cell" data-day="2"></td>
                        <td id="day-3" class="day-cell" data-day="3"></td>
                        <td id="day-4" class="day-cell" data-day="4"></td>
                        <td id="day-5" class="day-cell" data-day="5"></td>
                        <td id="day-6" class="day-cell" data-day="6"></td>
                        <td id="day-0" class="day-cell" data-day="0"></td>
                    </tr>
                </tbody>
            </table>

            <div id="no-data-message" class="no-data-message">
                <i class="fas fa-exclamation-circle"></i> Không có sân nào đã đặt trong tuần này
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            // Initialize variables
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();

            // Populate year dropdown (current year +/- 5 years)
            function populateYears() {
                const $yearSelect = $('#year');
                for (let year = currentYear - 5; year <= currentYear + 5; year++) {
                    const $option = $('<option>', {
                        value: year,
                        text: year,
                        selected: year === currentYear
                    });
                    $yearSelect.append($option);
                }
            }

            // Get weeks for a specific year
            function getWeeksInYear(year) {
                const weeks = [];
                const firstDayOfYear = new Date(year, 0, 1);

                // Find first Monday of the year or use Jan 1 if it's already Monday
                let firstMonday = new Date(firstDayOfYear);
                const dayOfWeek = firstMonday.getDay() || 7; // Convert Sunday (0) to 7

                if (dayOfWeek !== 1) { // If not Monday
                    firstMonday.setDate(firstMonday.getDate() + (8 - dayOfWeek) % 7);
                }

                // Generate all weeks in the year
                let currentMonday = new Date(firstMonday);
                let weekNum = 1;

                while (currentMonday.getFullYear() === year ||
                    (currentMonday.getFullYear() === year + 1 && currentMonday.getMonth() === 0 && currentMonday.getDate() <= 7)) {

                    const endOfWeek = new Date(currentMonday);
                    endOfWeek.setDate(currentMonday.getDate() + 6);

                    const startStr = formatDate(currentMonday);
                    const endStr = formatDate(endOfWeek);

                    weeks.push({
                        weekNum: weekNum,
                        startDate: new Date(currentMonday),
                        endDate: new Date(endOfWeek),
                        label: `${startStr} đến ${endStr}`
                    });

                    currentMonday.setDate(currentMonday.getDate() + 7);
                    weekNum++;
                }

                return weeks;
            }

            // Format date as DD/MM
            function formatDate(date) {
                return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}`;
            }

            // Format time as HH:MM
            function formatTime(timeString) {
                const date = new Date(timeString);
                return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
            }

            // Populate weeks dropdown for selected year
            function populateWeeks(year) {
                const weeks = getWeeksInYear(year);
                const $weekSelect = $('#week');
                $weekSelect.empty();

                weeks.forEach((week, index) => {
                    const $option = $('<option>', {
                        value: index,
                        text: `Tuần ${week.weekNum}: ${week.label}`,
                        'data-start': week.startDate.toISOString(),
                        'data-end': week.endDate.toISOString()
                    });
                    $weekSelect.append($option);
                });

                // Find current week and select it
                const currentWeekIndex = findCurrentWeekIndex(weeks);
                if (currentWeekIndex >= 0) {
                    $weekSelect.val(currentWeekIndex);
                }

                // Trigger change để load dữ liệu lần đầu
                $weekSelect.trigger('change');
            }

            // Find the index of the current week
            function findCurrentWeekIndex(weeks) {
                const today = new Date();

                for (let i = 0; i < weeks.length; i++) {
                    const weekStart = weeks[i].startDate;
                    const weekEnd = weeks[i].endDate;

                    if (today >= weekStart && today <= weekEnd) {
                        return i;
                    }
                }

                return 0; // Default to first week if not found
            }

            // Fetch and display bookings
            function fetchAndDisplayBookings(startDate, endDate) {
                console.log(`Đang tải dữ liệu từ ${startDate} đến ${endDate}`);
                $('#no-data-message').hide(); // Ẩn thông báo cũ
                $('.booking-cell').html('<div class="loader"></div>'); // Hiển thị loader

                $.ajax({
                    url: '@Url.Action("GetBookingsForWeek", "Booking")',
                    type: 'GET',
                    data: {
                        startDate: startDate.toISOString(),
                        endDate: endDate.toISOString()
                    },
                    success: function (bookings) {
                        console.log("Dữ liệu nhận được:", bookings);
                        displayBookingsOnTable(bookings);
                    },
                    error: function (xhr) {
                        console.error("Lỗi khi tải dữ liệu:", xhr.responseText);
                        $('.booking-cell').text('-').removeClass('booked');
                        $('#no-data-message').show();
                    }
                });
            }
            // Clear table
            function clearTable() {
                $('.day-cell').empty();
            }

            // Display bookings on table
            // Thay thế hàm displayBookingsOnTable trong script của bạn
            function displayBookingsOnTable(bookings) {
                // Clear table first
                clearTable();

                if (!bookings || bookings.length === 0) {
                    $('#no-data-message').show();
                    return;
                }

                $('#no-data-message').hide();

                // Group bookings by date and time
                const bookingsByDate = {};

                bookings.forEach(booking => {
                    const bookingDate = new Date(booking.date);
                    const dayOfWeek = bookingDate.getDay(); // Sunday=0, Monday=1, ..., Saturday=6

                    if (!bookingsByDate[dayOfWeek]) {
                        bookingsByDate[dayOfWeek] = {};
                    }

                    // Process each booking detail and group by time
                    if (booking.bookingDetails && booking.bookingDetails.length > 0) {
                        booking.bookingDetails.forEach(detail => {
                            const timeKey = `${detail.startTime}-${detail.endTime}`;

                            if (!bookingsByDate[dayOfWeek][timeKey]) {
                                bookingsByDate[dayOfWeek][timeKey] = {
                                    stadiumId: booking.stadiumId,
                                    startTime: detail.startTime,
                                    endTime: detail.endTime,
                                    bookingId: booking.id,
                                    status: booking.status,
                                    courts: []
                                };
                            }

                            // Add court to the time group
                            bookingsByDate[dayOfWeek][timeKey].courts.push(detail.courtId);
                        });
                    }
                });

                // Display bookings for each day
                Object.keys(bookingsByDate).forEach(dayOfWeek => {
                    const dayBookings = bookingsByDate[dayOfWeek];
                    const $dayCell = $(`#day-${dayOfWeek}`);

                    // Convert to array and sort by start time
                    const timeSlots = Object.values(dayBookings).sort((a, b) =>
                        new Date(a.startTime) - new Date(b.startTime)
                    );

                    timeSlots.forEach(timeSlot => {
                        const startTime = formatTime(timeSlot.startTime);
                        const endTime = formatTime(timeSlot.endTime);

                        // Sort courts numerically
                        timeSlot.courts.sort((a, b) => a - b);

                        // Create court chips
                        const courtChips = timeSlot.courts.map(courtId =>
                            `<span class="court-chip">Court ${courtId}</span>`
                        ).join('');

                        const $bookingItem = $(`
                <div class="booking-item ${timeSlot.status}" data-booking-id="${timeSlot.bookingId}">
                    <div class="booking-header">
                        <div class="booking-time">
                            <i class="fas fa-clock"></i>
                            ${startTime} - ${endTime}
                        </div>
                        <button class="detail-btn" onclick="viewBookingDetail(${timeSlot.bookingId})">
                            <i class="fas fa-eye"></i>
                            Chi tiết
                        </button>
                    </div>
                    <div class="booking-content">
                        <div class="courts-container">
                            ${courtChips}
                        </div>
                        <div class="stadium-info">
                            <span class="stadium-id">Sân ${timeSlot.stadiumId}</span>
                        </div>
                    </div>
                </div>
            `);

                        $dayCell.append($bookingItem);
                    });
                });
            }

            // Update table headers with the dates for selected week
            function updateTableDates() {
                const selectedOption = $('#week option:selected');
                if (selectedOption.length === 0) return;

                const startDate = new Date(selectedOption.data('start'));
                const endDate = new Date(selectedOption.data('end'));

                // Update each day column with its date
                $('.day-header').each(function () {
                    const dayIndex = parseInt($(this).data('day'));
                    const date = new Date(startDate);

                    // Calculate the correct date for each day of the week
                    if (dayIndex === 0) { // Sunday
                        date.setDate(date.getDate() + 6);
                    } else { // Monday to Saturday
                        date.setDate(date.getDate() + dayIndex - 1);
                    }

                    $(this).find('.date-display').text(formatDate(date));
                });

                // Fetch bookings for this week
                fetchAndDisplayBookings(startDate, endDate);
            }

            // Event handlers
            $('#year').on('change', function () {
                const selectedYear = parseInt($(this).val());
                populateWeeks(selectedYear);
            });

            $('#week').on('change', function () {
                updateTableDates();
            });

            // Initialize
            populateYears();
            populateWeeks(currentYear);
        });
    </script>
</body>

</html>