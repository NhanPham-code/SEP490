<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Đặt Sân Thể Thao</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="~/css/Booking/MonthlyBooking.css" />
</head>
<body class="min-h-screen bg-gray-50">
    <!-- Enhanced Modal -->
    <div id="custom-modal" class="modal fixed inset-0 z-50 flex items-center justify-center">
        <div class="modal-content glass-effect rounded-2xl p-6 shadow-2xl max-w-md w-full mx-4">
            <div class="text-center">
                <div class="w-12 h-12 mx-auto mb-4 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                    <span class="text-white text-xl">✓</span>
                </div>
                <h3 id="modal-title" class="text-xl font-bold text-gray-800 mb-2"></h3>
                <p id="modal-message" class="text-gray-600 mb-4 leading-relaxed"></p>
                <button id="modal-close-btn" class="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-2 px-4 rounded-lg transition-all duration-300">
                    Đóng
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content container mx-auto px-4 py-6">

        <!-- Header Section -->
        <div class="mb-6 text-center">
            <h1 class="text-3xl md:text-4xl font-bold gradient-text mb-2">⏰ Đặt Sân Thể Thao</h1>
            <p class="text-gray-600">Chọn thời gian và sân phù hợp với bạn</p>
        </div>

        <!-- Main Layout: Optimized Full Width -->
        <div class="main-layout mb-6">
            <!-- Calendar Section (Fixed Width, Left Aligned) -->
            <div class="calendar-section">
                <div class="p-5 bg-white rounded-2xl shadow-lg calendar-container">
                    <div class="calendar-header">
                        <button class="nav-button" id="prevMonth">‹</button>
                        <div class="month-year-display" id="monthYearDisplay"></div>
                        <button class="nav-button" id="nextMonth">›</button>
                    </div>

                    <div class="calendar-grid" id="calendarGrid">
                        <!-- Calendar will be generated here -->
                    </div>

                    <!-- Selection Summary -->
                    <div id="selection-summary" class="selection-summary empty" style="display:none">
                        Chưa chọn ngày nào
                    </div>

                    <!-- Calendar Action Buttons -->
                    <div class="calendar-actions">
                        <button id="clear-selection-btn" class="calendar-btn clear-btn" disabled>
                            <span>Xóa tất cả</span>
                        </button>

                        <button id="confirm-selection-btn" class="calendar-btn confirm-btn" disabled>
                            <span>Xác nhận</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Selection Panel: Time + Court (Full Width) -->
            <div class="selection-section">
                <div class="bg-white rounded-2xl shadow-lg p-6 h-fit space-y-6">
                    <!-- Time Selection Section -->
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                            ⏰ <span class="ml-2">Chọn khung giờ</span>
                        </h3>
                        <div id="time-buttons-container" class="time-grid">
                            <!-- Time buttons will be rendered here -->
                        </div>
                    </div>

                    <!-- Divider -->
                    <div class="border-t border-gray-200"></div>

                    <!-- Court Selection Section -->
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                            🏆 <span class="ml-2">Chọn sân</span>
                        </h3>
                        <div id="courts-container" class="max-h-96 overflow-y-auto">
                            <!-- Courts will be rendered here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sticky Footer -->
    <div class="sticky-footer">
        <div class="container mx-auto px-4 py-4">
            <!-- Time Display (Center) -->
            <div id="time-display" class="text-center mb-4 text-gray-700 font-medium"></div>

            <div class="flex flex-col md:flex-row items-center justify-between gap-4">
                <!-- Stadium Info (Left) -->
                <div class="hidden md:flex items-center space-x-4 text-sm">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                        <span class="text-gray-600">Giờ mở cửa: <span id="footer-hours" class="font-semibold">06:00 - 22:00</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-gray-600">Giá thuê: <span id="footer-price" class="font-semibold">200.000 - 300.000 VNĐ/giờ</span></span>
                    </div>
                </div>

                <!-- Continue Button (Right) -->
                <button id="continue-button" disabled
                        class="bg-gray-400 cursor-not-allowed px-8 py-3 rounded-xl font-bold text-white transition-all duration-300 shadow-lg">
                    <span class="flex items-center">
                        🚀 <span class="ml-2">Tiếp tục đặt sân</span>
                    </span>
                </button>
            </div>
        </div>
    </div>

    <!-- *** UPDATED Hidden Form *** -->
    <form id="monthlyBookingForm" method="post" action="/Booking/MonthlyCheckout">
        <input type="hidden" name="Year" />
        <input type="hidden" name="Month" />
        <input type="hidden" name="SelectedDays" />
        <input type="hidden" name="StartTime" />
        <input type="hidden" name="EndTime" />
        <input type="hidden" name="SelectedCourtIds" />
        <input type="hidden" name="TotalPrice" />
        <input type="hidden" name="StadiumId" />
    </form>

    <script>
        const stadiumId = '@ViewBag.StadiumId';
        let stadiumData = null; //stadium data
        let openTime; // openTime
        let closeTime; // closeTime
        let allHours = []; // array for showing time slit
        // calendar
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();
        let today = new Date();
        let minAllowedMonth = currentMonth;
        let minAllowedYear = currentYear;
        let selectedDates = new Set();
        let selectedWeekdays = new Set();
        const monthNames = [
            'tháng 1', 'tháng 2', 'tháng 3', 'tháng 4',
            'tháng 5', 'tháng 6', 'tháng 7', 'tháng 8',
            'tháng 9', 'tháng 10', 'tháng 11', 'tháng 12'
        ];
        const dayNames = ['T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'CN'];
        // CSS cho highlight effect
        const highlightCSS = `
        .highlight-section {
            animation: highlightPulse 2s ease-in-out;
        }

        @@keyframes highlightPulse {
            0% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.4); }
            50% { box-shadow: 0 0 0 20px rgba(102, 126, 234, 0.1); }
            100% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0); }
        }
        `;

        // time slot
        const $timeButtonsContainer = $('#time-buttons-container');
        let startTime = null;
        let endTime = null;
        // court
        const $courtsContainer = $('#courts-container');
        let selectedCourts = [];
        let bookedCourtIds = new Set();
        let blockedCourtIds = new Set();
        // **NEW** - Separate relation sets
        let bookedCourtRelationIds = new Set();
        let selectedCourtRelationIds = new Set();
        let bookedDaysInMonth = new Set(); // Lưu các ngày (số) đã có booking trong tháng

        $(document).ready(function() {
            initializePage();
            initializeCourtSelectionHandler(); // Khởi tạo handler

            // *** NEW: Event handler for the continue button ***
            $('#continue-button').on('click', function() {
                if ($(this).is(':disabled')) {
                    return;
                }
                submitMonthlyBooking();
            });
        });

        // function when load page
        async function initializePage() {
            calculateMinAllowedMonth();
            await fetchStadiumData(stadiumId);
            generateCalendar(currentMonth, currentYear);
            updateSelectionUI();
            renderTimeButtons();
            let filteredCourts = stadiumData.Courts;
            renderCourts(filteredCourts);
            updateFooterSummary(); // Call initially
        }

        // fetch stadium data from server
        async function fetchStadiumData(id) {
            const searchTerm = `&$filter=Id eq ${id}`;

            try {
                const data = await $.ajax({
                    url: `/Home/Stadiums`,
                    type: 'GET',
                    data: { searchTerm: searchTerm }
                });

                if (data.value && data.value.length > 0) {
                    stadiumData = data.value[0];
                    stadiumData.Courts.forEach(court => {
                        if (!court.IsAvailable) {
                            blockedCourtIds.add(court.Id);
                        }
                    });
                    openTime = parseHour(stadiumData.OpenTime);
                    closeTime = parseHour(stadiumData.CloseTime);
                    allHours = Array.from(
                        { length: closeTime - openTime + 1 },
                        (_, i) => i + openTime
                    );
                    console.log('Dữ liệu sân vận động:', stadiumData);
                } else {
                    console.error('Không tìm thấy dữ liệu sân vận động.');
                }
            } catch (error) {
                console.error('Lỗi khi tải dữ liệu sân vận động:', error);
            }
        }

        // Calendar function
        function clearAllSelections() {
            selectedDates.clear();
            selectedWeekdays.clear();
            console.log('All selections cleared');
            updateFooterSummary();
        }

        function generateCalendar(month, year) {
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const firstDayOfWeek = (firstDay.getDay() + 6) % 7;
            const daysInMonth = lastDay.getDate();

            $('#monthYearDisplay').text(`${monthNames[month]} năm ${year}`);

            let calendarHTML = '';

            dayNames.forEach((day, index) => {
                const isSelectedWeekday = selectedWeekdays.has(index);
                const headerClass = isSelectedWeekday ? 'day-header selected-weekday' : 'day-header';
                calendarHTML += `<div class="${headerClass}" data-weekday="${index}">${day}</div>`;
            });

            for (let i = 0; i < firstDayOfWeek; i++) {
                calendarHTML += `<div class="empty-cell"></div>`;
            }

            const isValidMonth = isMonthYearValid(month, year);

            for (let day = 1; day <= daysInMonth; day++) {
                const dateObj = new Date(year, month, day);
                const dayOfWeek = (dateObj.getDay() + 6) % 7;
                const dateKey = `${year}-${month}-${day}`;

                const isToday = (year === today.getFullYear() && month === today.getMonth() && day === today.getDate());
                const isSelected = selectedDates.has(dateKey);
                const isWeekdaySelected = selectedWeekdays.has(dayOfWeek);
                const isBooked = bookedDaysInMonth.has(day);

                let classes = 'day-cell';
                let isDisabled = !isValidMonth || isBooked;

                if (isDisabled) {
                    classes += ' disabled-date-calendar'; // Luôn thêm class disabled-date nếu ngày bị vô hiệu hóa
                    if (isBooked) {
                        classes += ' booked-day'; // Thêm class booked-day nếu lý do là đã được đặt
                    }
                } else {
                    // Các class này chỉ được thêm nếu ngày có thể chọn
                    if (isSelected) {
                        classes += ' selected';
                    } else if (isWeekdaySelected) {
                        classes += ' weekday-selected';
                    }

                    if (isToday && (isSelected || isWeekdaySelected)) {
                        classes += ' today-in-selection';
                    }
                }

                calendarHTML += `<div class="${classes}" data-date="${day}" data-weekday="${dayOfWeek}" data-date-key="${dateKey}" ${isDisabled ? 'data-disabled="true"' : ''}>${day}</div>`;
            }

            const totalCellsUsed = firstDayOfWeek + daysInMonth;
            const remainingCells = totalCellsUsed % 7;
            if (remainingCells > 0) {
                for (let i = 0; i < (7 - remainingCells); i++) {
                    calendarHTML += `<div class="empty-cell"></div>`;
                }
            }

            $('#calendarGrid').html(calendarHTML);
            updateNavigationButtons();
        }

        // Hàm cập nhật trạng thái nút điều hướng
        function updateNavigationButtons() {
            const $prevButton = $('#prevMonth');
            const $nextButton = $('#nextMonth');

            // Disable nút Previous nếu không thể điều hướng về tháng trước
            if (!canNavigateToPrevMonth()) {
                $prevButton.prop('disabled', true).addClass('disabled-nav');
            } else {
                $prevButton.prop('disabled', false).removeClass('disabled-nav');
            }

            // Next button luôn enabled (có thể điều hướng đến tương lai)
            $nextButton.prop('disabled', false).removeClass('disabled-nav');
        }

        // $('<style>').text(highlightCSS).appendTo('head');

        // Cập nhật event handlers
        $('#prevMonth').click(function() {
            if (!canNavigateToPrevMonth()) {
                console.log('Cannot navigate to previous month');
                return;
            }

            clearAllSelections();
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            generateCalendar(currentMonth, currentYear);
        });

        $('#nextMonth').click(function() {
            clearAllSelections();
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            generateCalendar(currentMonth, currentYear);
        });

        function selectWeekday(weekdayIndex) {
            if (selectedWeekdays.has(weekdayIndex)) {
                selectedWeekdays.delete(weekdayIndex);
                // Remove all dates of this weekday from selectedDates
                const datesToRemove = [];
                selectedDates.forEach(dateKey => {
                    const [year, month, day] = dateKey.split('-').map(Number);
                    const dateObj = new Date(year, month, day);
                    const dayOfWeek = (dateObj.getDay() + 6) % 7;
                    if (dayOfWeek === weekdayIndex) {
                        datesToRemove.push(dateKey);
                    }
                });
                datesToRemove.forEach(dateKey => selectedDates.delete(dateKey));
            } else {
                selectedWeekdays.add(weekdayIndex);
                // Add all dates of this weekday in current month
                const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
                for (let day = 1; day <= daysInMonth; day++) {
                    const dateObj = new Date(currentYear, currentMonth, day);
                    const dayOfWeek = (dateObj.getDay() + 6) % 7;
                    if (dayOfWeek === weekdayIndex) {
                        const dateKey = `${currentYear}-${currentMonth}-${day}`;
                        selectedDates.add(dateKey);
                    }
                }
            }
            // *** START CHANGE ***
            // Sau khi chọn/bỏ chọn cả một thứ, cần lọc lại các ngày đã chọn
            // phòng trường hợp một số ngày trong thứ đó đã bị đặt từ trước.
            filterSelectedDates();
            generateCalendar(currentMonth, currentYear);
            logSelectedDates();
            // *** END CHANGE ***
        }

        function logSelectedDates() {
            const selectedArray = Array.from(selectedDates).map(dateKey => {
                const [year, month, day] = dateKey.split('-').map(Number);
                return new Date(year, month, day);
            }).sort((a, b) => a - b);

            console.log('Selected dates:', selectedArray);
            console.log('Selected weekdays:', Array.from(selectedWeekdays).map(idx => dayNames[idx]));
        }

        $(document).on('click', '.day-header', function() {
            const weekdayIndex = parseInt($(this).data('weekday'));

            // Kiểm tra xem tháng hiện tại có hợp lệ không
            if (!isMonthYearValid(currentMonth, currentYear)) {
                console.log('Cannot select weekday in disabled month');
                return;
            }

            selectWeekday(weekdayIndex);
        });

        $(document).on('click', '.day-cell', function() {
            // Kiểm tra xem ngày có bị disabled không
            if ($(this).data('disabled')) {
                console.log('This date is disabled');
                return;
            }

            const dateKey = $(this).data('date-key');
            const weekdayIndex = parseInt($(this).data('weekday'));

            if (selectedDates.has(dateKey)) {
                selectedDates.delete(dateKey);
                if (selectedWeekdays.has(weekdayIndex)) {
                    selectedWeekdays.delete(weekdayIndex);
                }
            } else {
                selectedDates.add(dateKey);
                if (areAllWeekdayDatesSelected(weekdayIndex)) {
                    selectedWeekdays.add(weekdayIndex);
                }
            }

            updateSelectedWeekdays();
            generateCalendar(currentMonth, currentYear);
            logSelectedDates();
        });

        $('#clear-selection-btn').on('click', function() {
            if (selectedDates.size === 0 && selectedWeekdays.size === 0) {
                return;
            }

            // Hiển thị confirmation dialog
            if (confirm('Bạn có chắc chắn muốn xóa tất cả các lựa chọn (ngày và sân)?')) {
                // 1. Xóa lựa chọn sân và các dữ liệu liên quan
                selectedCourts = [];
                selectedCourtRelationIds.clear();
                bookedCourtIds.clear(); // Xóa các sân đã đặt được fetch về
                bookedCourtRelationIds.clear();
                console.log('All court selections cleared by user');

                // 2. Xóa lựa chọn ngày trên lịch
                clearAllSelections();

                // 3. Cập nhật lại giao diện
                renderCourts(stadiumData.Courts); // Vẽ lại danh sách sân
                fetchBookedSlotsForSelection(); // Gọi lại để xóa các ngày đỏ trên lịch
                updateSelectionUI(); // Cập nhật lại thông tin tóm tắt và trạng thái nút
                updateFooterSummary(); // Cập nhật footer

                console.log('All selections cleared by user');
            }
        });

        // Confirm selection button
        $('#confirm-selection-btn').on('click', function() {
            if (selectedDates.size === 0 && selectedWeekdays.size === 0) {
                alert('Vui lòng chọn ít nhất một ngày!');
                return;
            }

            // Xử lý logic xác nhận
            handleConfirmSelection();
        });

        $(document).on('touchstart', '.day-cell, .nav-button, .day-header', function() {
            // Prevent double-tap zoom on mobile
        });

        // Hàm kiểm tra xem có thể điều hướng đến tháng trước không
        function canNavigateToPrevMonth() {
            if (currentYear < minAllowedYear) {
                return false;
            }
            if (currentYear === minAllowedYear && currentMonth <= minAllowedMonth) {
                return false;
            }
            return true;
        }

        // Hàm kiểm tra xem tháng/năm có hợp lệ để chọn không
        function isMonthYearValid(month, year) {
            if (year < minAllowedYear) {
                return false;
            }
            if (year === minAllowedYear && month < minAllowedMonth) {
                return false;
            }
            return true;
        }

        // Hàm tính toán tháng tối thiểu được phép
        function calculateMinAllowedMonth() {
            const today = new Date();
            const currentDay = today.getDate();

            // Nếu đã qua ngày 25 thì phải chọn tháng sau tiếp theo
            if (currentDay > 25) {
                // Tháng hiện tại + 2 tháng
                let targetMonth = today.getMonth() + 1;
                let targetYear = today.getFullYear();

                if (targetMonth > 11) {
                    targetMonth = targetMonth - 12;
                    targetYear += 1;
                }

                minAllowedMonth = targetMonth;
                minAllowedYear = targetYear;
            } else {
                // Chưa qua ngày 25 thì được chọn tháng sau
                let targetMonth = today.getMonth();
                let targetYear = today.getFullYear();

                if (targetMonth > 11) {
                    targetMonth = 0;
                    targetYear += 1;
                }

                minAllowedMonth = targetMonth;
                minAllowedYear = targetYear;
            }

            // Set current calendar to minimum allowed month
            currentMonth = minAllowedMonth;
            currentYear = minAllowedYear;

            console.log(`Min allowed month: ${minAllowedMonth + 1}/${minAllowedYear}`);
            console.log(`Current calendar set to: ${currentMonth + 1}/${currentYear}`);
        }

        // Hàm kiểm tra xem tất cả ngày của một thứ có được chọn không
        function areAllWeekdayDatesSelected(weekdayIndex) {
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            let weekdayDatesInMonth = [];

            for (let day = 1; day <= daysInMonth; day++) {
                const dateObj = new Date(currentYear, currentMonth, day);
                const dayOfWeek = (dateObj.getDay() + 6) % 7; // Convert to Monday = 0
                if (dayOfWeek === weekdayIndex) {
                    weekdayDatesInMonth.push(`${currentYear}-${currentMonth}-${day}`);
                }
            }

            // Kiểm tra xem tất cả ngày thứ này (chưa bị booked) có được chọn không
            return weekdayDatesInMonth.every(dateKey => {
                const dayOfMonth = parseInt(dateKey.split('-')[2]);
                // Nếu ngày đã bị đặt, không cần xét nó cho việc chọn cả thứ
                if (bookedDaysInMonth.has(dayOfMonth)) {
                    return true;
                }
                // Nếu không, nó phải nằm trong selectedDates
                return selectedDates.has(dateKey);
            });
        }

        // Hàm cập nhật trạng thái selectedWeekdays dựa trên selectedDates
        function updateSelectedWeekdays() {
            selectedWeekdays.clear();

            for (let weekdayIndex = 0; weekdayIndex < 7; weekdayIndex++) {
                if (areAllWeekdayDatesSelected(weekdayIndex)) {
                    selectedWeekdays.add(weekdayIndex);
                }
            }
        }

        // Hàm cập nhật UI summary và buttons
        function updateSelectionUI() {
            const $summary = $('#selection-summary');
            const $clearBtn = $('#clear-selection-btn');
            const $confirmBtn = $('#confirm-selection-btn');

            const selectedCount = selectedDates.size;
            const selectedWeekdaysCount = selectedWeekdays.size;

            if (selectedCount === 0 && selectedWeekdaysCount === 0) {
                $summary.removeClass('has-selection').addClass('empty');
                $summary.text('Chưa chọn ngày nào');
                $clearBtn.prop('disabled', true);
                $confirmBtn.prop('disabled', true);
            } else {
                $summary.removeClass('empty').addClass('has-selection');

                let summaryText = '';
                if (selectedCount > 0) {
                    summaryText += `<span class="selection-count">${selectedCount}</span> ngày được chọn`;
                }

                if (selectedWeekdaysCount > 0) {
                    if (summaryText) summaryText += ', ';
                    const weekdayNames = Array.from(selectedWeekdays).map(idx => dayNames[idx]).join(', ');
                    summaryText += `Thứ: <span class="selection-count">${weekdayNames}</span>`;
                }

                $summary.html(summaryText);
                $clearBtn.prop('disabled', false);
                $confirmBtn.prop('disabled', false);
            }
        }

        // Hàm xử lý khi xác nhận selection
        async function handleConfirmSelection() {
            await fetchBookingFilterByDateAndTimeSlot();
        }

        // Cập nhật các hàm hiện tại để gọi updateSelectionUI()
        const originalLogSelectedDates = logSelectedDates;
        logSelectedDates = function() {
            originalLogSelectedDates();
            updateSelectionUI();
            updateFooterSummary(); // Cập nhật footer
        };

        const originalClearAllSelections = clearAllSelections;
        clearAllSelections = function() {
            originalClearAllSelections();
            updateSelectionUI();
            updateFooterSummary(); // Cập nhật footer
        };

        // Hàm helper để hiển thị thông báo khi user cố truy cập tháng không hợp lệ
        function showMonthDisabledMessage() {
            const today = new Date();
            const currentDay = today.getDate();

            let message = '';
            if (currentDay > 25) {
                message = `Đã qua ngày 25 tháng ${today.getMonth() + 1}, bạn chỉ có thể đặt sân từ tháng ${minAllowedMonth + 1}/${minAllowedYear} trở đi.`;
            } else {
                message = `Bạn chỉ có thể đặt sân từ tháng ${minAllowedMonth + 1}/${minAllowedYear} trở đi.`;
            }

            console.log(message);
            // Bạn có thể thay thế bằng modal hoặc toast notification
            alert(message);
        }

        // Render time button
        function renderTimeButtons() {
            $timeButtonsContainer.empty();
            allHours.forEach(hour => {
                const $button = $(`<button class="time-button text-center py-2 px-4 rounded-lg text-sm font-medium transition-colors duration-200"></button>`);
                $button.text(`${hour}:00`);

                $button.on('click', function() {
                    handleTimeSelect(hour);
                    renderTimeButtons(); // Re-render to update UI
                });

                // Check selection status
                const isSelected = (startTime !== null && endTime !== null && hour >= startTime && hour <= endTime) ||
                                 (startTime !== null && endTime === null && hour === startTime);

                if (isSelected) {
                    $button.addClass('selected bg-blue-500 text-white');
                } else {
                    $button.addClass('bg-gray-100 text-gray-800 hover:bg-gray-200');
                }

                $timeButtonsContainer.append($button);
            });
        }

        // Xử lý khi chọn thời gian
        function handleTimeSelect(hour) {
            if (startTime === null || (startTime !== null && endTime !== null)) {
                startTime = hour;
                endTime = null;
            } else if (hour > startTime) {
                endTime = hour;
                // Khi đã chọn đủ start và end, gọi hàm fetch
                fetchBookedSlotsForSelection();
            } else {
                startTime = hour;
                endTime = null;
            }
            updateFooterSummary(); // Cập nhật footer
        }

        $timeButtonsContainer.on('click', '.time-button', function() {
            renderTimeButtons();
        });

        // Render court
        function renderCourts(courts) {
            $courtsContainer.empty();

            // *** START CHANGE ***
            // Xóa điều kiện !courts || courts.length === 0 vì chúng ta luôn muốn render các sân
            // nếu chúng tồn tại, bất kể đã chọn giờ hay chưa.
            // *** END CHANGE ***

            const timeSelected = startTime !== null && endTime !== null;

            // Group courts by SportType
            const groupedCourts = courts.reduce((acc, court) => {
                if (!acc[court.SportType]) {
                    acc[court.SportType] = [];
                }
                acc[court.SportType].push(court);
                return acc;
            }, {});

            // Render each sport type group
            Object.entries(groupedCourts).forEach(([sportType, courtsOfType]) => {
                // Sport type header
                const $headerDiv = $('<div class="mb-4 mt-6 first:mt-0">').html(`<h4 class="text-lg font-bold text-gray-800 mb-3">${sportType}</h4>`);
                $courtsContainer.append($headerDiv);

                // Courts grid for this sport type
                const $gridDiv = $('<div class="courts-grid mb-6">');

                courtsOfType.forEach(court => {
                    // **NEW** - Get all status flags
                    const isSelected = selectedCourts.some(selected => selected.Id === court.Id);
                    const isRelatedToSelected = selectedCourtRelationIds.has(court.Id);
                    const isBooked = bookedCourtIds.has(court.Id);
                    const isRelatedToBooked = bookedCourtRelationIds.has(court.Id);
                    const isBlocked = blockedCourtIds.has(court.Id);

                    // *** START CHANGE ***
                    // Logic được điều chỉnh để cho phép chọn sân ngay cả khi chưa chọn giờ.
                    let borderColor = 'border-gray-300';
                    let statusText = 'Chọn sân'; // Trạng thái mặc định mới
                    let statusTextColor = 'text-gray-500';
                    let canClick = false; // Mặc định không thể click
                    let cursorClass = 'cursor-not-allowed opacity-70';
                    let courtIdAttr = '';
                    let clickableClass = '';

                    if (isBlocked) {
                        borderColor = 'border-gray-500';
                        statusText = 'Không hoạt động';
                        statusTextColor = 'text-gray-500';
                        cursorClass = 'cursor-not-allowed opacity-50';
                        canClick = false; // Sân bị khóa không thể click
                    } else {
                        // Nếu sân không bị khóa, nó luôn có thể được chọn.
                        canClick = true;
                        cursorClass = 'cursor-pointer';
                        clickableClass = 'clickable-court';
                        courtIdAttr = `data-court-id="${court.Id}"`;

                        // Ưu tiên hiển thị trạng thái dựa trên lựa chọn của người dùng và dữ liệu đã đặt.
                        if (isSelected) {
                            borderColor = 'border-blue-500';
                            statusText = 'Đã chọn';
                            statusTextColor = 'text-blue-500';
                        } else if (isRelatedToSelected) {
                            borderColor = 'border-yellow-500';
                            statusText = 'Liên quan';
                            statusTextColor = 'text-yellow-500';
                            canClick = false; // Không thể click sân liên quan
                        } else if (timeSelected && isBooked) { // Chỉ kiểm tra isBooked nếu đã chọn giờ
                            borderColor = 'border-red-500';
                            statusText = 'Đã đặt';
                            statusTextColor = 'text-red-500';
                            canClick = false; // Không thể click sân đã đặt
                        } else if (timeSelected && isRelatedToBooked) { // Chỉ kiểm tra isRelatedToBooked nếu đã chọn giờ
                            borderColor = 'border-yellow-500';
                            statusText = 'Liên quan';
                            statusTextColor = 'text-yellow-500';
                            canClick = false; // Không thể click sân liên quan
                        } else {
                            // Trạng thái mặc định cho một sân có thể chọn
                            borderColor = 'border-green-500';
                            statusText = 'Có thể đặt';
                            statusTextColor = 'text-green-500';
                        }
                    }

                    // Nếu vì lý do nào đó canClick bị set thành false, hãy đảm bảo các thuộc tính click bị xóa.
                    if (!canClick) {
                        cursorClass = 'cursor-not-allowed opacity-70';
                        clickableClass = '';
                        courtIdAttr = '';
                    }
                    // *** END CHANGE ***

                    const $courtDiv = $(`
                        <div class="court-card bg-white rounded-lg border-2 p-4 text-center ${borderColor} ${cursorClass} ${clickableClass}" ${courtIdAttr}>
                            <h5 class="font-bold text-gray-800 mb-1 text-base">${court.Name}</h5>
                            <p class="text-sm text-gray-500 mb-3">${court.PricePerHour.toLocaleString()}đ/giờ</p>
                            <div class="status-button text-sm font-semibold ${statusTextColor}">
                                ${statusText}
                            </div>
                        </div>
                    `);

                    $gridDiv.append($courtDiv);
                });

                $courtsContainer.append($gridDiv);
            });
        }

        // **UPDATED** - Handler for court selection using event delegation
        function initializeCourtSelectionHandler() {
            $courtsContainer.on('click', '.clickable-court', async function() {
                const courtId = $(this).data('court-id');
                const court = stadiumData.Courts.find(c => c.Id === courtId);

                if (!court) return;

                const courtIndex = selectedCourts.findIndex(selected => selected.Id === courtId);

                if (courtIndex !== -1) {
                    selectedCourts.splice(courtIndex, 1);
                } else {
                    selectedCourts.push(court);
                }

                const selectedCourtIds = new Set(selectedCourts.map(c => c.Id));
                await fetchCourtRelations(selectedCourtIds, selectedCourtRelationIds);

                // Gọi hàm fetch ngay khi có sự thay đổi về sân được chọn
                fetchBookedSlotsForSelection();

                // Re-render chỉ để cập nhật trạng thái các sân bên phải, không phải lịch
                renderCourts(stadiumData.Courts);
                updateFooterSummary(); // Cập nhật footer
            });
        }

        // parse hour from ISO 8601 duration string
        function parseHour(isoDuration) {
            // VD: "PT6H" => 6
            const match = isoDuration.match(/PT(\d+)H/);
            return match ? parseInt(match[1], 10) : 0;
        }

        // **UPDATED** - Generic function to fetch relations
        async function fetchCourtRelations(sourceCourtIds, destinationRelationSet) {
            console.log(`Fetching relations for ${sourceCourtIds.size} source courts.`);
            destinationRelationSet.clear();

            if (sourceCourtIds.size === 0) {
                return;
            }

            for (const courtId of sourceCourtIds) {
                try {
                    // Fetch parents
                    const parentData = await $.ajax({
                        url: "/Booking/GetAllCourtRelationBychildId",
                        type: "GET",
                        data: { childId: courtId }
                    });

                    for (const item of parentData ?? []) {
                        if (item?.parentCourt?.id) {
                            destinationRelationSet.add(item.parentCourt.id);
                        }
                    }

                    // Fetch children
                    const childData = await $.ajax({
                        url: "/Booking/GetAllCourtRelationByParentId",
                        type: "GET",
                        data: { parentId: courtId }
                    });

                    for (const item of childData ?? []) {
                        if (item?.childCourtId) {
                            destinationRelationSet.add(item.childCourtId);
                        }
                    }
                } catch (error) {
                    console.error(`Lỗi khi tải quan hệ cho sân ${courtId}:`, error);
                }
            }

            // Ensure source courts themselves are not marked as 'related'
            sourceCourtIds.forEach(id => destinationRelationSet.delete(id));

            console.log("Updated Relation Set:", Array.from(destinationRelationSet));
        }

        // call booked court by date and time
        function fetchBookingFilterByDateAndTimeSlot() {
            // Lấy year và month từ #monthYearDisplay
            let displayText = $("#monthYearDisplay").text().trim();
            // Giả sử dạng: "tháng 10 năm 2025"
            let parts = displayText.match(/tháng\s+(\d+)\s+năm\s+(\d+)/i);
            if (!parts) {
                console.error("Không lấy được tháng/năm");
                return;
            }
            let month = parts[1];
            let year = parts[2];

            // Lấy danh sách ngày đã chọn
            let days = [];
            $(".day-cell.selected, .day-cell.weekday-selected").each(function () {
                let d = $(this).data("date");
                if (d) {
                    days.push(d);
                }
            });
            // Loại bỏ các ngày trùng lặp
            days = [...new Set(days)];

            // Lấy giờ bắt đầu/kết thúc
            if (startTime === null || endTime === null) {
                console.warn("Cần chọn đủ startTime và endTime");
                alert("Vui lòng chọn một khoảng thời gian hợp lệ (giờ bắt đầu và giờ kết thúc).");
                return;
            }

            // Tạo payload gửi lên Controller
            let requestData = {
                year: year,
                month: month,
                days: days,
                startTime: startTime,
                endTime: endTime,
                stadiumId: stadiumId
            };

            console.log("Gọi API với dữ liệu:", requestData);

            if (!year || !month || days.length === 0 || !startTime || !endTime) {
                console.warn("Thiếu tham số, không gọi API");
                return;
            }

            // Gọi đến Controller của bạn (controller sẽ gọi service -> Ocelot)
            $.ajax({
                url: "/Booking/FilterByDateAndHour",
                type: "GET",
                traditional: true,
                data: requestData,
                success: async function (response) {
                    console.log("Raw response:", response);

                    bookedCourtIds.clear();

                    if (response && response.length > 0) {
                        response.forEach(booking => {
                            if (booking.bookingDetails && booking.bookingDetails.length > 0) {
                                booking.bookingDetails.forEach(detail => {
                                    bookedCourtIds.add(detail.courtId);
                                });
                            }
                        });
                    }
                    console.log("Booked Court IDs:", Array.from(bookedCourtIds));

                    // **NEW** - Step 2: Fetch relations for BOOKED courts
                    await fetchCourtRelations(bookedCourtIds, bookedCourtRelationIds);

                    // Step 3: Re-render courts to apply all changes
                    renderCourts(stadiumData.Courts);

                    // Scroll to court selection and highlight it
                    const $selectionSection = $('.selection-section');
                    $selectionSection[0].scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                    $selectionSection.addClass('highlight-section');
                    setTimeout(() => {
                        $selectionSection.removeClass('highlight-section');
                    }, 2000);
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", {
                        status: status,
                        error: error,
                        responseText: xhr.responseText
                    });
                }
            });
        }

        function fetchBookedSlotsForSelection() {
            // Chỉ thực hiện khi đã chọn đủ sân và khung giờ
            if (selectedCourts.length === 0 || startTime === null || endTime === null) {
                console.log("Chưa đủ thông tin sân và giờ để fetch.");
                // Nếu chưa đủ thông tin, xóa các ngày đã đặt cũ và vẽ lại lịch
                bookedDaysInMonth.clear();
                generateCalendar(currentMonth, currentYear);
                return;
            }

            const displayText = $("#monthYearDisplay").text().trim();
            const parts = displayText.match(/tháng\s+(\d+)\s+năm\s+(\d+)/i);
            if (!parts) {
                console.error("Không lấy được tháng/năm");
                return;
            }
            const month = parts[1];
            const year = parts[2];

            const directlySelectedIds = selectedCourts.map(c => c.Id);
            const relatedIds = Array.from(selectedCourtRelationIds);
            const allCourtIds = [...new Set([...directlySelectedIds, ...relatedIds])];

            console.log("Fetching booked days for courts:", allCourtIds);

            const requestData = {
                courtIds: allCourtIds, // Updated to use allCourtIds
                year: year,
                month: month,
                startTime: startTime,
                endTime: endTime
            };

            console.log("Gọi API để lấy các ngày đã đặt:", requestData);

            $.ajax({
                url: "/Booking/FilterByCourtAndHour",
                type: "GET",
                traditional: true,
                data: requestData,
                success: function (response) {
                    console.log("Response (các ngày đã đặt):", response);

                    bookedDaysInMonth.clear(); // Xóa dữ liệu cũ

                    if (response && response.length > 0) {
                        response.forEach(booking => {
                            // Lấy ngày từ trường 'date' của mỗi booking
                            const bookingDate = new Date(booking.date);
                            const dayOfMonth = bookingDate.getDate();
                            bookedDaysInMonth.add(dayOfMonth);
                        });
                    }
                    console.log("Các ngày đã được đặt trong tháng:", Array.from(bookedDaysInMonth));

                    // *** START CHANGE ***
                    // Ngay sau khi có dữ liệu booked, lọc lại các ngày đã chọn
                    filterSelectedDates();

                    // Cập nhật lại trạng thái các thứ được chọn
                    updateSelectedWeekdays();

                    // Vẽ lại lịch để hiển thị các ngày đã đặt và cập nhật lựa chọn
                    generateCalendar(currentMonth, currentYear);

                    // Cập nhật lại phần tóm tắt lựa chọn trên lịch
                    updateSelectionUI();
                    // *** END CHANGE ***
                },
                error: function (xhr, status, error) {
                    console.error("Lỗi khi lấy danh sách ngày đã đặt:", {
                        status: status,
                        error: error,
                        responseText: xhr.responseText
                    });
                }
            });
        }

        // *** START CHANGE ***
        // Hàm mới để lọc `selectedDates`, loại bỏ những ngày đã bị đặt
        function filterSelectedDates() {
            if (bookedDaysInMonth.size === 0) {
                return; // Không có gì để lọc
            }
            const datesToUnselect = new Set();
            for (const dateKey of selectedDates) {
                const dayOfMonth = parseInt(dateKey.split('-')[2]);
                if (bookedDaysInMonth.has(dayOfMonth)) {
                    datesToUnselect.add(dateKey);
                }
            }

            if (datesToUnselect.size > 0) {
                console.log('Tự động bỏ chọn các ngày đã bị đặt:', Array.from(datesToUnselect));
                datesToUnselect.forEach(dateKey => selectedDates.delete(dateKey));
            }
        }
        // *** END CHANGE ***

        // *** Hàm này giờ chỉ đóng vai trò là một alias, vì `selectedDates` đã được lọc trước ***
        function getActualBookableDays() {
            // Bây giờ selectedDates đã là danh sách ngày hợp lệ
            return selectedDates;
        }

        // *** UPDATED FUNCTION ***
        // Hàm cập nhật footer với tổng giờ, tổng tiền và trạng thái nút
        function updateFooterSummary() {
            const $timeDisplay = $('#time-display');
            const $continueButton = $('#continue-button');

            const actualBookableDates = getActualBookableDays();
            const hasAllInfo = selectedCourts.length > 0 &&
                               startTime !== null &&
                               endTime !== null &&
                               actualBookableDates.size > 0;

            if (hasAllInfo) {
                const duration = endTime - startTime;
                const numberOfDays = actualBookableDates.size;
                const totalPricePerHour = selectedCourts.reduce((sum, court) => sum + court.PricePerHour, 0);
                const totalCost = duration * numberOfDays * totalPricePerHour;

                const summaryText = `
                    <span class="font-semibold">${selectedCourts.length} sân</span> |
                    <span class="font-semibold">${numberOfDays} ngày</span> |
                    <span class="font-semibold">${duration} giờ/ngày</span> |
                    Tổng cộng: <span class="font-bold text-blue-600">${totalCost.toLocaleString()} VNĐ</span>
                `;
                $timeDisplay.html(summaryText);

                // Enable button
                $continueButton.prop('disabled', false)
                               .removeClass('bg-gray-400 cursor-not-allowed')
                               .addClass('bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700');
            } else {
                // Reset if not all info is available
                $timeDisplay.html('Vui lòng chọn ngày, khung giờ và sân để xem tổng hợp');

                // Disable button
                $continueButton.prop('disabled', true)
                               .removeClass('bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700')
                               .addClass('bg-gray-400 cursor-not-allowed');
            }
        }

        // *** UPDATED FUNCTION ***
        // Hàm thu thập dữ liệu và submit form
        function submitMonthlyBooking() {
            // 1. Thu thập dữ liệu
            const actualBookableDates = getActualBookableDays();

            // Validate lại lần cuối
            if (actualBookableDates.size === 0) {
                alert("Không có ngày hợp lệ nào để đặt. Vui lòng kiểm tra lại các ngày bạn đã chọn.");
                return;
            }

            const year = currentYear;
            const month = currentMonth + 1; // JS month is 0-based, C# is 1-based

            // Lấy danh sách các ngày (chỉ số ngày) từ set `actualBookableDates`
            const selectedDaysList = Array.from(actualBookableDates).map(dateKey => {
                return parseInt(dateKey.split('-')[2]);
            }).sort((a, b) => a - b);

            const selectedCourtIds = selectedCourts.map(c => c.Id);

            const duration = endTime - startTime;
            const numberOfDays = actualBookableDates.size;
            const totalPricePerHour = selectedCourts.reduce((sum, court) => sum + court.PricePerHour, 0);
            const totalCost = duration * numberOfDays * totalPricePerHour;

            // 2. Điền dữ liệu vào form ẩn
            const $form = $('#monthlyBookingForm');
            $form.find('input[name="Year"]').val(year);
            $form.find('input[name="Month"]').val(month);
            $form.find('input[name="SelectedDays"]').val(selectedDaysList.join(','));
            $form.find('input[name="StartTime"]').val(startTime);
            $form.find('input[name="EndTime"]').val(endTime);
            $form.find('input[name="SelectedCourtIds"]').val(selectedCourtIds.join(','));
            $form.find('input[name="TotalPrice"]').val(totalCost);
            $form.find('input[name="StadiumId"]').val(stadiumId);

            // 3. Submit form
            $form.submit();
        }
    </script>
</body>

</html>