@{
    ViewData["Title"] = "Thông Báo";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <link href="~/css/Notification/notification.css" rel="stylesheet" />
    <style>
        /* Thêm style cho thông báo không thể click */
        .notify-item-no-link {
            cursor: default;
            display: block;
            text-decoration: none;
            border-bottom: 1px solid rgba(241, 245, 249, 0.8);
            transition: all 0.2s ease;
        }

            .notify-item-no-link:last-child {
                border-bottom: none;
            }

            .notify-item-no-link:hover {
                background-color: #f8fafc;
            }

            .notify-item-no-link.unread {
                background-color: #eff6ff;
            }

                .notify-item-no-link.unread:hover {
                    background-color: #dbeafe;
                }
    </style>
}

<div class="notify-container">
    <div class="notify-header">
        <h2 class="notify-title">
            <i class="ri-notification-3-line"></i>
            Thông Báo
        </h2>
    </div>

    <div class="notify-list" id="notification-list">
        <div id="loading" class="notify-loading">
            <i class="ri-loader-4-line"></i>
            <div>Đang tải thông báo...</div>
        </div>
    </div>

    <div class="notify-load-more">
        <button id="loadMoreBtn" class="notify-btn" style="display:none">
            Xem thêm
        </button>
    </div>
</div>

@section Scripts {
    <script>
        const pageSize = 6;
        let skip = 0;
        let isLoading = false;
        let isEnd = false;
        let hasMarkedAllAsRead = false;

        function getIconAndColor(type) {
            switch (type) {
                case "MonthlyBooking.New": return ["ri-calendar-event-line", "bg-teal-100 text-teal-600"];
                case "MonthlyBooking.Cancel": return ["ri-calendar-close-line", "bg-orange-100 text-orange-600"];
                case "Booking.New": return ["ri-calendar-check-line", "bg-blue-100 text-blue-600"];
                case "Booking.Cancel": return ["ri-close-circle-line", "bg-red-100 text-red-600"];
                case "Booking.Reminder": return ["ri-alarm-warning-line", "bg-yellow-100 text-yellow-600"];
                case "Booking.Problem": return ["ri-error-warning-line", "bg-red-100 text-red-600"];
                case "Discount.New": return ["ri-price-tag-3-line", "bg-purple-100 text-purple-600"];
                case "Stadium.FavoriteNews": return ["ri-star-smile-line", "bg-orange-100 text-orange-600"];
                default: return ["ri-notification-3-line", "bg-gray-100 text-gray-600"];
            }
        }

        function timeAgo(dateString) {
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) {
                    console.warn("Invalid date:", dateString);
                    return "Không có thời gian";
                }

                const now = new Date();
                const diff = Math.floor((now - date) / 1000);
                if (diff < 60) return `${diff} giây trước`;
                if (diff < 3600) return `${Math.floor(diff / 60)} phút trước`;
                if (diff < 86400) return `${Math.floor(diff / 3600)} giờ trước`;
                return date.toLocaleDateString() + ' ' + date.toLocaleTimeString().slice(0, 5);
            } catch (err) {
                console.error("Error processing date:", err);
                return "Không có thời gian";
            }
        }

        function generateUrlFromParams(notification) {
            try {
                const params = JSON.parse(notification.parameters);
                if (params.bookingType === 'monthly' && params.monthlyBookingId) {
                    return `/Booking/BookingHistory`;
                }
                if (params.bookingType === 'daily' && params.bookingId) {
                    return `/Booking/BookingHistory`;
                }
            } catch (e) {
                // Bỏ qua lỗi nếu không có tham số
            }
            return `/Notification/Details/${notification.id}`;
        }

        function renderNotifications(notifications, append = true) {
            const container = document.getElementById('notification-list');
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const loadingElement = document.getElementById('loading');
            if (!append) {
                container.innerHTML = "";
                if (loadingElement) container.appendChild(loadingElement);
            }

            if ((!notifications || notifications.length === 0) && skip === 0) {
                if (loadingElement) loadingElement.style.display = 'none';
                container.innerHTML = `<div class="notify-empty">
                                            <i class="ri-inbox-2-line"></i>
                                            <div>Bạn chưa có thông báo nào</div>
                                        </div>`;
                if (loadMoreBtn) loadMoreBtn.style.display = 'none';
                return;
            }

            if (loadingElement) loadingElement.style.display = 'none';

            for (const n of notifications) {
                // Log thông tin để debug
                console.log("Notification:", n);

                const [icon, color] = getIconAndColor(n.type);
                const readClass = n.isRead ? "" : "unread";

                // Kiểm tra các trường có thể chứa createdAt
                const createdAtValue = n.createdAt || n.CreatedAt || n.created_at || n.CreatedDate || n.createDate || new Date().toISOString();

                // Nếu là Discount.New, tạo một div không thể click thay vì thẻ a
                if (n.type === "Discount.New") {
                    container.insertAdjacentHTML('beforeend', `
                        <div class="notify-item-no-link ${readClass}">
                            <div class="notify-content">
                                <div class="notify-icon ${color}">
                                    <i class="${icon}"></i>
                                </div>
                                <div class="notify-text">
                                    <div class="notify-text-header">
                                        <div class="notify-text-title">${n.title ?? "Thông báo khuyến mãi"}</div>
                                        ${!n.isRead ? `<span class="notify-unread-indicator"></span>` : ""}
                                    </div>
                                    <div class="notify-text-message">${n.message ?? ""}</div>
                                    <div class="notify-text-time">${timeAgo(createdAtValue)}</div>
                                </div>
                            </div>
                        </div>
                    `);
                } else {
                    // Các thông báo khác vẫn có thể click như bình thường
                    const url = generateUrlFromParams(n);
                    container.insertAdjacentHTML('beforeend', `
                        <a href="${url}" class="notify-item ${readClass}">
                            <div class="notify-content">
                                <div class="notify-icon ${color}">
                                    <i class="${icon}"></i>
                                </div>
                                <div class="notify-text">
                                    <div class="notify-text-header">
                                        <div class="notify-text-title">${n.title ?? "Thông báo"}</div>
                                        ${!n.isRead ? `<span class="notify-unread-indicator"></span>` : ""}
                                    </div>
                                    <div class="notify-text-message">${n.message ?? ""}</div>
                                    <div class="notify-text-time">${timeAgo(createdAtValue)}</div>
                                </div>
                            </div>
                        </a>
                    `);
                }
            }
        }

        async function fetchNotifications() {
            if (isLoading || isEnd) return;
            isLoading = true;
            const loadingElement = document.getElementById('loading');
            if (loadingElement) loadingElement.style.display = 'block';
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            if (loadMoreBtn) loadMoreBtn.style.display = 'none';

            try {
                const resp = await fetch(`/Notification/GetMyNotifications?top=${pageSize}&skip=${skip}`);
                if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                const items = await resp.json();

                // Log dữ liệu để debug
                console.log("API Response:", items);

                if (!Array.isArray(items)) throw new Error("Dữ liệu trả về không phải là một mảng.");

                renderNotifications(items, skip !== 0);

                if (loadingElement) loadingElement.style.display = 'none';

                if (items.length === pageSize) {
                    if (loadMoreBtn) loadMoreBtn.style.display = 'inline-block';
                } else {
                    isEnd = true;
                    if (loadMoreBtn) loadMoreBtn.style.display = 'none';
                }
                if (skip === 0 && !hasMarkedAllAsRead) {
                    hasMarkedAllAsRead = true;
                    markAllNotificationsAsRead();
                }
                skip += items.length;
            } catch (err) {
                console.error("Error fetching notifications:", err);
                const container = document.getElementById('notification-list');
                if (container)
                    container.innerHTML = `<div class="notify-error">Lỗi khi tải thông báo!<br/>${err.message}</div>`;
                if (loadingElement) loadingElement.style.display = 'none';
            }
            isLoading = false;
        }

        async function markAllNotificationsAsRead() {
            try {
                await fetch('/Notification/MarkAllAsRead', { method: 'POST' });
            } catch (err) {
                console.warn('Không thể đánh dấu đã đọc tất cả:', err);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            fetchNotifications();
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            if (loadMoreBtn) loadMoreBtn.addEventListener('click', fetchNotifications);
        });
    </script>
}