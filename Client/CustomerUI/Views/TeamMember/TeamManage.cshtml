<!DOCTYPE html>

@{
    var postId = ViewBag.PostId;
    var oldUrl = ViewBag.OldUrl ?? "/FindTeam/FindTeam"; // Default URL if OldUrl is not provided
}
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản Lý Thành Viên Đội - Nền Tảng FindTeam</title>
    <link href="~/css/FindTeam/MemberManage.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Pacifico&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <script>
        tailwind.config = {
          theme: {
            extend: {
              colors: {
                primary: "#3b82f6",
                secondary: "#10b981",
                accent: "#f59e0b",
                danger: "#ef4444",
                dark: "#1f2937",
              },
              fontFamily: {
                sans: ['Inter', 'sans-serif'],
              },
              borderRadius: {
                '2xl': '16px',
                '3xl': '24px',
              },
              boxShadow: {
                'soft': '0 4px 6px -1px rgba(0, 0, 0, 0.07), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
                'medium': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
                'large': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
              },
            },
          },
        };
    </script>
</head>
<body class="min-h-screen">
    <!-- Floating Background Elements -->
    <div class="floating-elements">
        <div class="floating-circle circle-1"></div>
        <div class="floating-circle circle-2"></div>
        <div class="floating-circle circle-3"></div>
        <div class="floating-circle circle-4"></div>
        <div class="floating-circle circle-5"></div>
    </div>

    <div class="back max-w-7xl mx-auto px-1 sm:px-6 lg:px-8 py-8">
        <div class="shadow-soft p-8">
            <a class="back-btn" href="@oldUrl"><i class="ri-arrow-left-line"></i> Quay lại</a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header Section -->
        <div class="mb-8">
            <div class="glass-card rounded-3xl shadow-soft p-8">
                <div id="post-detail" class="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-6">
                    
                </div>
            </div>
        </div>

        

        <!-- Members Grid -->
        <div id="members-container" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
            <!-- Member cards will be populated here -->
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="hidden text-center py-16">
            <div class="glass-card rounded-3xl shadow-soft p-12 max-w-md mx-auto">
                <div class="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
                    <i class="ri-team-line text-3xl text-gray-400"></i>
                </div>
                <h3 class="text-xl font-semibold text-gray-700 mb-3">Không Tìm Thấy Thành Viên</h3>
                <p class="text-gray-500 mb-6">Bắt đầu xây dựng đội của bạn bằng cách thêm thành viên</p>
                <button class="btn-primary text-white px-6 py-3 rounded-2xl text-sm font-semibold inline-flex items-center gap-2">
                    <i class="ri-user-add-line"></i>
                    Thêm Thành Viên Đầu Tiên
                </button>
            </div>
        </div>
    </div>

    <!-- Add/Edit Member Modal -->
    <div id="member-modal" class="modal fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4 hidden">
        <div class="modal-content glass-card rounded-3xl shadow-2xl max-w-md w-full p-8">
            <div class="flex items-center justify-between mb-6">
                <h2 id="modal-title" class="text-2xl font-bold text-gray-900">Thêm Thành Viên Mới</h2>
                <button id="close-modal" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <i class="ri-close-line text-2xl"></i>
                </button>
            </div>

            <form id="member-form" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">ID Người Dùng</label>
                    <input type="number"
                           id="user-id"
                           name="userId"
                           class="w-full px-4 py-3 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors"
                           placeholder="Nhập ID người dùng"
                           required>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">ID Bài Đăng Đội</label>
                    <input type="number"
                           id="team-post-id"
                           name="teamPostId"
                           class="w-full px-4 py-3 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors"
                           placeholder="Nhập ID bài đăng đội"
                           required>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Vai Trò</label>
                    <select id="member-role"
                            name="role"
                            class="w-full px-4 py-3 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors"
                            required>
                        <option value="">Chọn vai trò</option>
                        <option value="captain">Đội Trưởng</option>
                        <option value="member">Thành Viên</option>
                        <option value="substitute">Dự Bị</option>
                    </select>
                </div>

                <div class="flex gap-3 pt-4">
                    <button type="button"
                            id="cancel-btn"
                            class="flex-1 bg-gray-100 text-gray-700 px-6 py-3 rounded-2xl font-semibold hover:bg-gray-200 transition-colors">
                        Hủy
                    </button>
                    <button type="submit"
                            class="flex-1 btn-primary text-white px-6 py-3 rounded-2xl font-semibold">
                        <span id="submit-text">Thêm Thành Viên</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div id="delete-modal" class="modal fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4 hidden">
        <div class="modal-content glass-card rounded-3xl shadow-2xl max-w-md w-full p-8">
            <div class="text-center">
                <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="ri-delete-bin-line text-2xl text-red-600"></i>
                </div>
                <h3 class="text-xl font-bold text-gray-900 mb-2">Xóa Thành Viên Đội</h3>
                <p class="text-gray-600 mb-6">Bạn có chắc chắn muốn xóa thành viên này khỏi đội? Hành động này không thể hoàn tác.</p>
                <div class="flex gap-3">
                    <button id="cancel-delete" class="flex-1 bg-gray-100 text-gray-700 px-6 py-3 rounded-2xl font-semibold hover:bg-gray-200 transition-colors">
                        Hủy
                    </button>
                    <button id="confirm-delete" class="flex-1 btn-danger text-white px-6 py-3 rounded-2xl font-semibold">
                        Xóa Thành Viên
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        // Sample data based on ReadTeamMemberDTO - Vietnamese names
       
        let editingMemberId = null;
        let memberToDelete = null;

        // DOM Elements
        const membersContainer = document.getElementById('members-container');
        const emptyState = document.getElementById('empty-state');
        const memberModal = document.getElementById('member-modal');
        const deleteModal = document.getElementById('delete-modal');
        const searchInput = document.getElementById('search-input');
        const roleFilter = document.getElementById('role-filter');
        const sortFilter = document.getElementById('sort-filter');

        // Utility Functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        function getRoleIcon(role) {
            switch(role) {
                case 'Leader': return 'ri-crown-line';
                case 'Member': return 'ri-user-line';
                case 'Waiting': return 'ri-user-received-line';
                default: return 'ri-user-line';
            }
        }

        function getRoleClass(role) {
            switch(role) {
                case 'Leader': return 'role-captain';
                case 'Member': return 'role-member';
                case 'Waiting': return 'role-substitute';
                default: return 'role-member';
            }
        }

        function getRoleText(role) {
            switch(role) {
                case 'Leader': return 'Đội Trưởng';
                case 'Member': return 'Thành Viên';
                case 'Waiting': return 'Chờ duyệt';
                default: return 'Thành Viên';
            }
        }

        // Render Functions
        function renderMemberCard(members, profile, leader) {
            console.log(profile);
            console.log(members);
      
            if (members.length === 0) {
                membersContainer.classList.add('hidden');
                emptyState.classList.remove('hidden');
                return;
            }

            membersContainer.classList.remove('hidden');
            emptyState.classList.add('hidden');

            

            membersContainer.innerHTML = members.map(member => `
                <div class="member-card glass-card rounded-3xl shadow-soft p-6" data-member-id="${member.id}">
                    <div class="flex items-start justify-between mb-4">
                        <div class="flex items-center gap-3">
                            <div >
                               <img class="w-12 h-12 bg-gradient-to-br from-primary to-blue-600 rounded-full flex items-center justify-center text-white font-bold"
                               src="https://localhost:7136/${profile[member.userId].avatarUrl}" alt="${profile[member.userId].fullName}">
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-900">${profile[member.userId].fullName}</h3>
                                <p class="text-sm text-gray-600">ID: ${member.userId}</p>
                            </div>
                        </div>
                        <div class="flex gap-2">
     
                        </div>
                    </div>

                    <div class="space-y-3 mb-4">
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-600">Vai Trò</span>
                            <span class="role-badge ${getRoleClass(member.role)} px-3 py-1 rounded-full text-xs font-medium inline-flex items-center gap-1">
                                <i class="${getRoleIcon(member.role)}"></i>
                                ${getRoleText(member.role)}
                            </span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-600">Bài Đăng</span>
                            <span class="text-sm font-medium text-gray-900">#${member.teamPostId}</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-gray-600">Tham Gia</span>
                            <span class="text-sm font-medium text-gray-900">${formatDate(member.joinedAt)}</span>
                        </div>
                    </div>

                    <div class="flex gap-2">
                    ${renderBtn(member, leader)}
                        
                    </div>
                </div>
            `).join("");
        }


        function renderBtn(member, leader){
            if (member.role === "Waiting" && leader > 0){
                  return `
        <button class="btn-secondary text-white px-4 py-2 rounded-xl text-sm font-semibold flex-1"
                id="btn-confirm"
                data-member-id="${member.id}"
                data-member-role="${member.role}">
            <i class="ri-check-line mr-1"></i>
            Chấp Nhận
        </button>
        <button class="btn-danger text-white px-4 py-2 rounded-xl text-sm font-semibold flex-1"
                id="btn-cancel"
                data-member-id="${member.id}"
                data-member-role="${member.role}">
            <i class="ri-close-line"></i>
            Từ chối
        </button>`;

            }
            else if(leader > 0 && member.role === "Member"){
                return `<button class="btn-secondary text-white px-4 py-2 rounded-xl text-sm font-semibold flex-1 edit-member" data-member-id="${member.id}" data-member-role="${member.role}">
                            <i class="ri-edit-line mr-1"></i>
                            Sửa
                        </button>
                        <button class="btn-danger text-white px-4 py-2 rounded-xl text-sm font-semibold flex-1" id="btn-removed" data-member-id="${member.id}" data-member-role="${member.role}">
                            <i class="ri-delete-bin-line mr-1"></i>
                            Xóa thành viên
                        </button>`;
            } else{
                return`<button class="btn-danger text-white px-4 py-2 rounded-xl text-sm font-semibold flex-1"
                id="btn-leave"
                data-member-id="${member.id}"
                data-member-role="${member.role}">
            <i class="ri-logout-box-line"></i>
            Thoát nhóm
        </button>`;
            }
        }

        // chấp nhận, từ chối hoặc xóa thành viên
        function changeMemberStatus(memberId, newStatus, role) {
            console.log("memberId: ", memberId);
            const postId = @postId; // Lấy postId từ ViewBag hoặc Model
            $.ajax({
                url: `/TeamMember/ChangeStatusMember?memberId=${memberId}&postId=${postId}&status=${newStatus}&role=${role}`,
                type: 'GET',
                success: function(response) {
                    if(response.message === 500){

                        showNotification("Lỗi hệ thống, vui lòng thử lại sau!");
                        return;
                    }
                    $('#post-list').html(response);
                    console.log(response);
                    if(response.message == 200){
                        showNotification(response.value.toString(), 'success');
                        loadMember();
                        displayPostDetail();
                    }

                },
                error: function() {
                    console.error('Error loading posts');
                }
            });
        }




        // Modal Functions
        function openModal(title, submitText, member = null) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('submit-text').textContent = submitText;

            if (member) {
                document.getElementById('user-id').value = member.userId;
                document.getElementById('team-post-id').value = member.teamPostId;
                document.getElementById('member-role').value = member.role;
                editingMemberId = member.id;
            } else {
                document.getElementById('member-form').reset();
                editingMemberId = null;
            }

            memberModal.classList.remove('hidden');
        }

        function closeModal() {
            memberModal.classList.add('hidden');
            document.getElementById('member-form').reset();
            editingMemberId = null;
        }

        function openDeleteModal(memberId) {
            memberToDelete = memberId;
            deleteModal.classList.remove('hidden');
        }

        function closeDeleteModal() {
            deleteModal.classList.add('hidden');
            memberToDelete = null;
        }

        // CRUD Operations
        function addMember(memberData) {


            // Show success message
            showNotification('Thêm thành viên thành công!', 'success');
        }


        // Notification System
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';

            notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-4 rounded-2xl shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
            notification.innerHTML = `
                <div class="flex items-center gap-3">
                    <i class="ri-check-line text-xl"></i>
                    <span class="font-medium">${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        function loadMember(){
            $.ajax({
                url: '/TeamMember/GetTeamMemberDetail?postId=@postId',
                type: 'GET',
                data: { page: 1, pageSize: 10 },
                success: function(response) {
                    if(response.message === 500){
            
                        document.getElementById('members-container').innerHTML = `<div class="member-card glass-card rounded-3xl shadow-soft p-6">Không có thành viên nào</div>`;
                        return;
                    }
                    $('#post-list').html(response);
                    console.log(response);
                    
                    renderMemberCard(response.teamMembers, response.users, response.leaderId);

                    // Update results count
                    // hideLoading();
                    // Hide loading state

                },
                error: function() {
                    console.error('Error loading posts');
                }
            });
        }

        // Event Listeners
        $(document).ready(function() {

            displayPostDetail();
            loadMember();



          

        });

               $(document).on("click", "#btn-confirm", function(e) {
            const memberId = parseInt(this.dataset.memberId);
                        const role = this.dataset.memberRole;

            changeMemberStatus(memberId, "Member", role);
        });


            // nut tu choi
                         $(document).on("click", "#btn-cancel", function(e) {
            const memberId = parseInt(this.dataset.memberId);
                        const role = this.dataset.memberRole;

            changeMemberStatus(memberId, "Cancel", role);
        });

         $(document).on("click", "#btn-leave", function(e) {
            const memberId = parseInt(this.dataset.memberId);
            const role = this.dataset.memberRole;


            changeMemberStatus(memberId, "Leave", role);
        });
        $(document).on("click", "#btn-removed", function(e) {
            const memberId = parseInt(this.dataset.memberId);
                        const role = this.dataset.memberRole;

            changeMemberStatus(memberId, "Delete", role);
        });



                // 1. Truyền postId vào hàm để tạo URL động
        function displayPostDetail() {
            let postId = @postId; // Lấy postId từ ViewBag hoặc Model
            // Kiểm tra xem postId có hợp lệ không
            if (!postId) {
                console.error('Post ID is missing.');
                $('#post-detail').html('<p class="text-red-500">Không thể tải chi tiết bài đăng. ID bài đăng không hợp lệ.</p>');
                return;
            }

            $.ajax({
                // Sử dụng template literal để chèn postId vào URL
                url: `/TeamMember/GetTeamPostDetail?postId=${postId}`,
                type: 'GET',
                success: function(response) {
                    console.log("detail: ", response);
                    // 2. Chuyển `response` cho hàm render và hiển thị kết quả
                    $('#post-detail').html(renderPostDetail(response));
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error('Error loading post detail:', textStatus, errorThrown);
                    // 3. Hiển thị thông báo lỗi thân thiện cho người dùng
                    $('#post-detail').html('<p class="text-red-500">Đã xảy ra lỗi khi tải chi tiết bài đăng. Vui lòng thử lại sau.</p>');
                }
            });
        }

        // 4. Bỏ `async` vì không cần thiết
        function renderPostDetail(response) {
            // Helper để tránh lỗi XSS bằng cách escape các ký tự HTML đặc biệt
            const escapeHtml = (unsafe) => {
                if (unsafe === null || unsafe === undefined) return '';
                return unsafe
                    .toString()
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            };

            // Giả sử các hàm này đã được định nghĩa ở nơi khác trong code của bạn
            const formatDate = (dateStr) => new Date(dateStr).toLocaleDateString('vi-VN');
                     const formatDateTimeWithDay = (dateTime) => {
          const d = new Date(dateTime);

          const day = String(d.getDate()).padStart(2, '0');        // 01–31
          const month = String(d.getMonth() + 1).padStart(2, '0'); // 01–12
          const year = d.getFullYear();

          const hours = String(d.getHours()).padStart(2, '0');     // 00–23
          const minutes = String(d.getMinutes()).padStart(2, '0'); // 00–59

          // Map ngày trong tuần
          const daysOfWeek = [
            "Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư",
            "Thứ Năm", "Thứ Sáu", "Thứ Bảy"
          ];
          const weekday = daysOfWeek[d.getDay()]; // 0=CN, 1=Thứ 2, ...

          return `${day}/${month}/${year} ${hours}:${minutes} - ${weekday}`;
        };

        // Test
        console.log(formatDateTimeWithDay("2025-09-17T14:30:00"));
        // 👉 17/09/2025 14:30 - Thứ Tư



            const formatTimeForDisplay = (timeStr) => timeStr.substring(0, 5); // Ví dụ: "14:30:00" -> "14:30"

            // 5. Sử dụng escapeHtml cho các dữ liệu văn bản để bảo mật
            // Giả sử `response.teamPost.description` được phép chứa HTML an toàn, nếu không cũng cần được làm sạch
            return `<div class="card-header card">
                <div class=" flex items-start gap-4 mb-6">
                    <div class="player-avatar">
                        <img src="https://localhost:7136/${escapeHtml(response.user.avatarUrl)}" alt="${escapeHtml(response.user.fullName)}">
                        
                    </div>
                    <div class="flex-1">
                        <h3 class="font-semibold text-gray-900 text-lg">${escapeHtml(response.user.fullName)}</h3>
                        <span>Tạo ngày: ${formatDateTimeWithDay(response.teamPost.createdAt)}</span>
                        <div class="flex items-center gap-2 mt-1">
                            <!-- Dữ liệu này nên lấy từ response -->
                            <span class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-xs font-medium">${response.interestedCount || 0} Quan Tâm</span>
                        </div>
                    </div>
                </div>

                <!-- Sport Info -->
                <div class="card-detail-info bg-gradient-to-r from-orange-50 to-amber-50 rounded-2xl p-4 mb-6">
                    <div class="flex items-center gap-3 mb-3">
                        <div class="sport-icon">
                            <i class="ri-basketball-line text-lg"></i>
                        </div>
                        <span class="font-semibold text-gray-900">${escapeHtml(response.teamPost.sportType)}</span>
                    </div>

                    <div class="card-content space-y-3 card-info">
                        <div class="flex items-center text-sm text-gray-700">
                            <i class="ri-calendar-2-line mr-3 text-primary"></i>
                            <span class="font-medium">${formatDate(response.teamPost.playDate)}<span> Vào lúc </span>${formatTimeForDisplay(response.teamPost.timePlay)}</span>
                        </div>
                        <div class="flex items-center text-sm text-gray-700">
                            <i class="ri-map-pin-2-line mr-3 text-secondary"></i>
                            <span class="font-medium">${escapeHtml(response.teamPost.location)}</span>
                        </div>
                        <div class="flex items-center text-sm text-gray-700">
                            <i class="ri-group-line mr-3 text-accent"></i>
                            <span class="font-medium">Tìm ${escapeHtml(response.teamPost.joinedPlayers)}/${escapeHtml(response.teamPost.neededPlayers)} người chơi</span>
                        </div>
                    </div>
                </div>

                <!-- Description -->
                <!-- Chú ý: Nếu description chứa HTML, cần một thư viện để làm sạch (như DOMPurify) thay vì chèn trực tiếp -->
                <div id="preview" class="text-gray-600 leading-relaxed truncate-html">${response.teamPost.description}</div>
                <div class="line"></div>
                <div class="join-btn ">
                    ${renderJoinButton(response.newMember, response.teamPost)}
                </div>
            </div>`;
        }
        //join team
         function joindTeam(postId){



                // Gửi yêu cầu AJAX để tham gia bài đăng
                $.ajax({
                    url: '/FindTeam/JoinTeamPost',
                    type: 'POST',
                    data: { postId: postId },
                    success: function(response) {
                        if (response.message === 200) {
                            showNotification('Đăng ký tham gia thành công! và đang chờ chủ bài đăng chấp nhận', 'success');
                            
                            // Cập nhật lại danh sách bài đăng sau khi tham gia
                                                     displayPostDetail();
            loadMember();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi!',
                                text: response.message,
                                confirmButtonColor: '#ef4444'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: 'Đã xảy ra lỗi khi tham gia bài đăng. Vui lòng thử lại.',
                            confirmButtonColor: '#ef4444'
                        });
                    }
                });
        }

        // render nút tham gia
        function renderJoinButton(newMember, post) {

            if (newMember === 1) {
                return `
                <button onClick="joindTeam(${post.id})" class="btn btn-join">
                    <i class="ri-user-add-line"></i>
                    Tham Gia
                </button>
            `;
            }else{
                return ``;
            }

        }

        // Cách sử dụng:
        // Giả sử bạn lấy được postId từ URL, ví dụ: https://yoursite.com/posts/123
        // const postId = 123;
        // displayPostDetail(postId);
        function formatTimeForDisplay(time) {
            if (!time) return '--:--';

            try {
                if (typeof time === 'string') {
                    if (time.startsWith('PT')) {
                        const hoursMatch = time.match(/PT(\d+)H/);
                        if (hoursMatch && hoursMatch[1]) {
                            const hours = parseInt(hoursMatch[1]).toString().padStart(2, '0');
                            return `${hours}:00`;
                        }
                    } else if (time.includes(':')) {
                        const parts = time.split(':');
                        if (parts.length >= 2) {
                            const hours = parseInt(parts[0]).toString().padStart(2, '0');
                            const minutes = parseInt(parts[1]).toString().padStart(2, '0');
                            return `${hours}:${minutes}`;
                        }
                    }
                }

                if (time instanceof Date) {
                    const hours = time.getHours().toString().padStart(2, '0');
                    const minutes = time.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                }

                return '--:--';
            } catch (error) {
                console.warn('Error formatting time for display:', error);
                return '--:--';
            }
        }
    </script>
</body>
</html>