@{
    ViewData["Title"] = "Đăng nhập / Đăng ký";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - Sportivey</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        * {
            font-family: 'Inter', sans-serif;
        }

        /* Sport-themed background */
        body {
            background: linear-gradient(135deg, 
                #1e40af 0%,    /* Deep blue */
                #059669 25%,   /* Emerald green */
                #dc2626 50%,   /* Red */
                #ea580c 75%,   /* Orange */
                #7c3aed 100%   /* Purple */
            );
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
        }

        @@keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Add sport pattern overlay */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: 
                radial-gradient(circle at 20% 80%, rgba(255,255,255,0.1) 2px, transparent 2px),
                radial-gradient(circle at 80% 20%, rgba(255,255,255,0.1) 2px, transparent 2px),
                radial-gradient(circle at 40% 40%, rgba(255,255,255,0.05) 1px, transparent 1px);
            background-size: 50px 50px, 60px 60px, 30px 30px;
            pointer-events: none;
            z-index: 0;
        }

        #container {
            position: relative;
            z-index: 1;
        }

        /* Base container for forms */
        .form-container {
            position: absolute;
            top: 0;
            height: 100%;
            width: 50%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 0 40px;
            transition: all 0.6s ease-in-out;
        }

        /* Login and Register initial positions */
        .login-container {
            left: 0;
            z-index: 2;
        }

        .register-container {
            left: 0;
            z-index: 1;
            opacity: 0;
        }

        /* Animation when switching to Register panel */
        .right-panel-active .login-container {
            transform: translateX(100%);
            opacity: 0;
        }

        .right-panel-active .register-container {
            transform: translateX(100%);
            opacity: 1;
            z-index: 5;
            animation: show 0.6s;
        }

        @@keyframes show {
            0%, 49.99% {
                opacity: 0;
                z-index: 1;
            }

            50%, 100% {
                opacity: 1;
                z-index: 5;
            }
        }

        /* Overlay styles with sport theme */
        .overlay-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            overflow: hidden;
            z-index: 100;
            transition: transform 0.6s ease-in-out;
        }

        .right-panel-active .overlay-container {
            transform: translateX(-100%);
        }

        .overlay {
            background: linear-gradient(135deg, 
                #1e40af 0%,    /* Sports blue */
                #059669 50%,   /* Field green */
                #dc2626 100%   /* Energy red */
            );
            position: relative;
            left: -100%;
            height: 100%;
            width: 200%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .right-panel-active .overlay {
            transform: translateX(50%);
        }

        .overlay-panel {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            padding: 0 40px;
            text-align: center;
            top: 0;
            height: 100%;
            width: 50%;
            color: #fff;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .overlay-left {
            transform: translateX(-20%);
        }

        .right-panel-active .overlay-left {
            transform: translateX(0);
        }

        .overlay-right {
            right: 0;
            transform: translateX(0);
        }

        .right-panel-active .overlay-right {
            transform: translateX(20%);
        }

        /* Separated form content for scrolling */
        .form-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .form-content {
            width: 100%;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 12px;
        }

        /* Password input container */
        .password-container {
            position: relative;
        }

        .password-toggle {
            position: absolute;
            right: 16px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #64748b;
            transition: color 0.3s ease;
            z-index: 10;
        }

        .password-toggle:hover {
            color: #1e40af;
        }

        /* Floating label input styles */
        .floating-label {
            position: relative;
        }

        .floating-label input,
        .floating-label select {
            width: 100%;
            padding: 16px 20px 16px 50px;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
        }

        .floating-label input:focus,
        .floating-label select:focus {
            outline: none;
            border-color: #1e40af;
            box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
        }

        .floating-label .icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: #64748b;
            transition: color 0.3s ease;
        }

        .floating-label input:focus + .icon,
        .floating-label select:focus + .icon {
            color: #1e40af;
        }

        /* Button styles with sport theme */
        .submit-btn {
            background: linear-gradient(135deg, #1e40af 0%, #059669 100%);
            border: none;
            padding: 16px 32px;
            border-radius: 16px;
            color: white;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(30, 64, 175, 0.3);
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(30, 64, 175, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .overlay-btn {
            border: 2px solid white;
            background: transparent;
            color: white;
            padding: 12px 32px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .overlay-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: scale(1.05);
        }

        .face-login-btn {
            background: linear-gradient(135deg, #059669 0%, #10b981 100%);
            border: none;
            padding: 16px 32px;
            border-radius: 16px;
            color: white;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(5, 150, 105, 0.3);
        }

        .face-login-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(5, 150, 105, 0.4);
        }

        /* Modal styles */
        .modal-overlay {
            backdrop-filter: blur(10px);
            background: rgba(0, 0, 0, 0.7);
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        /* Password strength indicator */
        .password-strength {
            height: 4px;
            border-radius: 2px;
            transition: all 0.3s ease;
        }

        .strength-weak { background-color: #ef4444; width: 25%; }
        .strength-fair { background-color: #f59e0b; width: 50%; }
        .strength-good { background-color: #10b981; width: 75%; }
        .strength-strong { background-color: #059669; width: 100%; }

        /* Error message styling */
        .error-message {
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
        }

        .error-message.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* Checkbox styling */
        .checkbox-wrapper {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .custom-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #e2e8f0;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .custom-checkbox.checked {
            background: #1e40af;
            border-color: #1e40af;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Sport-themed container */
        #container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .form-container {
                width: 100%;
                position: static;
                padding: 2rem;
            }
            .overlay-container {
                display: none;
            }
            #container {
                width: 100%;
                max-width: 400px;
                min-height: auto;
            }
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">
    @{
        var ErrorMessage = TempData["ErrorMessage"] as string;
    }

    @if (ErrorMessage != null)
    {
        <div class="fixed top-4 right-4 z-50 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg">
            @ErrorMessage
        </div>
    }

    <div id="container" class="relative rounded-3xl shadow-2xl overflow-hidden w-[900px] max-w-full min-h-[600px]">

        <!-- Login Form -->
        <div class="form-container login-container">
            <div class="form-header">
                <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent mb-2">
                    Chào mừng trở lại!
                </h1>
                <p class="text-gray-600">Đăng nhập để tiếp tục hành trình thể thao</p>
            </div>
            <div class="form-content">
                <form method="post" asp-controller="Common" asp-action="Login" class="space-y-6">
                    <div class="floating-label">
                        <input type="email" name="email" placeholder="Email" required />
                        <i class="ri-mail-line icon text-xl"></i>
                    </div>
                    <div class="floating-label password-container">
                        <input type="password" name="password" placeholder="Mật khẩu" required id="loginPassword" />
                        <i class="ri-lock-line icon text-xl"></i>
                        <i class="ri-eye-line password-toggle text-xl" onclick="togglePassword('loginPassword', this)"></i>
                    </div>
                    <div class="flex items-center justify-between">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="remember-me" name="RememberMe" class="sr-only">
                            <div class="custom-checkbox" onclick="toggleCheckbox('remember-me', this)">
                                <i class="ri-check-line text-white text-sm hidden"></i>
                            </div>
                            <label for="remember-me" class="cursor-pointer">Ghi nhớ đăng nhập</label>
                        </div>
                        <a href="#" class="text-blue-600 hover:text-green-600 text-sm transition-colors">Quên mật khẩu?</a>
                    </div>
                    <button type="submit" class="submit-btn w-full">
                        <span class="button-text">Đăng nhập</span>
                    </button>

                    <!-- Face Login Button -->
                    <button type="button" id="face-login-btn" class="face-login-btn w-full">
                        <i class="ri-camera-line mr-2"></i>
                        <span>Đăng nhập bằng khuôn mặt</span>
                    </button>
                </form>
            </div>
        </div>

        <!-- Register Form -->
        <div class="form-container register-container">
            <div class="form-header">
                <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-600 to-red-600 bg-clip-text text-transparent mb-2">
                    Tham gia cùng chúng tôi
                </h1>
                <p class="text-gray-600">Đăng ký để bắt đầu hành trình thể thao</p>
            </div>
            <div class="form-content">
                <form method="post" asp-controller="Common" asp-action="Register" class="space-y-4" id="registerForm">
                    <div class="floating-label">
                        <input type="text" name="fullname" placeholder="Họ và tên" required id="fullname" />
                        <i class="ri-user-3-line icon text-xl"></i>
                    </div>
                    <div id="fullname-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label">
                        <input type="email" name="email" placeholder="Email" required id="email" />
                        <i class="ri-mail-line icon text-xl"></i>
                    </div>
                    <div id="email-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label">
                        <input type="text" name="address" placeholder="Địa chỉ" required id="address" />
                        <i class="ri-home-line icon text-xl"></i>
                    </div>
                    <div id="address-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label">
                        <input type="tel" name="phoneNumber" placeholder="Số điện thoại" required id="phone" pattern="[0-9]{10,15}" />
                        <i class="ri-phone-line icon text-xl"></i>
                    </div>
                    <div id="phone-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label">
                        <select name="gender" required id="gender">
                            <option value="">Chọn giới tính</option>
                            <option value="Nam">Nam</option>
                            <option value="Nữ">Nữ</option>
                            <option value="Khác">Khác</option>
                        </select>
                        <i class="ri-user-heart-line icon text-xl"></i>
                    </div>
                    <div id="gender-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label">
                        <input type="date" name="dateOfBirth" required id="dateOfBirth" />
                        <i class="ri-calendar-line icon text-xl"></i>
                    </div>
                    <div id="dob-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label password-container">
                        <input type="password" name="password" placeholder="Mật khẩu" required id="registerPassword" />
                        <i class="ri-lock-line icon text-xl"></i>
                        <i class="ri-eye-line password-toggle text-xl" onclick="togglePassword('registerPassword', this)"></i>
                    </div>
                    <div class="mt-2">
                        <div class="flex justify-between items-center mb-1">
                            <span class="text-xs text-gray-500">Độ mạnh mật khẩu</span>
                            <span id="strength-text" class="text-xs text-gray-500"></span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-1">
                            <div id="strength-bar" class="password-strength bg-gray-200"></div>
                        </div>
                    </div>
                    <div id="password-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="floating-label password-container">
                        <input type="password" name="confirm-password" placeholder="Xác nhận mật khẩu" required id="confirmPassword" />
                        <i class="ri-lock-2-line icon text-xl"></i>
                        <i class="ri-eye-line password-toggle text-xl" onclick="togglePassword('confirmPassword', this)"></i>
                    </div>
                    <div id="confirm-password-error" class="error-message text-red-600 text-sm hidden"></div>

                    <div class="checkbox-wrapper">
                        <input type="checkbox" id="agree-terms" name="terms" required class="sr-only">
                        <div class="custom-checkbox" onclick="toggleCheckbox('agree-terms', this)">
                            <i class="ri-check-line text-white text-sm hidden"></i>
                        </div>
                        <label for="agree-terms" class="cursor-pointer text-sm">Tôi đồng ý với <a href="#" class="text-blue-600 hover:underline">Điều khoản</a> và <a href="#" class="text-blue-600 hover:underline">Chính sách</a></label>
                    </div>
                    <div id="terms-error" class="error-message text-red-600 text-sm hidden"></div>

                    <button type="submit" class="submit-btn w-full" id="submitBtn">
                        <span id="submitText">Đăng ký</span>
                        <div id="submitSpinner" class="loading ml-2 hidden"></div>
                    </button>
                </form>
            </div>
        </div>

        <!-- Overlay -->
        <div class="overlay-container">
            <div class="overlay">
                <div class="overlay-panel overlay-left">
                    <h1 class="text-3xl font-bold mb-4">Chào mừng trở lại! ⚽</h1>
                    <p class="text-lg mb-6">Đã có tài khoản? Đăng nhập để tiếp tục hành trình thể thao của bạn.</p>
                    <button class="overlay-btn" id="signIn">Đăng nhập</button>
                </div>
                <div class="overlay-panel overlay-right">
                    <h1 class="text-3xl font-bold mb-4">Xin chào, vận động viên! 🏆</h1>
                    <p class="text-lg mb-6">Tạo tài khoản để bắt đầu hành trình thể thao tuyệt vời.</p>
                    <button class="overlay-btn" id="signUp">Đăng ký</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Face Login Modal -->
    <div id="face-login-modal" class="fixed inset-0 z-50 flex items-center justify-center modal-overlay hidden">
        <div class="modal-content rounded-xl shadow-2xl p-8 flex flex-col items-center max-w-sm w-full mx-4">
            <h3 class="text-xl font-bold mb-2">Đăng nhập bằng khuôn mặt</h3>
            <p class="text-gray-600 mb-4 text-center">Vui lòng nhìn vào camera và quay video khuôn mặt trong 5 giây.</p>
            <video id="face-video" width="320" height="240" autoplay muted class="rounded-lg border mb-2"></video>

            <div id="recording-status" class="text-red-500 font-semibold mb-2 hidden">Đang ghi video...</div>

            <div id="face-login-controls" class="flex gap-2">
                <button type="button" id="start-record-btn" class="submit-btn">Bắt đầu</button>
                <button type="button" id="stop-record-btn" class="bg-red-500 text-white px-4 py-2 rounded-lg font-semibold" disabled>Dừng</button>
            </div>
            <video id="face-playback" width="320" height="240" controls class="rounded-lg border mb-2 hidden"></video>
            <div class="flex justify-between w-full mt-2">
                <button type="button" id="face-login-cancel" class="text-gray-500 hover:text-gray-700 font-medium">Hủy</button>
                <button type="button" id="face-login-submit" class="submit-btn" disabled>Gửi video xác thực</button>
            </div>
        </div>
    </div>

    <script>
        // Toggle password visibility
        function togglePassword(inputId, toggleIcon) {
            const passwordInput = document.getElementById(inputId);
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleIcon.classList.remove('ri-eye-line');
                toggleIcon.classList.add('ri-eye-off-line');
            } else {
                passwordInput.type = 'password';
                toggleIcon.classList.remove('ri-eye-off-line');
                toggleIcon.classList.add('ri-eye-line');
            }
        }

        // Toggle custom checkbox
        function toggleCheckbox(inputId, checkboxDiv) {
            const checkbox = document.getElementById(inputId);
            const icon = checkboxDiv.querySelector('i');
            
            checkbox.checked = !checkbox.checked;
            if (checkbox.checked) {
                checkboxDiv.classList.add('checked');
                icon.classList.remove('hidden');
            } else {
                checkboxDiv.classList.remove('checked');
                icon.classList.add('hidden');
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const signUpButton = document.getElementById('signUp');
            const signInButton = document.getElementById('signIn');
            const container = document.getElementById('container');

            // Tab switching
            signUpButton.addEventListener('click', () => {
                container.classList.add('right-panel-active');
            });

            signInButton.addEventListener('click', () => {
                container.classList.remove('right-panel-active');
            });

            // Password strength checker
            const passwordInput = document.getElementById('registerPassword');
            const strengthBar = document.getElementById('strength-bar');
            const strengthText = document.getElementById('strength-text');

            function getPasswordStrength(password) {
                let strength = 0;
                if (password.length >= 8) strength++;
                if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
                if (/\d/.test(password)) strength++;
                if (/[^a-zA-Z\d\s]/.test(password)) strength++;
                return strength;
            }

            function updatePasswordStrengthUI(password) {
                const strength = getPasswordStrength(password);
                let strengthClass = '';
                let strengthTextContent = '';

                if (password.length > 0) {
                    if (strength <= 1) {
                        strengthClass = 'strength-weak';
                        strengthTextContent = 'Yếu';
                    } else if (strength === 2) {
                        strengthClass = 'strength-fair';
                        strengthTextContent = 'Trung bình';
                    } else if (strength === 3) {
                        strengthClass = 'strength-good';
                        strengthTextContent = 'Tốt';
                    } else if (strength >= 4) {
                        strengthClass = 'strength-strong';
                        strengthTextContent = 'Rất tốt';
                    }
                }
                strengthBar.className = `password-strength ${strengthClass}`;
                strengthText.textContent = strengthTextContent;
            }

            if (passwordInput) {
                passwordInput.addEventListener('input', (event) => {
                    updatePasswordStrengthUI(event.target.value);
                });
            }

            // Form validation
            const formFields = [
                { id: 'fullname', errorId: 'fullname-error', regex: /^[a-zA-ZÀ-ỹ\s]{2,}$/, message: 'Họ tên phải có ít nhất 2 ký tự và không chứa số.' },
                { id: 'email', errorId: 'email-error', regex: /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/, message: 'Vui lòng nhập một địa chỉ email hợp lệ.' },
                { id: 'address', errorId: 'address-error', regex: /^.{5,}$/, message: 'Địa chỉ phải có ít nhất 5 ký tự.' },
                { id: 'phone', errorId: 'phone-error', regex: /^\d{10,15}$/, message: 'Số điện thoại phải có từ 10-15 chữ số.' },
            ];

            function showError(elementId, message) {
                const errorElement = document.getElementById(elementId);
                errorElement.textContent = message;
                errorElement.classList.remove('hidden');
                setTimeout(() => errorElement.classList.add('show'), 10);
            }

            function hideError(elementId) {
                const errorElement = document.getElementById(elementId);
                errorElement.classList.remove('show');
                setTimeout(() => {
                    errorElement.classList.add('hidden');
                    errorElement.textContent = '';
                }, 300);
            }

            function validateField(field, value) {
                if (!value || !field.regex.test(value)) {
                    showError(field.errorId, field.message);
                    return false;
                }
                hideError(field.errorId);
                return true;
            }

            // Add validation listeners
            formFields.forEach(field => {
                const inputElement = document.getElementById(field.id);
                if (inputElement) {
                    inputElement.addEventListener('blur', (e) => {
                        validateField(field, e.target.value);
                    });
                }
            });

            // Password validation
            const confirmPasswordInput = document.getElementById('confirmPassword');
            if (passwordInput && confirmPasswordInput) {
                confirmPasswordInput.addEventListener('blur', () => {
                    const password = passwordInput.value;
                    const confirmPassword = confirmPasswordInput.value;
                    if (confirmPassword.length > 0 && password !== confirmPassword) {
                        showError('confirm-password-error', 'Mật khẩu xác nhận không khớp.');
                    } else {
                        hideError('confirm-password-error');
                    }
                });
            }

            // Form submission
            const registerForm = document.getElementById('registerForm');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            const submitSpinner = document.getElementById('submitSpinner');

            if (registerForm) {
                registerForm.addEventListener('submit', (event) => {
                    event.preventDefault();

                    let isValid = true;
                    formFields.forEach(field => {
                        const inputElement = document.getElementById(field.id);
                        if (!validateField(field, inputElement.value)) {
                            isValid = false;
                        }
                    });

                    // Additional validations
                    if (passwordInput && getPasswordStrength(passwordInput.value) < 3) {
                        showError('password-error', 'Mật khẩu phải đạt độ mạnh "Tốt" trở lên.');
                        isValid = false;
                    }

                    if (passwordInput && confirmPasswordInput && passwordInput.value !== confirmPasswordInput.value) {
                        showError('confirm-password-error', 'Mật khẩu xác nhận không khớp.');
                        isValid = false;
                    }

                    const termsCheckbox = document.getElementById('agree-terms');
                    if (!termsCheckbox.checked) {
                        showError('terms-error', 'Bạn phải đồng ý với Điều khoản và Chính sách quyền riêng tư.');
                        isValid = false;
                    }

                    if (isValid) {
                        submitText.classList.add('hidden');
                        submitSpinner.classList.remove('hidden');
                        submitBtn.disabled = true;
                        registerForm.submit();
                    }
                });
            }

            // Face login functionality
            const faceLoginBtn = document.getElementById('face-login-btn');
            const faceLoginModal = document.getElementById('face-login-modal');
            const faceVideo = document.getElementById('face-video');
            const facePlayback = document.getElementById('face-playback');
            const startRecordBtn = document.getElementById('start-record-btn');
            const stopRecordBtn = document.getElementById('stop-record-btn');
            const faceLoginCancel = document.getElementById('face-login-cancel');
            const faceLoginSubmit = document.getElementById('face-login-submit');
            const recordingStatus = document.getElementById('recording-status');

            let mediaRecorder;
            let recordedBlobs = [];
            let stream;

            if (faceLoginBtn) {
                faceLoginBtn.addEventListener('click', async () => {
                    faceLoginModal.classList.remove('hidden');
                    facePlayback.classList.add('hidden');
                    faceLoginSubmit.disabled = true;
                    startRecordBtn.disabled = false;
                    stopRecordBtn.disabled = true;
                    
                    try {
                        stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
                        faceVideo.srcObject = stream;
                    } catch (err) {
                        alert('Không thể truy cập camera: ' + err.message);
                        faceLoginModal.classList.add('hidden');
                    }
                });

                startRecordBtn.addEventListener('click', () => {
                    recordedBlobs = [];
                    mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });
                    
                    mediaRecorder.ondataavailable = (event) => {
                        if (event.data && event.data.size > 0) {
                            recordedBlobs.push(event.data);
                        }
                    };
                    
                    mediaRecorder.onstart = () => {
                        recordingStatus.classList.remove('hidden');
                        startRecordBtn.disabled = true;
                        stopRecordBtn.disabled = false;
                    };
                    
                    mediaRecorder.onstop = () => {
                        recordingStatus.classList.add('hidden');
                        startRecordBtn.disabled = false;
                        stopRecordBtn.disabled = true;
                        const superBuffer = new Blob(recordedBlobs, { type: 'video/webm' });
                        facePlayback.src = window.URL.createObjectURL(superBuffer);
                        facePlayback.classList.remove('hidden');
                        faceLoginSubmit.disabled = false;
                    };
                    
                    mediaRecorder.start();
                    
                    setTimeout(() => {
                        if (mediaRecorder.state === "recording") {
                            mediaRecorder.stop();
                        }
                    }, 5000);
                });

                stopRecordBtn.addEventListener('click', () => {
                    if (mediaRecorder && mediaRecorder.state === "recording") {
                        mediaRecorder.stop();
                    }
                });

                faceLoginCancel.addEventListener('click', () => {
                    faceLoginModal.classList.add('hidden');
                    if (stream) {
                        stream.getTracks().forEach(track => track.stop());
                    }
                    facePlayback.classList.add('hidden');
                });

                faceLoginSubmit.addEventListener('click', () => {
                    const videoBlob = new Blob(recordedBlobs, { type: 'video/webm' });
                    const formData = new FormData();
                    formData.append('faceVideo', videoBlob, 'loginface.webm');
                    
                    fetch('/api/user/login-face', {
                        method: 'POST',
                        body: formData
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            alert('Đăng nhập thành công!');
                            window.location.href = '/';
                        } else {
                            alert('Đăng nhập bằng khuôn mặt không thành công!');
                        }
                        faceLoginModal.classList.add('hidden');
                        if (stream) {
                            stream.getTracks().forEach(track => track.stop());
                        }
                    })
                    .catch(err => {
                        alert('Có lỗi xảy ra: ' + err.message);
                        faceLoginModal.classList.add('hidden');
                        if (stream) {
                            stream.getTracks().forEach(track => track.stop());
                        }
                    });
                });
            }
        });
    </script>
</body>
</html>