@model DTOs.UserDTO.PrivateUserProfileDTO

@{
    ViewData["Title"] = "User Profile";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .btn-gradient {
            background: linear-gradient(90deg,#3b82f6 0%,#8b5cf6 100%);
            color: #fff;
            font-weight: 600;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(59,130,246,0.10);
            transition: all 0.2s;
            min-height: 44px;
            min-width: 120px;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
        }
        .btn-gradient:hover {
            background: linear-gradient(90deg,#2563eb 0%,#8b5cf6 100%);
            box-shadow: 0 8px 32px rgba(59,130,246,0.15);
            transform: translateY(-2px) scale(1.04);
        }
        .btn-cancel {
            background: #fff;
            color: #8b5cf6;
            border: 2px solid #8b5cf6;
            border-radius: 12px;
            font-weight: 600;
            min-height: 44px;
            min-width: 120px;
            transition: all 0.2s;
        }
        .btn-cancel:hover {
            background: #f3e8ff;
            color: #7c3aed;
            border-color: #7c3aed;
        }
        .avatar-glow {
            box-shadow: 0 0 0 4px rgba(59,130,246,0.1), 0 0 20px rgba(59,130,246,0.3);
        }
        .avatar-edit-btn, .face-edit-btn {
            background: rgba(59,130,246,0.93);
            color: #fff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 2px solid #fff;
            box-shadow: 0 2px 8px rgba(59,130,246,0.12);
            position: absolute;
            right: 8px;
            bottom: 8px;
            cursor: pointer;
            transition: background 0.2s;
            z-index: 2;
        }
        .avatar-edit-btn:hover, .face-edit-btn:hover {
            background: #9333ea;
        }
        .modal-bg {
            background: rgba(0,0,0,0.5);
        }
        .image-row {
            display: flex;
            justify-content: center;
            gap: 2.5rem;
            align-items: flex-end;
            margin-bottom: 2.5rem;
            flex-wrap: wrap;
        }
        .avatar-container, .face-container {
            position: relative;
            width: 140px;
            min-width: 140px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-end;
            gap: 0.5rem;
        }
        .avatar-container img, .face-container img {
            width: 130px;
            height: 130px;
            object-fit: cover;
            border-radius: 1.5rem;
            border: 4px solid #fff;
            box-shadow: 0 8px 28px rgba(0,0,0,0.09);
        }
        .avatar-container img {
            border-radius: 50%;
        }
        .face-container img {
            border-radius: 1.5rem;
        }
        .image-label {
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 0.5rem;
            font-weight: 600;
            color: #6366f1;
            font-size: 1.05rem;
            background: linear-gradient(90deg,#e0e7ff 0%,#f3e8ff 100%);
            border-radius: 0.75rem;
            padding: 0.25rem 0;
            box-shadow: 0 2px 8px rgba(99,102,241,0.02);
        }
        @@media (max-width: 800px) {
            .image-row { gap: 1rem; }
            .avatar-container, .face-container { width: 100px; min-width: 100px;}
            .avatar-container img, .face-container img { width: 90px; height: 90px; }
            .image-label { font-size: .97rem; padding: 0.18rem 0; }
        }
        @@media (max-width: 600px) {
            .image-row { gap: 0.5rem; }
            .avatar-container, .face-container { width: 78px; min-width: 78px;}
            .avatar-container img, .face-container img { width: 62px; height: 62px; }
            .image-label { font-size: .92rem; padding: 0.12rem 0; }
        }

        .toast {
            position: fixed;
            left: 50%;
            top: 1.5rem;
            transform: translateX(-50%);
            z-index: 9999;
            min-width: 240px;
            max-width: 96vw;
            padding: 1rem 1.5rem;
            border-radius: .75rem;
            font-weight: 500;
            box-shadow: 0 4px 24px rgba(0,0,0,0.09);
            animation: fade-in .3s;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            pointer-events: auto;
        }
        .toast-success { background: #22c55e; color: #fff; }
        .toast-error { background: #ef4444; color: #fff; }
        .toast-loading { background: #fbbf24; color: #fff; }
        .loading-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @@keyframes spin {
            to { transform: rotate(360deg); }
        }
        @@keyframes fade-in {
            from { opacity: 0; transform: translateY(-10px);}
            to { opacity: 1;}
        }
    </style>
}

<div id="toastContainer" style="pointer-events:none;"></div>

@if (TempData["ErrorMessage"] != null)
{
    <script>
        window.addEventListener("DOMContentLoaded", function () {
            showToast("@TempData["ErrorMessage"]", "error");
        });
    </script>
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-emerald-50 relative overflow-hidden">
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4 py-8">
        <div class="profile-card w-full max-w-3xl rounded-3xl p-6 md:p-10 animate-slide-up">
            <div class="image-row">
                <div class="avatar-container group" id="avatarClick">
                    <img id="avatarImg" src="@Model.AvatarUrl" alt="Avatar" class="avatar-glow" />
                    <div class="avatar-edit-btn" title="Đổi ảnh đại diện">
                        <i class="ri-camera-line text-xl"></i>
                    </div>
                    <div class="image-label">Ảnh đại diện</div>
                </div>
            </div>

            <form id="profileForm" method="post" action="#" class="space-y-6" autocomplete="off">
                <input type="hidden" id="userIdInput" value="@Model.UserId" />
                <div id="profileFields">
                    <div id="profileReadMode">
                        <div class="grid grid-cols-1 gap-6">
                            <div>
                                <label class="text-sm text-gray-500">Họ và tên</label>
                                <div id="displayFullname" class="font-semibold text-gray-800">@Model.FullName</div>
                            </div>
                            <div>
                                <label class="text-sm text-gray-500">Email</label>
                                <div id="displayEmail" class="font-semibold text-gray-800">@Model.Email</div>
                            </div>
                            <div>
                                <label class="text-sm text-gray-500">Số điện thoại</label>
                                <div id="displayPhone" class="font-semibold text-gray-800">@Model.PhoneNumber</div>
                            </div>
                            <div>
                                <label class="text-sm text-gray-500">Địa chỉ</label>
                                <div id="displayAddress" class="font-semibold text-gray-800">@Model.Address</div>
                            </div>
                        </div>
                    </div>
                    <div id="profileEditMode" class="hidden">
                        <div class="grid grid-cols-1 gap-6">
                            <div>
                                <label class="text-sm text-gray-500">Họ và tên</label>
                                <input type="text" name="FullName" id="fullnameInput"
                                       class="w-full border-b-2 border-primary py-2 text-base font-semibold outline-none" value="@Model.FullName" />
                            </div>
                            <div>
                                <label class="text-sm text-gray-500">Email</label>
                                <input type="email" name="Email" id="emailInput"
                                       class="w-full border-b-2 border-primary py-2 text-base font-semibold outline-none" value="@Model.Email" />
                            </div>
                            <div>
                                <label class="text-sm text-gray-500">Số điện thoại</label>
                                <input type="text" name="PhoneNumber" id="phoneInput"
                                       class="w-full border-b-2 border-primary py-2 text-base font-semibold outline-none" value="@Model.PhoneNumber" />
                            </div>
                            <div>
                                <label class="text-sm text-gray-500">Địa chỉ</label>
                                <input type="text" name="Address" id="addressInput"
                                       class="w-full border-b-2 border-primary py-2 text-base font-semibold outline-none" value="@Model.Address" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="flex gap-4 justify-center mt-8">
                    <button type="button" id="editBtn" class="btn-gradient">
                        <i class="ri-edit-line text-lg"></i>
                        <span>Sửa thông tin</span>
                    </button>
                    <button type="submit" id="saveBtn" class="btn-gradient hidden">
                        <i class="ri-save-3-line text-lg"></i>
                        <span>Lưu</span>
                    </button>
                    <button type="button" id="cancelBtn" class="btn-cancel hidden">
                        <i class="ri-close-line text-lg"></i>
                        <span>Huỷ</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Avatar Upload -->
<div id="avatarModal" class="fixed inset-0 modal-bg flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-3xl p-8 shadow-lg w-full max-w-md relative">
        <button type="button" onclick="closeModal('avatarModal')" class="btn-cancel absolute top-4 right-4" title="Đóng">
            <i class="ri-close-line text-2xl"></i>
        </button>
        <h2 class="text-xl font-bold mb-4">Cập nhật ảnh đại diện</h2>
        <form id="avatarForm" enctype="multipart/form-data" method="post" action="#">
            <input type="file" id="avatarUpload" name="avatar" accept="image/*" class="mb-4 block w-full" />
            <img id="avatarPreviewModal" src="" class="w-32 h-32 object-cover rounded-full mx-auto mb-4" />
            <div id="avatarLoading" class="flex justify-center mb-4 hidden">
                <span class="loading-spinner"></span>
            </div>
            <button type="submit" class="w-full btn-gradient mt-2">
                <i class="ri-upload-cloud-2-line text-lg"></i>
                <span>Lưu ảnh mới</span>
            </button>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        // Toast notification
        function showToast(message, type = "success") {
            const icons = {
                success: '<i class="ri-checkbox-circle-line text-xl"></i>',
                error: '<i class="ri-close-circle-line text-xl"></i>',
                loading: '<span class="loading-spinner"></span>'
            };
            const toast = document.createElement("div");
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `${icons[type] || ''}<span>${message}</span>`;
            document.getElementById("toastContainer").appendChild(toast);
            if (type !== "loading") {
                setTimeout(() => { toast.remove(); }, 2700);
            }
            return toast;
        }

        function removeLoadingToast(toast) {
            if (toast) toast.remove();
        }

        // Data setup
        const originalData = {
            fullname: document.getElementById("fullnameInput").value,
            email: document.getElementById("emailInput").value,
            phone: document.getElementById("phoneInput").value,
            address: document.getElementById("addressInput").value,
            userId: document.getElementById("userIdInput")?.value
        };

        const editBtn = document.getElementById("editBtn");
        const saveBtn = document.getElementById("saveBtn");
        const cancelBtn = document.getElementById("cancelBtn");
        const profileReadMode = document.getElementById("profileReadMode");
        const profileEditMode = document.getElementById("profileEditMode");
        const profileForm = document.getElementById("profileForm");
        let editMode = false;

        // Edit mode toggle
        editBtn.addEventListener("click", function () {
            editMode = true;
            profileReadMode.classList.add("hidden");
            profileEditMode.classList.remove("hidden");
            editBtn.classList.add("hidden");
            saveBtn.classList.remove("hidden");
            cancelBtn.classList.remove("hidden");
        });

        cancelBtn.addEventListener("click", function () {
            editMode = false;
            profileReadMode.classList.remove("hidden");
            profileEditMode.classList.add("hidden");
            editBtn.classList.remove("hidden");
            saveBtn.classList.add("hidden");
            cancelBtn.classList.add("hidden");

            // reset lại dữ liệu
            document.getElementById("fullnameInput").value = originalData.fullname;
            document.getElementById("emailInput").value = originalData.email;
            document.getElementById("phoneInput").value = originalData.phone;
            document.getElementById("addressInput").value = originalData.address;
        });

        // AJAX update profile
        profileForm.addEventListener("submit", function (e) {
            e.preventDefault();
            if (!editMode) return false;
            const loadingToast = showToast("Đang cập nhật thông tin...", "loading");
            const dto = {
                userId: originalData.userId,
                fullname: document.getElementById("fullnameInput").value,
                email: document.getElementById("emailInput").value,
                address: document.getElementById("addressInput").value,
                phoneNumber: document.getElementById("phoneInput").value
            };

            $.ajax({
                url: '/Common/UpdateProfile',
                type: 'POST',
                data: dto,
                success: function (updatedUser) {
                    removeLoadingToast(loadingToast);
                    document.getElementById("displayFullname").textContent = updatedUser.fullName;
                    document.getElementById("displayEmail").textContent = updatedUser.email;
                    document.getElementById("displayPhone").textContent = updatedUser.phoneNumber;
                    document.getElementById("displayAddress").textContent = updatedUser.address;

                    // Update lại dữ liệu gốc
                    originalData.fullname = updatedUser.fullName;
                    originalData.email = updatedUser.email;
                    originalData.phone = updatedUser.phoneNumber;
                    originalData.address = updatedUser.address;

                    showToast("Cập nhật thành công!", "success");
                    cancelBtn.click(); // thoát chế độ edit
                },
                error: function (xhr) {
                    removeLoadingToast(loadingToast);
                    var res = xhr.responseJSON;
                    showToast(res && res.message ? res.message : 'Có lỗi xảy ra!', "error");
                }
            });
        });

        // Avatar
        document.getElementById('avatarClick').addEventListener('click', function () {
            document.getElementById('avatarModal').classList.remove('hidden');
        });

        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
        }

        document.getElementById('avatarUpload').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) document.getElementById('avatarPreviewModal').src = URL.createObjectURL(file);
        });

        document.getElementById('avatarForm').addEventListener('submit', function (e) {
            e.preventDefault();
            const loadingElm = document.getElementById('avatarLoading');
            loadingElm.classList.remove('hidden');
            const loadingToast = showToast("Đang cập nhật ảnh đại diện...", "loading");

            const formData = new FormData();
            formData.append('userId', originalData.userId);
            formData.append('avatar', document.getElementById('avatarUpload').files[0]);

            $.ajax({
                url: '/Common/UpdateAvatar',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (updatedUser) {
                    loadingElm.classList.add('hidden');
                    removeLoadingToast(loadingToast);
                    document.getElementById("avatarImg").src = updatedUser.avatarUrl || '/images/default-avatar.png';
                    showToast("Cập nhật avatar thành công!", "success");
                    closeModal('avatarModal');
                },
                error: function (xhr) {
                    loadingElm.classList.add('hidden');
                    removeLoadingToast(loadingToast);
                    var res = xhr.responseJSON;
                    showToast(res && res.message ? res.message : 'Có lỗi xảy ra khi cập nhật avatar!', "error");
                }
            });
        });

        // Always scroll to top and center toast (for mobile)
        function adjustToastPosition() {
            var container = document.getElementById("toastContainer");
            if (container && container.childNodes.length > 0) {
                window.scrollTo({top: 0, behavior: "smooth"});
            }
        }
        const observer = new MutationObserver(function() {
            adjustToastPosition();
        });
        observer.observe(document.getElementById("toastContainer"), {childList: true});
    </script>
}