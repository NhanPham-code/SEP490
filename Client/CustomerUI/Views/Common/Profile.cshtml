@model DTOs.UserDTO.PrivateUserProfileDTO

@{
    ViewData["Title"] = "User Profile";
}

@section Styles {
    <!-- CSS riêng cho trang Profile -->
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />
    <link href="~/css/common/profile.css" rel="stylesheet" />
    <link href="~/css/common/upload.css" rel="stylesheet" />
    <style>
        /* CSS cho vòng tròn tiến trình chụp ảnh khuôn mặt */
        #faceDirectionProgress {
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
            stroke-dasharray: 157; /* 2 * PI * 25 */
            stroke-dashoffset: 157;
            transition: stroke-dashoffset: 0.3s linear;
        }

        .direction-guide.correct #faceDirectionProgress {
            stroke: #059669;
        }

        .direction-guide.incorrect #faceDirectionProgress {
            stroke: #f59e0b;
        }

        #faceDirectionGuide {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 20;
        }

        #faceCaptureModal .modal-content {
            display: flex;
            flex-direction: column;
            max-height: 95vh; /* Giới hạn chiều cao tối đa */
        }

        #faceCaptureModal .modal-body {
            overflow-y: auto; /* Cho phép cuộn phần thân */
        }
    </style>
}

<!-- Nội dung HTML của trang -->
<div id="toastContainer" class="toast-container"></div>

@if (TempData["ErrorMessage"] != null)
{
    <script>
        window.addEventListener("DOMContentLoaded", function () {
            showToast("@TempData["ErrorMessage"]", "error");
        });
    </script>
}

<div class="bg-gradient-sport">
    <div class="relative z-10 flex items-center justify-center min-h-screen p-4 py-8">
        <div class="profile-card w-full max-w-4xl rounded-3xl p-6 md:p-10 animate-slide-up">

            <!-- Profile Header -->
            <div class="profile-header">
                <h1 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent mb-2">
                    Thông tin cá nhân
                </h1>
                <p class="text-gray-600 text-lg">Quản lý thông tin tài khoản của bạn</p>
            </div>

            <!-- Avatar Section -->
            <div class="avatar-section">
                <div class="avatar-container group" id="avatarClick" title="Nhấn để thay đổi ảnh đại diện">
                    <img id="avatarImg" src="@Context.Session.GetString("AvatarUrl")" alt="Avatar" class="avatar-glow" />
                    <div class="avatar-edit-btn" title="Đổi ảnh đại diện">
                        <i class="ri-camera-line text-lg"></i>
                    </div>
                </div>
                <div class="avatar-label">Ảnh đại diện</div>
            </div>

            <!-- Profile Form -->
            <form id="profileForm" method="post" action="#" class="space-y-6" autocomplete="off">
                <input type="hidden" id="userIdInput" value="@Model.UserId" />

                <div id="profileFields">
                    <!-- Read Mode -->
                    <div id="profileReadMode" class="animate-fade-in">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-user-line mr-2"></i>Họ và tên
                                </label>
                                <div id="displayFullname" class="form-display">@Model.FullName</div>
                            </div>
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-mail-line mr-2"></i>Email
                                </label>
                                <div id="displayEmail" class="form-display readonly-field">@Model.Email</div>
                                <div class="readonly-notice">
                                    <i class="ri-lock-line text-xs"></i>
                                    <span>Email không thể thay đổi để bảo mật tài khoản</span>
                                </div>
                            </div>
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-phone-line mr-2"></i>Số điện thoại
                                </label>
                                <div id="displayPhone" class="form-display">@Model.PhoneNumber</div>
                            </div>
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-map-pin-line mr-2"></i>Địa chỉ
                                </label>
                                <div id="displayAddress" class="form-display">@Model.Address</div>
                            </div>
                        </div>
                    </div>

                    <!-- Edit Mode -->
                    <div id="profileEditMode" class="hidden animate-fade-in">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-user-line mr-2"></i>Họ và tên
                                </label>
                                <input type="text" name="FullName" id="fullnameInput"
                                       class="form-input" value="@Model.FullName"
                                       placeholder="Nhập họ và tên" />
                            </div>
                            <!-- EMAIL FIELD - CHỈ HIỂN THỊ, KHÔNG THỂ CHỈNH SỬA -->
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-mail-line mr-2"></i>Email
                                </label>
                                <div class="form-display readonly-field">@Model.Email</div>
                                <div class="readonly-notice">
                                    <i class="ri-lock-line text-xs"></i>
                                    <span>Email không thể thay đổi để bảo mật tài khoản</span>
                                </div>
                                <!-- HIDDEN INPUT CHO FORM SUBMISSION -->
                                <input type="hidden" name="Email" id="emailInput" value="@Model.Email" />
                            </div>
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-phone-line mr-2"></i>Số điện thoại
                                </label>
                                <input type="tel" name="PhoneNumber" id="phoneInput"
                                       class="form-input" value="@Model.PhoneNumber"
                                       placeholder="Nhập số điện thoại" />
                            </div>
                            <div class="form-field">
                                <label class="form-label">
                                    <i class="ri-map-pin-line mr-2"></i>Địa chỉ
                                </label>
                                <input type="text" name="Address" id="addressInput"
                                       class="form-input" value="@Model.Address"
                                       placeholder="Nhập địa chỉ" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="form-buttons mt-8">
                    <button type="button" id="editBtn" class="btn-gradient">
                        <i class="ri-edit-line text-lg"></i>
                        <span>Chỉnh sửa</span>
                    </button>
                    <button type="submit" id="saveBtn" class="btn-gradient hidden">
                        <i class="ri-save-3-line text-lg"></i>
                        <span>Lưu thay đổi</span>
                    </button>
                    <button type="button" id="cancelBtn" class="btn-cancel hidden">
                        <i class="ri-close-line text-lg"></i>
                        <span>Hủy bỏ</span>
                    </button>
                </div>
            </form>

            <div class="border-t border-gray-200 mt-8 pt-8">
                <div class="profile-header">
                    <h2 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent mb-2">Bảo mật khuôn mặt</h2>
                    <p class="text-gray-600">Thêm hoặc cập nhật dữ liệu khuôn mặt để tăng cường bảo mật và sử dụng các tính năng nhận diện.</p>
                </div>
                <div class="form-buttons mt-6">
                    <button type="button" id="updateFaceBtn" class="btn-gradient">
                        <i class="ri-vidicon-line text-lg"></i>
                        <span>Cập nhật ảnh khuôn mặt</span>
                    </button>
                </div>
            </div>

            <!-- Stats Section -->
            <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="stat-card">
                    <i class="ri-checkbox-circle-fill text-2xl text-blue-600 mb-2"></i>
                    <div class="font-semibold text-gray-800">Tài khoản đã xác thực</div>
                    <div class="text-sm text-gray-500">Bảo mật cao</div>
                </div>
                <div class="stat-card">
                    <i class="ri-shield-check-fill text-2xl text-green-600 mb-2"></i>
                    <div class="font-semibold text-gray-800">Email được bảo vệ</div>
                    <div class="text-sm text-gray-500">Không thể thay đổi</div>
                </div>
                <div class="stat-card">
                    <i class="ri-history-line text-2xl text-purple-600 mb-2"></i>
                    <div class="font-semibold text-gray-800">Hoạt động gần đây</div>
                    <div class="text-sm text-gray-500">Hôm nay</div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Avatar Upload Modal -->
<div id="avatarModal" class="fixed inset-0 modal-overlay flex items-center justify-center z-50 hidden">
    <div class="modal-content w-full max-w-md relative">
        <button type="button" onclick="closeModal('avatarModal')" class="modal-close-btn" title="Đóng">
            <i class="ri-close-line text-lg"></i>
        </button>

        <h2 class="text-xl font-bold mb-6 text-center">
            <i class="ri-camera-line mr-2 text-blue-600"></i>
            Cập nhật ảnh đại diện
        </h2>

        <form id="avatarForm" enctype="multipart/form-data" method="post" action="#">
            <!-- HIDDEN FILE INPUT -->
            <input type="file" id="avatarUpload" name="avatar" accept="image/*" style="display: none;" />

            <!-- FILE UPLOAD AREA -->
            <div class="file-upload mb-6" id="fileUploadArea" style="cursor: pointer;">
                <i class="ri-upload-cloud-2-line text-3xl text-gray-400 mb-2" style="pointer-events: none;"></i>
                <p class="text-gray-600 font-medium" style="pointer-events: none;">Nhấn để chọn ảnh</p>
                <p class="text-sm text-gray-400 mt-1" style="pointer-events: none;">JPG, PNG hoặc GIF (tối đa 5MB)</p>
            </div>

            <!-- IMAGE PREVIEW -->
            <div id="imagePreviewContainer" class="text-center mb-4 hidden">
                <p class="text-sm text-gray-600 mb-2">Ảnh đã chọn:</p>
                <img id="avatarPreviewModal" src="" class="avatar-preview mx-auto" />
                <p id="fileInfo" class="text-xs text-gray-500 mt-2"></p>
            </div>

            <div id="avatarLoading" class="flex justify-center items-center py-4 hidden">
                <div class="loading-spinner mr-3"></div>
                <span class="text-gray-600">Đang tải lên...</span>
            </div>

            <button type="submit" class="w-full btn-gradient mt-4" id="uploadAvatarBtn" disabled>
                <i class="ri-upload-cloud-2-line text-lg"></i>
                <span>Lưu ảnh mới</span>
            </button>
        </form>
    </div>
</div>

<div id="faceCaptureModal" class="fixed inset-0 modal-overlay hidden p-4 flex justify-center items-center overflow-y-auto">
    <div class="modal-content w-full max-w-3xl relative">
        <!-- Header -->
        <div class="flex-shrink-0 px-6 py-4 border-b flex justify-between items-center">
            <h2 class="text-xl font-bold"><i class="ri-vidicon-line mr-2 text-blue-600"></i>Cập nhật dữ liệu khuôn mặt</h2>
            <button type="button" id="closeFaceModalBtn" class="modal-close-btn top-4 right-5"><i class="ri-close-line text-lg"></i></button>
        </div>

        <!-- Body -->
        <div class="modal-body p-4 md:p-6">
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-sm mb-4">
                <div class="flex items-start"><i class="ri-warning-line text-yellow-600 mt-1 mr-2 flex-shrink-0"></i><div class="text-yellow-800"><h4 class="font-semibold mb-1">Lưu ý:</h4><ul class="list-disc list-inside space-y-1"><li>Giữ khuôn mặt trong khung hình.</li><li>Quay mặt theo đúng hướng dẫn, hệ thống sẽ tự động chụp.</li><li>Nếu vi phạm quá 5 lần, quá trình sẽ tự động hủy.</li></ul></div></div>
            </div>

            <div class="flex flex-col md:flex-row gap-4">
                <!-- Left: Steps -->
                <ol id="faceStepsList" class="list-none space-y-2 md:w-2/5 lg:w-1/3"></ol>
                <!-- Right: Video -->
                <div class="video-container md:w-3/5 lg:w-2/3">
                    <video id="facePreview" class="w-full h-auto block rounded-lg bg-gray-900" autoplay muted playsinline></video>
                    <canvas id="faceCanvas" class="face-detection-canvas"></canvas>
                    <div id="faceDirectionGuide" class="direction-guide" style="display: none;"><div class="relative w-24 h-24 flex items-center justify-center"><svg class="absolute" width="100" height="100" viewBox="0 0 54 54"><circle cx="27" cy="27" r="25" fill="none" stroke="rgba(255, 255, 255, 0.2)" stroke-width="4" /><circle id="faceDirectionProgress" cx="27" cy="27" r="25" fill="none" stroke="#059669" stroke-width="4" stroke-linecap="round" /></svg><div id="faceDirectionText" class="text-center text-sm leading-tight p-2"></div></div></div>
                    <div id="faceStatus" class="face-status loading"><i class="ri-loader-line animate-spin"></i><span>Đang khởi động...</span></div>
                    <div id="faceViolationCounter" class="violation-counter" style="display: none;"><i class="ri-error-warning-line mr-1"></i>Vi phạm: <span id="faceViolationCount">0</span>/5</div>
                    <div id="faceOverlay" class="video-overlay opacity-0"><div id="faceOverlayText" class="text-xl font-semibold mb-4 text-center">Chuẩn bị...</div><div id="faceCountdown" class="countdown-text">3</div></div>
                </div>
            </div>

            <div id="faceImagePreviewContainer" class="flex gap-2 mt-4 justify-center flex-wrap min-h-[72px]"></div>
        </div>

        <!-- Footer -->
        <div class="flex-shrink-0 flex flex-wrap gap-3 justify-center px-6 py-4 border-t">
            <button type="button" id="startFaceCaptureBtn" class="sport-btn sport-btn-primary"><i class="ri-play-circle-line"></i>Bắt đầu</button>
            <button type="button" id="submitFaceImagesBtn" class="w-full md:w-auto sport-btn sport-btn-primary text-lg hidden"><i class="ri-check-double-line mr-2"></i>Lưu dữ liệu khuôn mặt</button>
        </div>
    </div>
</div>

@section Scripts {
    <!-- jQuery được load trong Layout, có thể sử dụng trực tiếp -->
    <script defer src="https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs@1.7.4/dist/tf.min.js"></script>
    <script defer src="~/js/ai/face-api.min.js"></script>
    <script defer src="~/js/face-add-update/face-add-update.js"></script>
    
    <script>
        'use strict';

        // Profile Page Module - Namespace để tránh xung đột global
        window.ProfilePage = (function() {
            // Private variables
            let originalData = {
                fullname: '',
                phone: '',
                address: '',
                userId: '',
                email: ''
            };

            let editBtn, saveBtn, cancelBtn, profileReadMode, profileEditMode, profileForm, backBtn;
            let editMode = false;

            // Enhanced Toast System
            function showToast(message, type = "success", duration = 3000) {
                const icons = {
                    success: '<i class="ri-checkbox-circle-line text-xl"></i>',
                    error: '<i class="ri-close-circle-line text-xl"></i>',
                    loading: '<div class="loading-spinner"></div>',
                    warning: '<i class="ri-alert-line text-xl"></i>'
                };

                const toast = document.createElement("div");
                toast.className = `toast toast-${type}`;
                toast.innerHTML = `
                    ${icons[type] || ''}
                    <span class="flex-1">${message}</span>
                    ${type !== 'loading' ? '<i class="ri-close-line cursor-pointer ml-2" onclick="this.parentElement.remove()"></i>' : ''}
                `;

                const container = document.getElementById("toastContainer");
                if (container) {
                    container.appendChild(toast);

                    if (type !== "loading" && duration > 0) {
                        setTimeout(() => {
                            if (toast.parentElement) {
                                toast.style.animation = 'fadeOut 0.3s ease';
                                setTimeout(() => {
                                    if (toast.parentElement) {
                                        toast.remove();
                                    }
                                }, 300);
                            }
                        }, duration);
                    }
                }

                return toast;
            }

            function removeLoadingToast(toast) {
                if (toast && toast.parentElement) {
                    toast.style.animation = 'fadeOut 0.3s ease';
                    setTimeout(() => {
                        if (toast.parentElement) {
                            toast.remove();
                        }
                    }, 300);
                }
            }

            // Initialize data
            function initializeData() {
                const fullnameInput = document.getElementById("fullnameInput");
                const phoneInput = document.getElementById("phoneInput");
                const addressInput = document.getElementById("addressInput");
                const userIdInput = document.getElementById("userIdInput");
                const emailInput = document.getElementById("emailInput");

                originalData.fullname = fullnameInput ? fullnameInput.value || '' : '';
                originalData.phone = phoneInput ? phoneInput.value || '' : '';
                originalData.address = addressInput ? addressInput.value || '' : '';
                originalData.userId = userIdInput ? userIdInput.value || '' : '';
                originalData.email = emailInput ? emailInput.value || '' : '';

                console.log('Original data initialized:', originalData);
            }

            // Initialize UI Elements
            function initializeUIElements() {
                editBtn = document.getElementById("editBtn");
                saveBtn = document.getElementById("saveBtn");
                cancelBtn = document.getElementById("cancelBtn");
                profileReadMode = document.getElementById("profileReadMode");
                profileEditMode = document.getElementById("profileEditMode");
                profileForm = document.getElementById("profileForm");
                backBtn = document.getElementById("backBtn");

                console.log('UI Elements initialized');
            }

            // Enhanced Back Button Functionality
            function handleBackNavigation() {
                console.log('Back button clicked');
                
                if (editMode) {
                    if (confirm('Bạn có thay đổi chưa được lưu. Bạn có muốn thoát không?')) {
                        toggleEditMode(false);
                        goBack();
                    }
                    return;
                }
                
                goBack();
            }

            function goBack() {
                if (document.referrer && document.referrer !== window.location.href) {
                    window.history.back();
                } else if (window.history.length > 1) {
                    window.history.go(-1);
                } else {
                    window.location.href = '/';
                }
            }

            // Enhanced Edit Mode Toggle
            function toggleEditMode(isEdit) {
                console.log('Toggle edit mode:', isEdit);

                editMode = isEdit;

                if (isEdit) {
                    if (profileReadMode) profileReadMode.classList.add("hidden");
                    if (profileEditMode) profileEditMode.classList.remove("hidden");
                    if (editBtn) editBtn.classList.add("hidden");
                    if (saveBtn) saveBtn.classList.remove("hidden");
                    if (cancelBtn) cancelBtn.classList.remove("hidden");

                    setTimeout(() => {
                        const fullnameInput = document.getElementById("fullnameInput");
                        if (fullnameInput) {
                            fullnameInput.focus();
                        }
                    }, 100);
                } else {
                    if (profileReadMode) profileReadMode.classList.remove("hidden");
                    if (profileEditMode) profileEditMode.classList.add("hidden");
                    if (editBtn) editBtn.classList.remove("hidden");
                    if (saveBtn) saveBtn.classList.add("hidden");
                    if (cancelBtn) cancelBtn.classList.add("hidden");

                    // Reset form data
                    const fullnameInput = document.getElementById("fullnameInput");
                    const phoneInput = document.getElementById("phoneInput");
                    const addressInput = document.getElementById("addressInput");

                    if (fullnameInput) fullnameInput.value = originalData.fullname;
                    if (phoneInput) phoneInput.value = originalData.phone;
                    if (addressInput) addressInput.value = originalData.address;
                }
            }

            // Enhanced Form Validation
            function validateForm() {
                const fullnameInput = document.getElementById("fullnameInput");
                const phoneInput = document.getElementById("phoneInput");

                if (!fullnameInput) {
                    console.error('Fullname input not found');
                    return false;
                }

                const fullname = fullnameInput.value.trim();
                const phone = phoneInput ? phoneInput.value.trim() : '';

                if (!fullname) {
                    showToast("Vui lòng nhập họ và tên", "error");
                    fullnameInput.focus();
                    return false;
                }

                if (phone) {
                    const phoneRegex = /^[0-9]{10,11}$/;
                    if (!phoneRegex.test(phone)) {
                        showToast("Số điện thoại không hợp lệ (10-11 số)", "error");
                        phoneInput.focus();
                        return false;
                    }
                }

                return true;
            }

            // Modal Functions
            function openModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.remove('hidden');
                    resetModalState();
                }
            }

            function closeModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.add('hidden');
                    resetModalState();
                }
                if (modalId === 'faceCaptureModal' && window.FaceCapture) {
                    window.FaceCapture.stop(); // This now just pauses the video/detection
                }
            }

            function resetModalState() {
                const avatarUpload = document.getElementById('avatarUpload');
                const previewContainer = document.getElementById('imagePreviewContainer');
                const uploadBtn = document.getElementById('uploadAvatarBtn');

                if (avatarUpload) avatarUpload.value = '';
                if (previewContainer) previewContainer.classList.add('hidden');
                if (uploadBtn) uploadBtn.disabled = true;
            }

            // File handling functions
            function triggerFileSelect() {
                const avatarUpload = document.getElementById('avatarUpload');
                if (avatarUpload) {
                    avatarUpload.click();
                } else {
                    showToast("Lỗi: Không thể mở hộp thoại chọn file", "error");
                }
            }

            function handleFileSelect(file) {
                console.log('File selected:', file.name, file.size, file.type);

                if (!file.type.startsWith('image/')) {
                    showToast("Vui lòng chọn file ảnh (JPG, PNG, GIF)", "error");
                    return;
                }

                if (file.size > 5 * 1024 * 1024) {
                    showToast("File quá lớn, vui lòng chọn file dưới 5MB", "error");
                    return;
                }

                const reader = new FileReader();
                const avatarPreview = document.getElementById('avatarPreviewModal');
                const previewContainer = document.getElementById('imagePreviewContainer');
                const fileInfo = document.getElementById('fileInfo');
                const uploadBtn = document.getElementById('uploadAvatarBtn');

                reader.onload = function (e) {
                    if (avatarPreview && previewContainer) {
                        avatarPreview.src = e.target.result;
                        previewContainer.classList.remove('hidden');

                        if (fileInfo) {
                            const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                            fileInfo.textContent = `${file.name} (${sizeInMB} MB)`;
                        }

                        if (uploadBtn) {
                            uploadBtn.disabled = false;
                        }

                        showToast("Ảnh đã được chọn và hiển thị", "success", 1500);
                    }
                };

                reader.onerror = function () {
                    showToast("Lỗi khi đọc file ảnh", "error");
                };

                reader.readAsDataURL(file);
            }

            // Initialize all event listeners
            function initializeEventListeners() {

                // Edit Button Event
                if (editBtn) {
                    editBtn.addEventListener("click", function (e) {
                        e.preventDefault();
                        toggleEditMode(true);
                    });
                }

                // Cancel Button Event
                if (cancelBtn) {
                    cancelBtn.addEventListener("click", function (e) {
                        e.preventDefault();
                        toggleEditMode(false);
                    });
                }

                // Avatar Click Event
                const avatarContainer = document.getElementById('avatarClick');
                if (avatarContainer) {
                    avatarContainer.addEventListener('click', function (e) {
                        e.preventDefault();
                        openModal('avatarModal');
                    });
                }

                // Face Update Button Event
                const updateFaceBtn = document.getElementById('updateFaceBtn');
                if (updateFaceBtn) {
                    updateFaceBtn.addEventListener('click', function () {
                        openModal('faceCaptureModal');
                        if (window.FaceCapture && typeof window.FaceCapture.start === 'function') {
                            window.FaceCapture.start();
                        } else {
                            showToast('Lỗi: Mô-đun chụp ảnh khuôn mặt chưa sẵn sàng.', 'error');
                        }
                    });
                }

                // File upload events
                const fileUploadArea = document.getElementById('fileUploadArea');
                const avatarUpload = document.getElementById('avatarUpload');

                if (fileUploadArea) {
                    fileUploadArea.addEventListener('click', function (e) {
                        e.preventDefault();
                        triggerFileSelect();
                    });
                }

                if (avatarUpload) {
                    avatarUpload.addEventListener('change', function (e) {
                        const file = e.target.files[0];
                        if (file) {
                            handleFileSelect(file);
                        }
                    });
                }

                // Form submissions
                if (profileForm) {
                    profileForm.addEventListener("submit", function (e) {
                        e.preventDefault();
                        
                        if (!editMode || !validateForm()) return;

                        const loadingToast = showToast("Đang cập nhật thông tin...", "loading");

                        const fullnameInput = document.getElementById("fullnameInput");
                        const addressInput = document.getElementById("addressInput");
                        const phoneInput = document.getElementById("phoneInput");

                        const dto = {
                            userId: originalData.userId,
                            fullname: fullnameInput ? fullnameInput.value.trim() : '',
                            email: originalData.email,
                            address: addressInput ? addressInput.value.trim() : '',
                            phoneNumber: phoneInput ? phoneInput.value.trim() : ''
                        };

                        if (saveBtn) saveBtn.disabled = true;
                        if (cancelBtn) cancelBtn.disabled = true;

                        $.ajax({
                            url: '/Common/UpdateProfile',
                            type: 'POST',
                            data: dto,
                            timeout: 10000,
                            success: function (updatedUser) {
                                removeLoadingToast(loadingToast);

                                console.log('Update profile success');

                                // Update profile display
                                document.getElementById("displayFullname").textContent = updatedUser.fullName;
                                document.getElementById("displayPhone").textContent = updatedUser.phoneNumber;
                                document.getElementById("displayAddress").textContent = updatedUser.address;

                                // Refresh header để lấy dữ liệu session mới
                                if (typeof window.refreshHeaderFromSession === 'function') {
                                    window.refreshHeaderFromSession();
                                }

                                showToast("Cập nhật thông tin thành công!", "success");
                                toggleEditMode(false);
                            },
                            error: function (xhr) {
                                removeLoadingToast(loadingToast);
                                const res = xhr.responseJSON;
                                const errorMessage = res && res.message ? res.message : 'Có lỗi xảy ra, vui lòng thử lại!';
                                showToast(errorMessage, "error");
                            },
                            complete: function () {
                                if (saveBtn) saveBtn.disabled = false;
                                if (cancelBtn) cancelBtn.disabled = false;
                            }
                        });
                    });
                }

                // Avatar form submission
                const avatarForm = document.getElementById('avatarForm');
                if (avatarForm) {
                    avatarForm.addEventListener('submit', function (e) {
                        e.preventDefault();

                        const file = avatarUpload ? avatarUpload.files[0] : null;
                        if (!file) {
                            showToast("Vui lòng chọn ảnh trước khi tải lên", "error");
                            return;
                        }

                        const loadingElm = document.getElementById('avatarLoading');
                        const uploadBtn = document.getElementById('uploadAvatarBtn');

                        if (loadingElm) loadingElm.classList.remove('hidden');
                        if (uploadBtn) uploadBtn.disabled = true;

                        const loadingToast = showToast("Đang tải lên ảnh đại diện...", "loading");

                        const formData = new FormData();
                        formData.append('userId', originalData.userId);
                        formData.append('avatar', file);

                        $.ajax({
                            url: '/Common/UpdateAvatar',
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            timeout: 30000,
                            success: function (updatedUser) {
                                // Hide loading elements
                                if (loadingElm) loadingElm.classList.add('hidden');
                                removeLoadingToast(loadingToast);

                                // Update avatar in profile page
                                const avatarImg = document.getElementById("avatarImg");
                                if (avatarImg) {
                                    const avatarUrl = updatedUser.avatarUrl || 'https://localhost:7136/avatars/default-avatar.png';
                                    avatarImg.src = avatarUrl + '?t=' + Date.now(); // Add cache buster
                                }

                                // Refresh header để lấy dữ liệu session mới
                                if (typeof window.refreshHeaderFromSession === 'function') {
                                    console.log('🔄 Refreshing header from session...');
                                    window.refreshHeaderFromSession();
                                } else {
                                    console.error('❌ refreshHeaderFromSession function not found');
                                }

                                showToast("Cập nhật ảnh đại diện thành công!", "success");
                                closeModal('avatarModal');
                            },
                            error: function (xhr) {
                                // Hide loading elements and display error
                                if (loadingElm) loadingElm.classList.add('hidden');
                                removeLoadingToast(loadingToast);

                                const res = xhr.responseJSON;
                                const errorMessage = res && res.message ? res.message : 'Có lỗi xảy ra khi tải lên ảnh!';
                                showToast(errorMessage, "error");
                            },
                            complete: function () {
                                if (uploadBtn) uploadBtn.disabled = false;
                            }
                        });
                    });
                }

                // Keyboard shortcuts
                document.addEventListener('keydown', function (e) {
                    if (e.key === 'Escape') {
                        if (editMode) {
                            toggleEditMode(false);
                        } else {
                            handleBackNavigation();
                        }
                    }

                    if ((e.ctrlKey || e.metaKey) && e.key === 's' && editMode) {
                        e.preventDefault();
                        if (profileForm) profileForm.dispatchEvent(new Event('submit'));
                    }
                });

                // Browser back button handling
                window.addEventListener('popstate', function(e) {
                    if (editMode) {
                        e.preventDefault();
                        if (confirm('Bạn có thay đổi chưa được lưu. Bạn có muốn thoát không?')) {
                            toggleEditMode(false);
                        } else {
                            window.history.pushState(null, '', window.location.href);
                        }
                    }
                });

                // Mobile-specific enhancements
                if (window.innerWidth <= 768) {
                    const editableInputs = document.querySelectorAll('input:not([type="hidden"]):not([type="file"])');
                    editableInputs.forEach(input => {
                        input.addEventListener('focus', function () {
                            this.style.fontSize = '16px';
                        });
                    });
                }

                // Handle orientation change
                window.addEventListener('orientationchange', function () {
                    setTimeout(() => {
                        window.scrollTo(0, 0);
                    }, 500);
                });
            }

            // Public initialization method
            function init() {
                initializeData();
                initializeUIElements();
                initializeEventListeners();
                
                showToast("Trang profile đã sẵn sàng", "success", 2000);
                console.log('Profile page initialized successfully');
            }

            // Public API
            return {
                init: init,
                closeModal: closeModal // Export for global access
            };
        })();

        // Initialize when document is ready
        $(document).ready(function() {
            console.log('jQuery ready, initializing profile page...');
            window.ProfilePage.init();
        });

        // Make closeModal globally available for onclick handlers
        window.closeModal = function(modalId) {
            window.ProfilePage.closeModal(modalId);
        };
    </script>
}