@{
    ViewData["Title"] = "Quên Mật Khẩu";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Sportivey</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet" />

    <link href="~/css/common/forgot.css" rel="stylesheet" />
</head>
<body class="main-layout">
    @{
        var ErrorMessage = TempData["ErrorMessage"] as string;
        var SuccessMessage = TempData["SuccessMessage"] as string;
    }

    @if (ErrorMessage != null)
    {
        <div class="notification bg-red-500 text-white">
            @ErrorMessage
        </div>
    }

    @if (SuccessMessage != null)
    {
        <div class="notification bg-green-500 text-white">
            @SuccessMessage
        </div>
    }

    <a href="@Url.Action("Index", "Home")" class="back-to-home-btn">
        <i class="ri-home-line"></i>
        <span>Trang chủ</span>
    </a>

    <div class="form-container">
        <!-- Progress Indicator -->
        <div class="progress-container">
            <div class="progress-step active" id="progress-1">1</div>
            <div class="progress-line" id="line-1"></div>
            <div class="progress-step" id="progress-2">2</div>
            <div class="progress-line" id="line-2"></div>
            <div class="progress-step" id="progress-3">3</div>
        </div>

        <!-- Step 1: Nhập Email -->
        <div id="step-1" class="step active">
            <div class="text-center form-spacing">
                <h1 class="main-title">
                    Quên mật khẩu?
                </h1>
                <p class="subtitle">Nhập email để nhận mã xác thực khôi phục tài khoản.</p>
            </div>

            <form id="send-code-form" class="space-y-6">
                @Html.AntiForgeryToken()
                <div class="floating-label">
                    <input type="email" name="email" id="email" placeholder="Nhập địa chỉ email của bạn" required />
                    <i class="ri-mail-line icon text-xl"></i>
                </div>
                <div id="email-error" class="error-message"></div>
                <div id="email-success" class="success-message"></div>

                <button type="submit" class="submit-btn w-full" id="send-code-btn">
                    <span class="button-text">Gửi mã xác thực</span>
                    <div class="loading ml-2 hidden"></div>
                </button>

                <div class="text-center">
                    <a href="@Url.Action("Login", "Common")" class="link-text">
                        <i class="ri-arrow-left-line mr-1"></i>
                        Quay lại Đăng nhập
                    </a>
                </div>
            </form>
        </div>

        <!-- Step 2: Xác thực mã -->
        <div id="step-2" class="step">
            <div class="text-center form-spacing">
                <h1 class="main-title">
                    Xác thực tài khoản
                </h1>
                <p class="subtitle">Mã xác thực đã được gửi tới <span id="user-email" class="font-semibold text-blue-600"></span></p>
                <p class="text-sm text-gray-500">Vui lòng kiểm tra hộp thư và spam.</p>
            </div>

            <form id="verify-code-form" class="space-y-6">
                <div class="floating-label">
                    <input type="text" name="code" id="verification-code" placeholder="Nhập mã xác thực 6 số"
                           required pattern="[0-9]{6}" maxlength="6" />
                    <i class="ri-key-2-line icon text-xl"></i>
                </div>
                <div id="code-error" class="error-message"></div>

                <div class="timer" id="timer-display"></div>

                <button type="submit" class="submit-btn w-full" id="verify-code-btn">
                    <span class="button-text">Xác nhận mã</span>
                    <div class="loading ml-2 hidden"></div>
                </button>

                <div class="text-center">
                    <span class="text-gray-600 text-sm">Không nhận được mã? </span>
                    <button type="button" id="resend-code-btn" class="resend-btn text-sm" disabled>
                        Gửi lại (<span id="resend-timer">60</span>s)
                    </button>
                </div>
            </form>
        </div>

        <!-- Step 3: Đặt lại mật khẩu -->
        <div id="step-3" class="step">
            <div class="text-center form-spacing">
                <h1 class="main-title">
                    Tạo mật khẩu mới
                </h1>
                <p class="subtitle">Tạo mật khẩu mới để bảo vệ tài khoản của bạn.</p>
            </div>

            <form id="reset-password-form" class="space-y-6">
                <div class="floating-label password-container">
                    <input type="password" name="newPassword" id="new-password" placeholder="Mật khẩu mới" required />
                    <i class="ri-lock-line icon text-xl"></i>
                    <i class="ri-eye-line password-toggle text-xl" onclick="togglePassword('new-password', this)"></i>
                </div>
                <div class="password-strength-container">
                    <div class="flex justify-between items-center mb-1">
                        <span class="text-xs text-gray-500">Độ mạnh mật khẩu</span>
                        <span id="strength-text" class="text-xs text-gray-500"></span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-1">
                        <div id="strength-bar" class="password-strength bg-gray-200"></div>
                    </div>
                </div>
                <div id="new-password-error" class="error-message"></div>

                <div class="floating-label password-container">
                    <input type="password" name="confirmPassword" id="confirm-password" placeholder="Xác nhận mật khẩu mới" required />
                    <i class="ri-lock-2-line icon text-xl"></i>
                    <i class="ri-eye-line password-toggle text-xl" onclick="togglePassword('confirm-password', this)"></i>
                </div>
                <div id="confirm-password-error" class="error-message"></div>

                <button type="submit" class="submit-btn w-full" id="reset-password-btn">
                    <span class="button-text">Đặt lại mật khẩu</span>
                    <div class="loading ml-2 hidden"></div>
                </button>
            </form>
        </div>

        <!-- Step 4: Hoàn thành -->
        <div id="step-4" class="step">
            <div class="text-center">
                <div class="success-icon">
                    <i class="ri-check-line text-3xl text-white"></i>
                </div>
                <h1 class="main-title">
                    Thành công!
                </h1>
                <p class="subtitle">Mật khẩu của bạn đã được thay đổi thành công.</p>

                <a href="@Url.Action("Login", "Common")" class="submit-btn w-full inline-flex items-center justify-center">
                    <i class="ri-login-circle-line mr-2"></i>
                    Đăng nhập ngay
                </a>
            </div>
        </div>
    </div>

    <script>
        // Utility functions
        function togglePassword(inputId, toggleIcon) {
            const passwordInput = document.getElementById(inputId);
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleIcon.classList.remove('ri-eye-line');
                toggleIcon.classList.add('ri-eye-off-line');
            } else {
                passwordInput.type = 'password';
                toggleIcon.classList.remove('ri-eye-off-line');
                toggleIcon.classList.add('ri-eye-line');
            }
        }

        function showLoading(button) {
            button.disabled = true;
            button.querySelector('.button-text').classList.add('hidden');
            button.querySelector('.loading').classList.remove('hidden');
        }

        function hideLoading(button) {
            button.disabled = false;
            button.querySelector('.button-text').classList.remove('hidden');
            button.querySelector('.loading').classList.add('hidden');
        }

        // FIXED: Enhanced message functions
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (!errorElement) return;

            // Clear any existing timeouts
            if (errorElement.hideTimeout) {
                clearTimeout(errorElement.hideTimeout);
            }

            // Set message and show immediately
            errorElement.textContent = message;
            errorElement.classList.remove('hide');
            errorElement.classList.add('show');

            console.log('Showing error:', message);
        }

        function hideError(elementId) {
            const errorElement = document.getElementById(elementId);
            if (!errorElement) return;

            // Clear any existing timeouts
            if (errorElement.hideTimeout) {
                clearTimeout(errorElement.hideTimeout);
            }

            // Hide with animation
            errorElement.classList.remove('show');
            errorElement.classList.add('hide');

            // Clear text after animation
            errorElement.hideTimeout = setTimeout(() => {
                errorElement.textContent = '';
                errorElement.classList.remove('hide');
            }, 300);

            console.log('Hiding error for:', elementId);
        }

        function showSuccess(elementId, message) {
            const successElement = document.getElementById(elementId);
            if (!successElement) return;

            // Clear any existing timeouts
            if (successElement.hideTimeout) {
                clearTimeout(successElement.hideTimeout);
            }

            // Set message and show immediately
            successElement.textContent = message;
            successElement.classList.remove('hide');
            successElement.classList.add('show');

            console.log('Showing success:', message);
        }

        function hideSuccess(elementId) {
            const successElement = document.getElementById(elementId);
            if (!successElement) return;

            // Clear any existing timeouts
            if (successElement.hideTimeout) {
                clearTimeout(successElement.hideTimeout);
            }

            // Hide with animation
            successElement.classList.remove('show');
            successElement.classList.add('hide');

            // Clear text after animation
            successElement.hideTimeout = setTimeout(() => {
                successElement.textContent = '';
                successElement.classList.remove('hide');
            }, 300);

            console.log('Hiding success for:', elementId);
        }

        // Main page logic
        document.addEventListener('DOMContentLoaded', function () {
            let currentStep = 1;
            let userEmail = '';
            let verificationCode = '';
            let resendTimer = 0;

            console.log('Forgot password page initialized');

            // Elements
            const steps = {
                1: document.getElementById('step-1'),
                2: document.getElementById('step-2'),
                3: document.getElementById('step-3'),
                4: document.getElementById('step-4')
            };

            const forms = {
                sendCode: document.getElementById('send-code-form'),
                verifyCode: document.getElementById('verify-code-form'),
                resetPassword: document.getElementById('reset-password-form')
            };

            // Auto-hide notifications after 8 seconds
            const notifications = document.querySelectorAll('.notification');
            notifications.forEach(notification => {
                setTimeout(() => {
                    notification.classList.add('fade-out');
                    setTimeout(() => {
                        notification.remove();
                    }, 400);
                }, 8000);
            });

            // Progress và step management
            function updateProgress(step) {
                for (let i = 1; i <= 3; i++) {
                    const progressStep = document.getElementById(`progress-${i}`);
                    const progressLine = document.getElementById(`line-${i}`);

                    if (i < step) {
                        progressStep.classList.add('completed');
                        progressStep.classList.remove('active');
                        if (progressLine) progressLine.classList.add('completed');
                    } else if (i === step) {
                        progressStep.classList.add('active');
                        progressStep.classList.remove('completed');
                    } else {
                        progressStep.classList.remove('active', 'completed');
                        if (progressLine) progressLine.classList.remove('completed');
                    }
                }
            }

            function goToStep(step) {
                steps[currentStep].classList.remove('active');
                steps[step].classList.add('active');
                currentStep = step;
                updateProgress(step);
            }

            // Timer functions
            function startResendTimer() {
                resendTimer = 60;
                const resendBtn = document.getElementById('resend-code-btn');

                resendBtn.disabled = true;
                resendBtn.innerHTML = `Gửi lại (<span id="resend-timer">${resendTimer}</span>s)`;

                const interval = setInterval(() => {
                    resendTimer--;
                    const timerElement = document.getElementById('resend-timer');
                    if (timerElement) {
                        timerElement.textContent = resendTimer;
                    }

                    if (resendTimer <= 0) {
                        clearInterval(interval);
                        resendBtn.disabled = false;
                        resendBtn.textContent = 'Gửi lại';
                    }
                }, 1000);
            }

            // Password strength checker
            function getPasswordStrength(password) {
                let strength = 0;
                if (password.length >= 8) strength++;
                if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
                if (/\d/.test(password)) strength++;
                if (/[^a-zA-Z\d\s]/.test(password)) strength++;
                return strength;
            }

            function updatePasswordStrengthUI(password) {
                const strength = getPasswordStrength(password);
                const strengthBar = document.getElementById('strength-bar');
                const strengthText = document.getElementById('strength-text');
                let strengthClass = '';
                let strengthTextContent = '';

                if (password.length > 0) {
                    if (strength <= 1) {
                        strengthClass = 'strength-weak';
                        strengthTextContent = 'Yếu';
                    } else if (strength === 2) {
                        strengthClass = 'strength-fair';
                        strengthTextContent = 'Trung bình';
                    } else if (strength === 3) {
                        strengthClass = 'strength-good';
                        strengthTextContent = 'Tốt';
                    } else if (strength >= 4) {
                        strengthClass = 'strength-strong';
                        strengthTextContent = 'Rất tốt';
                    }
                }
                strengthBar.className = `password-strength ${strengthClass}`;
                strengthText.textContent = strengthTextContent;
            }

            // Event listeners
            const newPasswordInput = document.getElementById('new-password');
            if (newPasswordInput) {
                newPasswordInput.addEventListener('input', (e) => {
                    updatePasswordStrengthUI(e.target.value);
                });
            }

            // Step 1: Send verification code
            if (forms.sendCode) {
                forms.sendCode.addEventListener('submit', function (e) {
                    e.preventDefault();

                    console.log('Step 1: Send code form submitted');

                    hideError('email-error');
                    hideSuccess('email-success');

                    const email = document.getElementById('email').value;
                    const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

                    if (!emailRegex.test(email)) {
                        console.log('Email validation failed:', email);
                        showError('email-error', 'Vui lòng nhập địa chỉ email hợp lệ.');
                        return;
                    }

                    const button = document.getElementById('send-code-btn');
                    showLoading(button);

                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    const token = tokenElement ? tokenElement.value : '';

                    console.log('Sending request to server...');

                    fetch('@Url.Action("SendResetCode", "Common")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `email=${encodeURIComponent(email)}`
                    })
                        .then(response => {
                            console.log('Response status:', response.status);
                            return response.json();
                        })
                        .then(data => {
                            console.log('Server response:', data);
                            hideLoading(button);

                            if (data.success) {
                                userEmail = email;
                                document.getElementById('user-email').textContent = email;
                                showSuccess('email-success', 'Mã xác thực đã được gửi thành công!');

                                setTimeout(() => {
                                    goToStep(2);
                                    startResendTimer();
                                }, 2000);
                            } else {
                                showError('email-error', data.message || 'Không thể gửi mã xác thực. Vui lòng thử lại.');
                            }
                        })
                        .catch(error => {
                            console.error('Fetch error:', error);
                            hideLoading(button);
                            showError('email-error', 'Đã có lỗi xảy ra. Vui lòng thử lại.');
                        });
                });
            }

            // Step 2: Verify code
            if (forms.verifyCode) {
                forms.verifyCode.addEventListener('submit', function (e) {
                    e.preventDefault();

                    console.log('Step 2: Verify code form submitted');

                    hideError('code-error');

                    const code = document.getElementById('verification-code').value;

                    if (!/^[0-9]{6}$/.test(code)) {
                        console.log('Code validation failed:', code);
                        showError('code-error', 'Mã xác thực phải là 6 chữ số.');
                        return;
                    }

                    const button = document.getElementById('verify-code-btn');
                    showLoading(button);

                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    const token = tokenElement ? tokenElement.value : '';

                    fetch('@Url.Action("VerifyResetCode", "Common")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `email=${encodeURIComponent(userEmail)}&code=${encodeURIComponent(code)}`
                    })
                        .then(response => {
                            console.log('Verify response status:', response.status);
                            return response.json();
                        })
                        .then(data => {
                            console.log('Verify server response:', data);
                            hideLoading(button);

                            if (data.success) {
                                verificationCode = code;
                                goToStep(3);
                            } else {
                                showError('code-error', data.message || 'Mã xác thực không đúng hoặc đã hết hạn.');
                            }
                        })
                        .catch(error => {
                            console.error('Verify fetch error:', error);
                            hideLoading(button);
                            showError('code-error', 'Đã có lỗi xảy ra. Vui lòng thử lại.');
                        });
                });
            }

            // Resend code
            const resendBtn = document.getElementById('resend-code-btn');
            if (resendBtn) {
                resendBtn.addEventListener('click', function () {
                    if (this.disabled) return;

                    console.log('Resending code...');
                    document.getElementById('email').value = userEmail;
                    forms.sendCode.dispatchEvent(new Event('submit'));
                    startResendTimer();
                });
            }

            // Step 3: Reset password
            if (forms.resetPassword) {
                forms.resetPassword.addEventListener('submit', function (e) {
                    e.preventDefault();

                    console.log('Step 3: Reset password form submitted');

                    hideError('new-password-error');
                    hideError('confirm-password-error');

                    const newPassword = document.getElementById('new-password').value;
                    const confirmPassword = document.getElementById('confirm-password').value;
                    let isValid = true;

                    // Validate password strength
                    if (getPasswordStrength(newPassword) < 3) {
                        showError('new-password-error', 'Mật khẩu phải đạt độ mạnh "Tốt" trở lên.');
                        isValid = false;
                    }

                    // Validate password match
                    if (newPassword !== confirmPassword) {
                        showError('confirm-password-error', 'Mật khẩu xác nhận không khớp.');
                        isValid = false;
                    }

                    if (!isValid) return;

                    const button = document.getElementById('reset-password-btn');
                    showLoading(button);

                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    const token = tokenElement ? tokenElement.value : '';

                    fetch('@Url.Action("ResetPassword", "Common")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `email=${encodeURIComponent(userEmail)}&code=${encodeURIComponent(verificationCode)}&newPassword=${encodeURIComponent(newPassword)}&confirmPassword=${encodeURIComponent(confirmPassword)}`
                    })
                        .then(response => {
                            console.log('Reset response status:', response.status);
                            return response.json();
                        })
                        .then(data => {
                            console.log('Reset server response:', data);
                            hideLoading(button);

                            if (data.success) {
                                goToStep(4);
                            } else {
                                showError('new-password-error', data.message || 'Không thể đặt lại mật khẩu. Vui lòng thử lại.');
                            }
                        })
                        .catch(error => {
                            console.error('Reset fetch error:', error);
                            hideLoading(button);
                            showError('new-password-error', 'Đã có lỗi xảy ra. Vui lòng thử lại.');
                        });
                });
            }

            // Auto-focus verification code input và auto-submit khi nhập đủ 6 số
            const verificationCodeInput = document.getElementById('verification-code');
            if (verificationCodeInput) {
                verificationCodeInput.addEventListener('input', function (e) {
                    if (e.target.value.length === 6) {
                        setTimeout(() => {
                            forms.verifyCode.dispatchEvent(new Event('submit'));
                        }, 800);
                    }
                });
            }
        });
    </script>
</body>
</html>